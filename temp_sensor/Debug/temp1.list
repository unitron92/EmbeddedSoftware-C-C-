
temp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6fc  0800a6fc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a704  0800a704  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a70c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000af4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002208e  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a48  00000000  00000000  0004217d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c70  00000000  00000000  00046bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001617  00000000  00000000  00048838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000298ce  00000000  00000000  00049e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002492d  00000000  00000000  0007371d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb614  00000000  00000000  0009804a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007ff8  00000000  00000000  00183660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0018b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a67c 	.word	0x0800a67c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800a67c 	.word	0x0800a67c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b970 	b.w	8000c04 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9e08      	ldr	r6, [sp, #32]
 8000942:	460d      	mov	r5, r1
 8000944:	4604      	mov	r4, r0
 8000946:	460f      	mov	r7, r1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d14a      	bne.n	80009e2 <__udivmoddi4+0xa6>
 800094c:	428a      	cmp	r2, r1
 800094e:	4694      	mov	ip, r2
 8000950:	d965      	bls.n	8000a1e <__udivmoddi4+0xe2>
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	b143      	cbz	r3, 800096a <__udivmoddi4+0x2e>
 8000958:	fa02 fc03 	lsl.w	ip, r2, r3
 800095c:	f1c3 0220 	rsb	r2, r3, #32
 8000960:	409f      	lsls	r7, r3
 8000962:	fa20 f202 	lsr.w	r2, r0, r2
 8000966:	4317      	orrs	r7, r2
 8000968:	409c      	lsls	r4, r3
 800096a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800096e:	fa1f f58c 	uxth.w	r5, ip
 8000972:	fbb7 f1fe 	udiv	r1, r7, lr
 8000976:	0c22      	lsrs	r2, r4, #16
 8000978:	fb0e 7711 	mls	r7, lr, r1, r7
 800097c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000980:	fb01 f005 	mul.w	r0, r1, r5
 8000984:	4290      	cmp	r0, r2
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x62>
 8000988:	eb1c 0202 	adds.w	r2, ip, r2
 800098c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000990:	f080 811c 	bcs.w	8000bcc <__udivmoddi4+0x290>
 8000994:	4290      	cmp	r0, r2
 8000996:	f240 8119 	bls.w	8000bcc <__udivmoddi4+0x290>
 800099a:	3902      	subs	r1, #2
 800099c:	4462      	add	r2, ip
 800099e:	1a12      	subs	r2, r2, r0
 80009a0:	b2a4      	uxth	r4, r4
 80009a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ae:	fb00 f505 	mul.w	r5, r0, r5
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	d90a      	bls.n	80009cc <__udivmoddi4+0x90>
 80009b6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80009be:	f080 8107 	bcs.w	8000bd0 <__udivmoddi4+0x294>
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	f240 8104 	bls.w	8000bd0 <__udivmoddi4+0x294>
 80009c8:	4464      	add	r4, ip
 80009ca:	3802      	subs	r0, #2
 80009cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	2100      	movs	r1, #0
 80009d4:	b11e      	cbz	r6, 80009de <__udivmoddi4+0xa2>
 80009d6:	40dc      	lsrs	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	e9c6 4300 	strd	r4, r3, [r6]
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0xbc>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	f000 80ed 	beq.w	8000bc6 <__udivmoddi4+0x28a>
 80009ec:	2100      	movs	r1, #0
 80009ee:	e9c6 0500 	strd	r0, r5, [r6]
 80009f2:	4608      	mov	r0, r1
 80009f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f8:	fab3 f183 	clz	r1, r3
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d149      	bne.n	8000a94 <__udivmoddi4+0x158>
 8000a00:	42ab      	cmp	r3, r5
 8000a02:	d302      	bcc.n	8000a0a <__udivmoddi4+0xce>
 8000a04:	4282      	cmp	r2, r0
 8000a06:	f200 80f8 	bhi.w	8000bfa <__udivmoddi4+0x2be>
 8000a0a:	1a84      	subs	r4, r0, r2
 8000a0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a10:	2001      	movs	r0, #1
 8000a12:	4617      	mov	r7, r2
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d0e2      	beq.n	80009de <__udivmoddi4+0xa2>
 8000a18:	e9c6 4700 	strd	r4, r7, [r6]
 8000a1c:	e7df      	b.n	80009de <__udivmoddi4+0xa2>
 8000a1e:	b902      	cbnz	r2, 8000a22 <__udivmoddi4+0xe6>
 8000a20:	deff      	udf	#255	; 0xff
 8000a22:	fab2 f382 	clz	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8090 	bne.w	8000b4c <__udivmoddi4+0x210>
 8000a2c:	1a8a      	subs	r2, r1, r2
 8000a2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a32:	fa1f fe8c 	uxth.w	lr, ip
 8000a36:	2101      	movs	r1, #1
 8000a38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a40:	0c22      	lsrs	r2, r4, #16
 8000a42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a46:	fb0e f005 	mul.w	r0, lr, r5
 8000a4a:	4290      	cmp	r0, r2
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x124>
 8000a4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x122>
 8000a58:	4290      	cmp	r0, r2
 8000a5a:	f200 80cb 	bhi.w	8000bf4 <__udivmoddi4+0x2b8>
 8000a5e:	4645      	mov	r5, r8
 8000a60:	1a12      	subs	r2, r2, r0
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a68:	fb07 2210 	mls	r2, r7, r0, r2
 8000a6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a70:	fb0e fe00 	mul.w	lr, lr, r0
 8000a74:	45a6      	cmp	lr, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x14e>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a80:	d202      	bcs.n	8000a88 <__udivmoddi4+0x14c>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f200 80bb 	bhi.w	8000bfe <__udivmoddi4+0x2c2>
 8000a88:	4610      	mov	r0, r2
 8000a8a:	eba4 040e 	sub.w	r4, r4, lr
 8000a8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a92:	e79f      	b.n	80009d4 <__udivmoddi4+0x98>
 8000a94:	f1c1 0720 	rsb	r7, r1, #32
 8000a98:	408b      	lsls	r3, r1
 8000a9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa2:	fa05 f401 	lsl.w	r4, r5, r1
 8000aa6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aaa:	40fd      	lsrs	r5, r7
 8000aac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ab6:	fa1f fe8c 	uxth.w	lr, ip
 8000aba:	fb09 5518 	mls	r5, r9, r8, r5
 8000abe:	0c1c      	lsrs	r4, r3, #16
 8000ac0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ac8:	42a5      	cmp	r5, r4
 8000aca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ace:	fa00 f001 	lsl.w	r0, r0, r1
 8000ad2:	d90b      	bls.n	8000aec <__udivmoddi4+0x1b0>
 8000ad4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000adc:	f080 8088 	bcs.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae0:	42a5      	cmp	r5, r4
 8000ae2:	f240 8085 	bls.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aea:	4464      	add	r4, ip
 8000aec:	1b64      	subs	r4, r4, r5
 8000aee:	b29d      	uxth	r5, r3
 8000af0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000af4:	fb09 4413 	mls	r4, r9, r3, r4
 8000af8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000afc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x1da>
 8000b04:	eb1c 0404 	adds.w	r4, ip, r4
 8000b08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b0c:	d26c      	bcs.n	8000be8 <__udivmoddi4+0x2ac>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	d96a      	bls.n	8000be8 <__udivmoddi4+0x2ac>
 8000b12:	3b02      	subs	r3, #2
 8000b14:	4464      	add	r4, ip
 8000b16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b1e:	eba4 040e 	sub.w	r4, r4, lr
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	46c8      	mov	r8, r9
 8000b26:	46ae      	mov	lr, r5
 8000b28:	d356      	bcc.n	8000bd8 <__udivmoddi4+0x29c>
 8000b2a:	d053      	beq.n	8000bd4 <__udivmoddi4+0x298>
 8000b2c:	b156      	cbz	r6, 8000b44 <__udivmoddi4+0x208>
 8000b2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b32:	eb64 040e 	sbc.w	r4, r4, lr
 8000b36:	fa04 f707 	lsl.w	r7, r4, r7
 8000b3a:	40ca      	lsrs	r2, r1
 8000b3c:	40cc      	lsrs	r4, r1
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	e9c6 7400 	strd	r7, r4, [r6]
 8000b44:	4618      	mov	r0, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	f1c3 0120 	rsb	r1, r3, #32
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	fa20 f201 	lsr.w	r2, r0, r1
 8000b58:	fa25 f101 	lsr.w	r1, r5, r1
 8000b5c:	409d      	lsls	r5, r3
 8000b5e:	432a      	orrs	r2, r5
 8000b60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b70:	0c11      	lsrs	r1, r2, #16
 8000b72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b76:	fb00 f50e 	mul.w	r5, r0, lr
 8000b7a:	428d      	cmp	r5, r1
 8000b7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x258>
 8000b82:	eb1c 0101 	adds.w	r1, ip, r1
 8000b86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b8a:	d22f      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000b8c:	428d      	cmp	r5, r1
 8000b8e:	d92d      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	1b49      	subs	r1, r1, r5
 8000b96:	b292      	uxth	r2, r2
 8000b98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ba0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ba4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ba8:	4291      	cmp	r1, r2
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x282>
 8000bac:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb4:	d216      	bcs.n	8000be4 <__udivmoddi4+0x2a8>
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	d914      	bls.n	8000be4 <__udivmoddi4+0x2a8>
 8000bba:	3d02      	subs	r5, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a52      	subs	r2, r2, r1
 8000bc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bc4:	e738      	b.n	8000a38 <__udivmoddi4+0xfc>
 8000bc6:	4631      	mov	r1, r6
 8000bc8:	4630      	mov	r0, r6
 8000bca:	e708      	b.n	80009de <__udivmoddi4+0xa2>
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e6e6      	b.n	800099e <__udivmoddi4+0x62>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	e6fb      	b.n	80009cc <__udivmoddi4+0x90>
 8000bd4:	4548      	cmp	r0, r9
 8000bd6:	d2a9      	bcs.n	8000b2c <__udivmoddi4+0x1f0>
 8000bd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000be0:	3b01      	subs	r3, #1
 8000be2:	e7a3      	b.n	8000b2c <__udivmoddi4+0x1f0>
 8000be4:	4645      	mov	r5, r8
 8000be6:	e7ea      	b.n	8000bbe <__udivmoddi4+0x282>
 8000be8:	462b      	mov	r3, r5
 8000bea:	e794      	b.n	8000b16 <__udivmoddi4+0x1da>
 8000bec:	4640      	mov	r0, r8
 8000bee:	e7d1      	b.n	8000b94 <__udivmoddi4+0x258>
 8000bf0:	46d0      	mov	r8, sl
 8000bf2:	e77b      	b.n	8000aec <__udivmoddi4+0x1b0>
 8000bf4:	3d02      	subs	r5, #2
 8000bf6:	4462      	add	r2, ip
 8000bf8:	e732      	b.n	8000a60 <__udivmoddi4+0x124>
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e70a      	b.n	8000a14 <__udivmoddi4+0xd8>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	e742      	b.n	8000a8a <__udivmoddi4+0x14e>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f001 f8e5 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f8af 	bl	8000d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 fb1d 	bl	8001254 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c1a:	f000 f915 	bl	8000e48 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000c1e:	f000 f927 	bl	8000e70 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000c22:	f000 fac7 	bl	80011b4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000c26:	f000 f955 	bl	8000ed4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000c2a:	f000 f993 	bl	8000f54 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000c2e:	f000 fa11 	bl	8001054 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000c32:	f000 fa45 	bl	80010c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000c36:	f000 fa93 	bl	8001160 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000c3a:	f008 fdb5 	bl	80097a8 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  buffer[0] = REG_TEMP;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c3, TMP102_ADDR, buffer, 1, HAL_MAX_DELAY);
 8000c42:	2390      	movs	r3, #144	; 0x90
 8000c44:	b299      	uxth	r1, r3
 8000c46:	1d3a      	adds	r2, r7, #4
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	4841      	ldr	r0, [pc, #260]	; (8000d58 <main+0x150>)
 8000c52:	f003 fb0b 	bl	800426c <HAL_I2C_Master_Transmit>
 8000c56:	4603      	mov	r3, r0
 8000c58:	757b      	strb	r3, [r7, #21]
	  if ( ret != HAL_OK ) {
 8000c5a:	7d7b      	ldrb	r3, [r7, #21]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <main+0x6a>
	          strcpy((char*)buffer, "Error Rx\r\n");
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4a3e      	ldr	r2, [pc, #248]	; (8000d5c <main+0x154>)
 8000c64:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c66:	c303      	stmia	r3!, {r0, r1}
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	0c12      	lsrs	r2, r2, #16
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	e061      	b.n	8000d36 <main+0x12e>
	  }else {

	      // Read 2 bytes from the temperature register
	      ret = HAL_I2C_Master_Receive(&hi2c3, TMP102_ADDR, buffer, 2, HAL_MAX_DELAY);
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	b299      	uxth	r1, r3
 8000c76:	1d3a      	adds	r2, r7, #4
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2302      	movs	r3, #2
 8000c80:	4835      	ldr	r0, [pc, #212]	; (8000d58 <main+0x150>)
 8000c82:	f003 fbf1 	bl	8004468 <HAL_I2C_Master_Receive>
 8000c86:	4603      	mov	r3, r0
 8000c88:	757b      	strb	r3, [r7, #21]
	      if ( ret != HAL_OK ) {
 8000c8a:	7d7b      	ldrb	r3, [r7, #21]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d008      	beq.n	8000ca2 <main+0x9a>
	        strcpy((char*)buffer, "Error Rx\r\n");
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <main+0x154>)
 8000c94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c96:	c303      	stmia	r3!, {r0, r1}
 8000c98:	801a      	strh	r2, [r3, #0]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	0c12      	lsrs	r2, r2, #16
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e049      	b.n	8000d36 <main+0x12e>
	      } else {

	        //Combine the bytes
	        value = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 8000ca2:	793b      	ldrb	r3, [r7, #4]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	82fb      	strh	r3, [r7, #22]

	        // Convert to 2's complement, since temperature can be negative
	        if ( value > 0x7FF ) {
 8000cb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cbc:	db05      	blt.n	8000cca <main+0xc2>
	          value |= 0xF000;
 8000cbe:	8afb      	ldrh	r3, [r7, #22]
 8000cc0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000cc4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000cc8:	82fb      	strh	r3, [r7, #22]
	        }

	        // Convert to float temperature value (Celsius)
	        temp_c = value * 0.0625;
 8000cca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd62 	bl	8000798 <__aeabi_i2d>
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <main+0x158>)
 8000cda:	f7ff fae1 	bl	80002a0 <__aeabi_dmul>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f7ff fdc1 	bl	800086c <__aeabi_d2f>
 8000cea:	4603      	mov	r3, r0
 8000cec:	613b      	str	r3, [r7, #16]

	        // Convert temperature to decimal format
	        temp_c *= 100;
 8000cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cf2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000d64 <main+0x15c>
 8000cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfa:	edc7 7a04 	vstr	s15, [r7, #16]
	        sprintf((char*)buffer,"%u.%u C\r\n",((unsigned int)temp_c / 100),((unsigned int)temp_c % 100));
 8000cfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d06:	ee17 2a90 	vmov	r2, s15
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <main+0x160>)
 8000d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8000d10:	095a      	lsrs	r2, r3, #5
 8000d12:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1a:	ee17 1a90 	vmov	r1, s15
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <main+0x160>)
 8000d20:	fba3 0301 	umull	r0, r3, r3, r1
 8000d24:	095b      	lsrs	r3, r3, #5
 8000d26:	2064      	movs	r0, #100	; 0x64
 8000d28:	fb00 f303 	mul.w	r3, r0, r3
 8000d2c:	1acb      	subs	r3, r1, r3
 8000d2e:	1d38      	adds	r0, r7, #4
 8000d30:	490e      	ldr	r1, [pc, #56]	; (8000d6c <main+0x164>)
 8000d32:	f009 f8ab 	bl	8009e8c <siprintf>
	      }
	    }
	  HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fa59 	bl	80001f0 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	1d39      	adds	r1, r7, #4
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <main+0x168>)
 8000d4a:	f006 f8d8 	bl	8006efe <HAL_UART_Transmit>

	      // Wait
	      HAL_Delay(500);
 8000d4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d52:	f001 f885 	bl	8001e60 <HAL_Delay>
	  buffer[0] = REG_TEMP;
 8000d56:	e772      	b.n	8000c3e <main+0x36>
 8000d58:	200000e0 	.word	0x200000e0
 8000d5c:	0800a694 	.word	0x0800a694
 8000d60:	3fb00000 	.word	0x3fb00000
 8000d64:	42c80000 	.word	0x42c80000
 8000d68:	51eb851f 	.word	0x51eb851f
 8000d6c:	0800a6a0 	.word	0x0800a6a0
 8000d70:	2000027c 	.word	0x2000027c

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b094      	sub	sp, #80	; 0x50
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	2230      	movs	r2, #48	; 0x30
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f009 f8a2 	bl	8009ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <SystemClock_Config+0xcc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a27      	ldr	r2, [pc, #156]	; (8000e40 <SystemClock_Config+0xcc>)
 8000da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SystemClock_Config+0xcc>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <SystemClock_Config+0xd0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc0:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <SystemClock_Config+0xd0>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <SystemClock_Config+0xd0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de8:	2304      	movs	r3, #4
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000dec:	2348      	movs	r3, #72	; 0x48
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000df4:	2303      	movs	r3, #3
 8000df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 fc69 	bl	80056d4 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e08:	f000 fb46 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2302      	movs	r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2102      	movs	r1, #2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fecb 	bl	8005bc4 <HAL_RCC_ClockConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e34:	f000 fb30 	bl	8001498 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3750      	adds	r7, #80	; 0x50
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_CRC_Init+0x20>)
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <MX_CRC_Init+0x24>)
 8000e50:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_CRC_Init+0x20>)
 8000e54:	f001 f90a 	bl	800206c <HAL_CRC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e5e:	f000 fb1b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000098 	.word	0x20000098
 8000e6c:	40023000 	.word	0x40023000

08000e70 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <MX_DMA2D_Init+0x60>)
 8000e78:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000ea6:	f001 f8fd 	bl	80020a4 <HAL_DMA2D_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000eb0:	f000 faf2 	bl	8001498 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_DMA2D_Init+0x5c>)
 8000eb8:	f001 fa4e 	bl	8002358 <HAL_DMA2D_ConfigLayer>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ec2:	f000 fae9 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200000a0 	.word	0x200000a0
 8000ed0:	4002b000 	.word	0x4002b000

08000ed4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <MX_I2C3_Init+0x78>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <MX_I2C3_Init+0x7c>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000f12:	f003 f867 	bl	8003fe4 <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 fabc 	bl	8001498 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4809      	ldr	r0, [pc, #36]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000f24:	f003 fff3 	bl	8004f0e <HAL_I2CEx_ConfigAnalogFilter>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000f2e:	f000 fab3 	bl	8001498 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_I2C3_Init+0x74>)
 8000f36:	f004 f826 	bl	8004f86 <HAL_I2CEx_ConfigDigitalFilter>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000f40:	f000 faaa 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000e0 	.word	0x200000e0
 8000f4c:	40005c00 	.word	0x40005c00
 8000f50:	000186a0 	.word	0x000186a0

08000f54 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2234      	movs	r2, #52	; 0x34
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f008 ffb3 	bl	8009ecc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f68:	4a39      	ldr	r2, [pc, #228]	; (8001050 <MX_LTDC_Init+0xfc>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f7e:	4b33      	ldr	r3, [pc, #204]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f86:	2209      	movs	r2, #9
 8000f88:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f92:	221d      	movs	r2, #29
 8000f94:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f98:	2203      	movs	r2, #3
 8000f9a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <MX_LTDC_Init+0xf8>)
 8000f9e:	f240 120d 	movw	r2, #269	; 0x10d
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <MX_LTDC_Init+0xf8>)
 8000fa6:	f240 1243 	movw	r2, #323	; 0x143
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <MX_LTDC_Init+0xf8>)
 8000fae:	f240 1217 	movw	r2, #279	; 0x117
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <MX_LTDC_Init+0xf8>)
 8000fb6:	f240 1247 	movw	r2, #327	; 0x147
 8000fba:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <MX_LTDC_Init+0xf8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <MX_LTDC_Init+0xf8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_LTDC_Init+0xf8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fd4:	481d      	ldr	r0, [pc, #116]	; (800104c <MX_LTDC_Init+0xf8>)
 8000fd6:	f004 f815 	bl	8005004 <HAL_LTDC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fe0:	f000 fa5a 	bl	8001498 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000fe8:	23f0      	movs	r3, #240	; 0xf0
 8000fea:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000ff0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ff4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ffa:	23ff      	movs	r3, #255	; 0xff
 8000ffc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001002:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001006:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001008:	2307      	movs	r3, #7
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800100c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001012:	23f0      	movs	r3, #240	; 0xf0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001016:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_LTDC_Init+0xf8>)
 8001036:	f004 f977 	bl	8005328 <HAL_LTDC_ConfigLayer>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001040:	f000 fa2a 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3738      	adds	r7, #56	; 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000134 	.word	0x20000134
 8001050:	40016800 	.word	0x40016800

08001054 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_SPI5_Init+0x64>)
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <MX_SPI5_Init+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_SPI5_Init+0x64>)
 8001060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001064:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_SPI5_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_SPI5_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_SPI5_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_SPI5_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_SPI5_Init+0x64>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_SPI5_Init+0x64>)
 8001088:	2218      	movs	r2, #24
 800108a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_SPI5_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_SPI5_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_SPI5_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_SPI5_Init+0x64>)
 80010a0:	220a      	movs	r2, #10
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_SPI5_Init+0x64>)
 80010a6:	f005 f9d3 	bl	8006450 <HAL_SPI_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80010b0:	f000 f9f2 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001dc 	.word	0x200001dc
 80010bc:	40015000 	.word	0x40015000

080010c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <MX_TIM1_Init+0x98>)
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <MX_TIM1_Init+0x9c>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_TIM1_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_TIM1_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_TIM1_Init+0x98>)
 80010f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <MX_TIM1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <MX_TIM1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_TIM1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <MX_TIM1_Init+0x98>)
 800110a:	f005 fa2a 	bl	8006562 <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001114:	f000 f9c0 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4619      	mov	r1, r3
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <MX_TIM1_Init+0x98>)
 8001126:	f005 fbe3 	bl	80068f0 <HAL_TIM_ConfigClockSource>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001130:	f000 f9b2 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_TIM1_Init+0x98>)
 8001142:	f005 fdff 	bl	8006d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800114c:	f000 f9a4 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000234 	.word	0x20000234
 800115c:	40010000 	.word	0x40010000

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART1_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001198:	f005 fe64 	bl	8006e64 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f979 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000027c 	.word	0x2000027c
 80011b0:	40011000 	.word	0x40011000

080011b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_FMC_Init+0x98>)
 80011ce:	4a20      	ldr	r2, [pc, #128]	; (8001250 <MX_FMC_Init+0x9c>)
 80011d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_FMC_Init+0x98>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_FMC_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_FMC_Init+0x98>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_FMC_Init+0x98>)
 80011e6:	2210      	movs	r2, #16
 80011e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_FMC_Init+0x98>)
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_FMC_Init+0x98>)
 80011f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011f6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_FMC_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_FMC_Init+0x98>)
 8001200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001204:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_FMC_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_FMC_Init+0x98>)
 800120e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001218:	2307      	movs	r3, #7
 800121a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800121c:	2304      	movs	r3, #4
 800121e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001220:	2307      	movs	r3, #7
 8001222:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001224:	2303      	movs	r3, #3
 8001226:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800122c:	2302      	movs	r3, #2
 800122e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_FMC_Init+0x98>)
 8001236:	f005 f8d7 	bl	80063e8 <HAL_SDRAM_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001240:	f000 f92a 	bl	8001498 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002c0 	.word	0x200002c0
 8001250:	a0000140 	.word	0xa0000140

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	4b7b      	ldr	r3, [pc, #492]	; (800145c <MX_GPIO_Init+0x208>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a7a      	ldr	r2, [pc, #488]	; (800145c <MX_GPIO_Init+0x208>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b78      	ldr	r3, [pc, #480]	; (800145c <MX_GPIO_Init+0x208>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <MX_GPIO_Init+0x208>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a73      	ldr	r2, [pc, #460]	; (800145c <MX_GPIO_Init+0x208>)
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b71      	ldr	r3, [pc, #452]	; (800145c <MX_GPIO_Init+0x208>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <MX_GPIO_Init+0x208>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a6c      	ldr	r2, [pc, #432]	; (800145c <MX_GPIO_Init+0x208>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b6a      	ldr	r3, [pc, #424]	; (800145c <MX_GPIO_Init+0x208>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <MX_GPIO_Init+0x208>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a65      	ldr	r2, [pc, #404]	; (800145c <MX_GPIO_Init+0x208>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <MX_GPIO_Init+0x208>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <MX_GPIO_Init+0x208>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a5e      	ldr	r2, [pc, #376]	; (800145c <MX_GPIO_Init+0x208>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <MX_GPIO_Init+0x208>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b58      	ldr	r3, [pc, #352]	; (800145c <MX_GPIO_Init+0x208>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a57      	ldr	r2, [pc, #348]	; (800145c <MX_GPIO_Init+0x208>)
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b55      	ldr	r3, [pc, #340]	; (800145c <MX_GPIO_Init+0x208>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b51      	ldr	r3, [pc, #324]	; (800145c <MX_GPIO_Init+0x208>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a50      	ldr	r2, [pc, #320]	; (800145c <MX_GPIO_Init+0x208>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b4e      	ldr	r3, [pc, #312]	; (800145c <MX_GPIO_Init+0x208>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b4a      	ldr	r3, [pc, #296]	; (800145c <MX_GPIO_Init+0x208>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a49      	ldr	r2, [pc, #292]	; (800145c <MX_GPIO_Init+0x208>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <MX_GPIO_Init+0x208>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2116      	movs	r1, #22
 800134e:	4844      	ldr	r0, [pc, #272]	; (8001460 <MX_GPIO_Init+0x20c>)
 8001350:	f001 fa40 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4842      	ldr	r0, [pc, #264]	; (8001464 <MX_GPIO_Init+0x210>)
 800135a:	f001 fa3b 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001364:	4840      	ldr	r0, [pc, #256]	; (8001468 <MX_GPIO_Init+0x214>)
 8001366:	f001 fa35 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001370:	483e      	ldr	r0, [pc, #248]	; (800146c <MX_GPIO_Init+0x218>)
 8001372:	f001 fa2f 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001376:	2316      	movs	r3, #22
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	4834      	ldr	r0, [pc, #208]	; (8001460 <MX_GPIO_Init+0x20c>)
 800138e:	f001 f875 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001392:	f248 0307 	movw	r3, #32775	; 0x8007
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001398:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	482e      	ldr	r0, [pc, #184]	; (8001464 <MX_GPIO_Init+0x210>)
 80013aa:	f001 f867 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4827      	ldr	r0, [pc, #156]	; (8001464 <MX_GPIO_Init+0x210>)
 80013c6:	f001 f859 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80013ca:	2320      	movs	r3, #32
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	4820      	ldr	r0, [pc, #128]	; (8001460 <MX_GPIO_Init+0x20c>)
 80013e0:	f001 f84c 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013e4:	2304      	movs	r3, #4
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	481e      	ldr	r0, [pc, #120]	; (8001470 <MX_GPIO_Init+0x21c>)
 80013f8:	f001 f840 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80013fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4815      	ldr	r0, [pc, #84]	; (8001468 <MX_GPIO_Init+0x214>)
 8001412:	f001 f833 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001416:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4619      	mov	r1, r3
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <MX_GPIO_Init+0x214>)
 8001430:	f001 f824 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001434:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144a:	4619      	mov	r1, r3
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_GPIO_Init+0x218>)
 800144e:	f001 f815 	bl	800247c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	3738      	adds	r7, #56	; 0x38
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40021800 	.word	0x40021800
 8001470:	40020400 	.word	0x40020400

08001474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001486:	f000 fccb 	bl	8001e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40001000 	.word	0x40001000

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_CRC_MspInit+0x3c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10d      	bne.n	8001522 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_CRC_MspInit+0x40>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <HAL_CRC_MspInit+0x40>)
 8001510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_CRC_MspInit+0x40>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023000 	.word	0x40023000
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_DMA2D_MspInit+0x48>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d115      	bne.n	8001576 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_DMA2D_MspInit+0x4c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <HAL_DMA2D_MspInit+0x4c>)
 8001554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_DMA2D_MspInit+0x4c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2105      	movs	r1, #5
 800156a:	205a      	movs	r0, #90	; 0x5a
 800156c:	f000 fd54 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001570:	205a      	movs	r0, #90	; 0x5a
 8001572:	f000 fd6d 	bl	8002050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	4002b000 	.word	0x4002b000
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <HAL_I2C_MspInit+0xc4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d14b      	bne.n	8001642 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a27      	ldr	r2, [pc, #156]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a20      	ldr	r2, [pc, #128]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80015e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e8:	2312      	movs	r3, #18
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015f4:	2304      	movs	r3, #4
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <HAL_I2C_MspInit+0xcc>)
 8001600:	f000 ff3c 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160a:	2312      	movs	r3, #18
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160e:	2301      	movs	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001616:	2304      	movs	r3, #4
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <HAL_I2C_MspInit+0xd0>)
 8001622:	f000 ff2b 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 8001630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40005c00 	.word	0x40005c00
 8001650:	40023800 	.word	0x40023800
 8001654:	40020800 	.word	0x40020800
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b09a      	sub	sp, #104	; 0x68
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	2230      	movs	r2, #48	; 0x30
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f008 fc25 	bl	8009ecc <memset>
  if(hltdc->Instance==LTDC)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a85      	ldr	r2, [pc, #532]	; (800189c <HAL_LTDC_MspInit+0x240>)
 8001688:	4293      	cmp	r3, r2
 800168a:	f040 8102 	bne.w	8001892 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800168e:	2308      	movs	r3, #8
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001692:	2332      	movs	r3, #50	; 0x32
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001696:	2302      	movs	r3, #2
 8001698:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800169a:	2300      	movs	r3, #0
 800169c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fce0 	bl	8006068 <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80016ae:	f7ff fef3 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a79      	ldr	r2, [pc, #484]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b77      	ldr	r3, [pc, #476]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a72      	ldr	r2, [pc, #456]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b70      	ldr	r3, [pc, #448]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	4b6c      	ldr	r3, [pc, #432]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a6b      	ldr	r2, [pc, #428]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	4b65      	ldr	r3, [pc, #404]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a64      	ldr	r2, [pc, #400]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b5e      	ldr	r3, [pc, #376]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a5d      	ldr	r2, [pc, #372]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 800172c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b5b      	ldr	r3, [pc, #364]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a56      	ldr	r2, [pc, #344]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a4f      	ldr	r2, [pc, #316]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <HAL_LTDC_MspInit+0x244>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001788:	230e      	movs	r3, #14
 800178a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001790:	4619      	mov	r1, r3
 8001792:	4844      	ldr	r0, [pc, #272]	; (80018a4 <HAL_LTDC_MspInit+0x248>)
 8001794:	f000 fe72 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001798:	f641 0358 	movw	r3, #6232	; 0x1858
 800179c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017aa:	230e      	movs	r3, #14
 80017ac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b2:	4619      	mov	r1, r3
 80017b4:	483c      	ldr	r0, [pc, #240]	; (80018a8 <HAL_LTDC_MspInit+0x24c>)
 80017b6:	f000 fe61 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80017ba:	2303      	movs	r3, #3
 80017bc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017ca:	2309      	movs	r3, #9
 80017cc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017d2:	4619      	mov	r1, r3
 80017d4:	4835      	ldr	r0, [pc, #212]	; (80018ac <HAL_LTDC_MspInit+0x250>)
 80017d6:	f000 fe51 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80017da:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80017de:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017ec:	230e      	movs	r3, #14
 80017ee:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f4:	4619      	mov	r1, r3
 80017f6:	482d      	ldr	r0, [pc, #180]	; (80018ac <HAL_LTDC_MspInit+0x250>)
 80017f8:	f000 fe40 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80017fc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001800:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800180e:	230e      	movs	r3, #14
 8001810:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001812:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001816:	4619      	mov	r1, r3
 8001818:	4825      	ldr	r0, [pc, #148]	; (80018b0 <HAL_LTDC_MspInit+0x254>)
 800181a:	f000 fe2f 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800181e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001822:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001830:	230e      	movs	r3, #14
 8001832:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001834:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001838:	4619      	mov	r1, r3
 800183a:	481e      	ldr	r0, [pc, #120]	; (80018b4 <HAL_LTDC_MspInit+0x258>)
 800183c:	f000 fe1e 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001840:	2348      	movs	r3, #72	; 0x48
 8001842:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001850:	230e      	movs	r3, #14
 8001852:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001858:	4619      	mov	r1, r3
 800185a:	4817      	ldr	r0, [pc, #92]	; (80018b8 <HAL_LTDC_MspInit+0x25c>)
 800185c:	f000 fe0e 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001860:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001864:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001872:	2309      	movs	r3, #9
 8001874:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001876:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800187a:	4619      	mov	r1, r3
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <HAL_LTDC_MspInit+0x254>)
 800187e:	f000 fdfd 	bl	800247c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2105      	movs	r1, #5
 8001886:	2058      	movs	r0, #88	; 0x58
 8001888:	f000 fbc6 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800188c:	2058      	movs	r0, #88	; 0x58
 800188e:	f000 fbdf 	bl	8002050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3768      	adds	r7, #104	; 0x68
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40016800 	.word	0x40016800
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40021400 	.word	0x40021400
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40021800 	.word	0x40021800
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00

080018bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_SPI_MspInit+0x84>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12c      	bne.n	8001938 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_SPI_MspInit+0x88>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_SPI_MspInit+0x88>)
 80018e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_SPI_MspInit+0x88>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_SPI_MspInit+0x88>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_SPI_MspInit+0x88>)
 8001904:	f043 0320 	orr.w	r3, r3, #32
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_SPI_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001916:	f44f 7360 	mov.w	r3, #896	; 0x380
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001928:	2305      	movs	r3, #5
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_SPI_MspInit+0x8c>)
 8001934:	f000 fda2 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	; 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40015000 	.word	0x40015000
 8001944:	40023800 	.word	0x40023800
 8001948:	40021400 	.word	0x40021400

0800194c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <HAL_TIM_Base_MspInit+0x3c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10d      	bne.n	800197a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_TIM_Base_MspInit+0x40>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_TIM_Base_MspInit+0x40>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_TIM_Base_MspInit+0x40>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40010000 	.word	0x40010000
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_UART_MspInit+0x84>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12c      	bne.n	8001a0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_UART_MspInit+0x88>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_UART_MspInit+0x88>)
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_UART_MspInit+0x88>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_UART_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <HAL_UART_MspInit+0x88>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_UART_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fc:	2307      	movs	r3, #7
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <HAL_UART_MspInit+0x8c>)
 8001a08:	f000 fd38 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40011000 	.word	0x40011000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001a34:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_FMC_MspInit+0x104>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d16f      	bne.n	8001b1c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_FMC_MspInit+0x104>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_FMC_MspInit+0x108>)
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	4a37      	ldr	r2, [pc, #220]	; (8001b28 <HAL_FMC_MspInit+0x108>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6393      	str	r3, [r2, #56]	; 0x38
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_FMC_MspInit+0x108>)
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001a5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a62:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a70:	230c      	movs	r3, #12
 8001a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	482c      	ldr	r0, [pc, #176]	; (8001b2c <HAL_FMC_MspInit+0x10c>)
 8001a7a:	f000 fcff 	bl	800247c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a8e:	230c      	movs	r3, #12
 8001a90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4826      	ldr	r0, [pc, #152]	; (8001b30 <HAL_FMC_MspInit+0x110>)
 8001a98:	f000 fcf0 	bl	800247c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001a9c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001aa0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aae:	230c      	movs	r3, #12
 8001ab0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481f      	ldr	r0, [pc, #124]	; (8001b34 <HAL_FMC_MspInit+0x114>)
 8001ab8:	f000 fce0 	bl	800247c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001abc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ac0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4818      	ldr	r0, [pc, #96]	; (8001b38 <HAL_FMC_MspInit+0x118>)
 8001ad8:	f000 fcd0 	bl	800247c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001adc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001ae0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aee:	230c      	movs	r3, #12
 8001af0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4811      	ldr	r0, [pc, #68]	; (8001b3c <HAL_FMC_MspInit+0x11c>)
 8001af8:	f000 fcc0 	bl	800247c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001afc:	2360      	movs	r3, #96	; 0x60
 8001afe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b0c:	230c      	movs	r3, #12
 8001b0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	480a      	ldr	r0, [pc, #40]	; (8001b40 <HAL_FMC_MspInit+0x120>)
 8001b16:	f000 fcb1 	bl	800247c <HAL_GPIO_Init>
 8001b1a:	e000      	b.n	8001b1e <HAL_FMC_MspInit+0xfe>
    return;
 8001b1c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200002f4 	.word	0x200002f4
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40020800 	.word	0x40020800
 8001b34:	40021800 	.word	0x40021800
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40020400 	.word	0x40020400

08001b44 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b4c:	f7ff ff68 	bl	8001a20 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08e      	sub	sp, #56	; 0x38
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_InitTick+0xe4>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_InitTick+0xe4>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_InitTick+0xe4>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b84:	f107 0210 	add.w	r2, r7, #16
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fa38 	bl	8006004 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d103      	bne.n	8001ba6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b9e:	f004 fa09 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8001ba2:	6378      	str	r0, [r7, #52]	; 0x34
 8001ba4:	e004      	b.n	8001bb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ba6:	f004 fa05 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8001baa:	4603      	mov	r3, r0
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0c9b      	lsrs	r3, r3, #18
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_InitTick+0xec>)
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <HAL_InitTick+0xf0>)
 8001bc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <HAL_InitTick+0xec>)
 8001bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_InitTick+0xec>)
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_InitTick+0xec>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_InitTick+0xec>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_InitTick+0xec>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001be4:	4817      	ldr	r0, [pc, #92]	; (8001c44 <HAL_InitTick+0xec>)
 8001be6:	f004 fcbc 	bl	8006562 <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11b      	bne.n	8001c30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001bf8:	4812      	ldr	r0, [pc, #72]	; (8001c44 <HAL_InitTick+0xec>)
 8001bfa:	f004 fd01 	bl	8006600 <HAL_TIM_Base_Start_IT>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d111      	bne.n	8001c30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c0c:	2036      	movs	r0, #54	; 0x36
 8001c0e:	f000 fa1f 	bl	8002050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d808      	bhi.n	8001c2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	2036      	movs	r0, #54	; 0x36
 8001c1e:	f000 f9fb 	bl	8002018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_InitTick+0xf4>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e002      	b.n	8001c30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3738      	adds	r7, #56	; 0x38
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	431bde83 	.word	0x431bde83
 8001c44:	200002f8 	.word	0x200002f8
 8001c48:	40001000 	.word	0x40001000
 8001c4c:	20000004 	.word	0x20000004

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <TIM6_DAC_IRQHandler+0x10>)
 8001cae:	f004 fd17 	bl	80066e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200002f8 	.word	0x200002f8

08001cbc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <OTG_HS_IRQHandler+0x10>)
 8001cc2:	f001 f80b 	bl	8002cdc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000724 	.word	0x20000724

08001cd0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <LTDC_IRQHandler+0x10>)
 8001cd6:	f003 fa65 	bl	80051a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000134 	.word	0x20000134

08001ce4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA2D_IRQHandler+0x10>)
 8001cea:	f000 fa24 	bl	8002136 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200000a0 	.word	0x200000a0

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f008 f8e8 	bl	8009efc <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20030000 	.word	0x20030000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	20000340 	.word	0x20000340
 8001d60:	20000b70 	.word	0x20000b70

08001d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d8e:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d94:	e002      	b.n	8001d9c <LoopCopyDataInit>

08001d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9a:	3304      	adds	r3, #4

08001d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da0:	d3f9      	bcc.n	8001d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da4:	4c0b      	ldr	r4, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da8:	e001      	b.n	8001dae <LoopFillZerobss>

08001daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dac:	3204      	adds	r2, #4

08001dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db0:	d3fb      	bcc.n	8001daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001db2:	f7ff ffd7 	bl	8001d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db6:	f008 f8a7 	bl	8009f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7fe ff25 	bl	8000c08 <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dc0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001dcc:	0800a70c 	.word	0x0800a70c
  ldr r2, =_sbss
 8001dd0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001dd4:	20000b70 	.word	0x20000b70

08001dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f8fc 	bl	8002002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f7ff fea4 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fb48 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20000344 	.word	0x20000344

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000344 	.word	0x20000344

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff4c 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202a:	f7ff ff61 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 800202e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	f7ff ffb1 	bl	8001f9c <NVIC_EncodePriority>
 800203a:	4602      	mov	r2, r0
 800203c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff80 	bl	8001f48 <__NVIC_SetPriority>
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff54 	bl	8001f0c <__NVIC_EnableIRQ>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	795b      	ldrb	r3, [r3, #5]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fa30 	bl	80014f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e03b      	b.n	800212e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fa34 	bl	8001538 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	f023 0107 	bic.w	r1, r3, #7
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800210e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68d1      	ldr	r1, [r2, #12]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	430b      	orrs	r3, r1
 800211c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d026      	beq.n	80021a6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d021      	beq.n	80021a6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002170:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d026      	beq.n	80021fe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d021      	beq.n	80021fe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2220      	movs	r2, #32
 80021d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	f043 0202 	orr.w	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d026      	beq.n	8002256 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220e:	2b00      	cmp	r3, #0
 8002210:	d021      	beq.n	8002256 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002220:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2208      	movs	r2, #8
 8002228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	f043 0204 	orr.w	r2, r3, #4
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2204      	movs	r2, #4
 800223a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00e      	beq.n	8002288 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002278:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2204      	movs	r2, #4
 8002280:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f853 	bl	800232e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d024      	beq.n	80022dc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01f      	beq.n	80022dc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2202      	movs	r2, #2
 80022b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01f      	beq.n	8002326 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01a      	beq.n	8002326 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2210      	movs	r2, #16
 8002306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f80e 	bl	8002342 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_DMA2D_ConfigLayer+0x20>
 8002374:	2302      	movs	r3, #2
 8002376:	e079      	b.n	800246c <HAL_DMA2D_ConfigLayer+0x114>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	3318      	adds	r3, #24
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80023a2:	4b35      	ldr	r3, [pc, #212]	; (8002478 <HAL_DMA2D_ConfigLayer+0x120>)
 80023a4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d003      	beq.n	80023b6 <HAL_DMA2D_ConfigLayer+0x5e>
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	d107      	bne.n	80023c6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e005      	b.n	80023d2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	061b      	lsls	r3, r3, #24
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d120      	bne.n	800241a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	ea02 0103 	and.w	r1, r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b0a      	cmp	r3, #10
 8002400:	d003      	beq.n	800240a <HAL_DMA2D_ConfigLayer+0xb2>
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b09      	cmp	r3, #9
 8002408:	d127      	bne.n	800245a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
 8002418:	e01f      	b.n	800245a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	ea02 0103 	and.w	r1, r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	430a      	orrs	r2, r1
 8002430:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b0a      	cmp	r3, #10
 8002442:	d003      	beq.n	800244c <HAL_DMA2D_ConfigLayer+0xf4>
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b09      	cmp	r3, #9
 800244a:	d106      	bne.n	800245a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002458:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	ff03000f 	.word	0xff03000f

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e177      	b.n	8002788 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8166 	bne.w	8002782 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80c0 	beq.w	8002782 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b66      	ldr	r3, [pc, #408]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_GPIO_Init+0x324>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_GPIO_Init+0x324>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <HAL_GPIO_Init+0x328>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_GPIO_Init+0x32c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d037      	beq.n	80026ba <HAL_GPIO_Init+0x23e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a57      	ldr	r2, [pc, #348]	; (80027ac <HAL_GPIO_Init+0x330>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d031      	beq.n	80026b6 <HAL_GPIO_Init+0x23a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a56      	ldr	r2, [pc, #344]	; (80027b0 <HAL_GPIO_Init+0x334>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d02b      	beq.n	80026b2 <HAL_GPIO_Init+0x236>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a55      	ldr	r2, [pc, #340]	; (80027b4 <HAL_GPIO_Init+0x338>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d025      	beq.n	80026ae <HAL_GPIO_Init+0x232>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a54      	ldr	r2, [pc, #336]	; (80027b8 <HAL_GPIO_Init+0x33c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01f      	beq.n	80026aa <HAL_GPIO_Init+0x22e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a53      	ldr	r2, [pc, #332]	; (80027bc <HAL_GPIO_Init+0x340>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d019      	beq.n	80026a6 <HAL_GPIO_Init+0x22a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_GPIO_Init+0x344>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x226>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a51      	ldr	r2, [pc, #324]	; (80027c4 <HAL_GPIO_Init+0x348>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x222>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a50      	ldr	r2, [pc, #320]	; (80027c8 <HAL_GPIO_Init+0x34c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x21e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4f      	ldr	r2, [pc, #316]	; (80027cc <HAL_GPIO_Init+0x350>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x21a>
 8002692:	2309      	movs	r3, #9
 8002694:	e012      	b.n	80026bc <HAL_GPIO_Init+0x240>
 8002696:	230a      	movs	r3, #10
 8002698:	e010      	b.n	80026bc <HAL_GPIO_Init+0x240>
 800269a:	2308      	movs	r3, #8
 800269c:	e00e      	b.n	80026bc <HAL_GPIO_Init+0x240>
 800269e:	2307      	movs	r3, #7
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026a2:	2306      	movs	r3, #6
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x240>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026cc:	4935      	ldr	r1, [pc, #212]	; (80027a4 <HAL_GPIO_Init+0x328>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_GPIO_Init+0x354>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a34      	ldr	r2, [pc, #208]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272e:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_GPIO_Init+0x354>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_GPIO_Init+0x354>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f ae84 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021c00 	.word	0x40021c00
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40022400 	.word	0x40022400
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002808:	b08f      	sub	sp, #60	; 0x3c
 800280a:	af0a      	add	r7, sp, #40	; 0x28
 800280c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e054      	b.n	80028c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f007 f80c 	bl	8009850 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f004 fffe 	bl	8007858 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	687e      	ldr	r6, [r7, #4]
 8002864:	466d      	mov	r5, sp
 8002866:	f106 0410 	add.w	r4, r6, #16
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002876:	e885 0003 	stmia.w	r5, {r0, r1}
 800287a:	1d33      	adds	r3, r6, #4
 800287c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f004 ff78 	bl	8007774 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fff5 	bl	800787a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	687e      	ldr	r6, [r7, #4]
 8002898:	466d      	mov	r5, sp
 800289a:	f106 0410 	add.w	r4, r6, #16
 800289e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ae:	1d33      	adds	r3, r6, #4
 80028b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	f005 f97e 	bl	8007bb4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80028ca:	b590      	push	{r4, r7, lr}
 80028cc:	b089      	sub	sp, #36	; 0x24
 80028ce:	af04      	add	r7, sp, #16
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	4608      	mov	r0, r1
 80028d4:	4611      	mov	r1, r2
 80028d6:	461a      	mov	r2, r3
 80028d8:	4603      	mov	r3, r0
 80028da:	70fb      	strb	r3, [r7, #3]
 80028dc:	460b      	mov	r3, r1
 80028de:	70bb      	strb	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_HCD_HC_Init+0x28>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e076      	b.n	80029e0 <HAL_HCD_HC_Init+0x116>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	333d      	adds	r3, #61	; 0x3d
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3338      	adds	r3, #56	; 0x38
 800291a:	787a      	ldrb	r2, [r7, #1]
 800291c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	3340      	adds	r3, #64	; 0x40
 800292c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800292e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3339      	adds	r3, #57	; 0x39
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	333f      	adds	r3, #63	; 0x3f
 8002950:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002954:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	78ba      	ldrb	r2, [r7, #2]
 800295a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800295e:	b2d0      	uxtb	r0, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	333a      	adds	r3, #58	; 0x3a
 800296c:	4602      	mov	r2, r0
 800296e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002970:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da09      	bge.n	800298c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	333b      	adds	r3, #59	; 0x3b
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e008      	b.n	800299e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	333b      	adds	r3, #59	; 0x3b
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	333c      	adds	r3, #60	; 0x3c
 80029ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	787c      	ldrb	r4, [r7, #1]
 80029b8:	78ba      	ldrb	r2, [r7, #2]
 80029ba:	78f9      	ldrb	r1, [r7, #3]
 80029bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4623      	mov	r3, r4
 80029ce:	f005 fa4d 	bl	8007e6c <USB_HC_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_HCD_HC_Halt+0x1e>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e00f      	b.n	8002a26 <HAL_HCD_HC_Halt+0x3e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 fc9d 	bl	8008356 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	70fb      	strb	r3, [r7, #3]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70bb      	strb	r3, [r7, #2]
 8002a46:	4613      	mov	r3, r2
 8002a48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	333b      	adds	r3, #59	; 0x3b
 8002a58:	78ba      	ldrb	r2, [r7, #2]
 8002a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	333f      	adds	r3, #63	; 0x3f
 8002a6a:	787a      	ldrb	r2, [r7, #1]
 8002a6c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a6e:	7c3b      	ldrb	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d112      	bne.n	8002a9a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3342      	adds	r3, #66	; 0x42
 8002a82:	2203      	movs	r2, #3
 8002a84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	333d      	adds	r3, #61	; 0x3d
 8002a94:	7f3a      	ldrb	r2, [r7, #28]
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e008      	b.n	8002aac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3342      	adds	r3, #66	; 0x42
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	f200 80c6 	bhi.w	8002c40 <HAL_HCD_HC_SubmitRequest+0x210>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002c2d 	.word	0x08002c2d
 8002ac4:	08002b31 	.word	0x08002b31
 8002ac8:	08002baf 	.word	0x08002baf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002acc:	7c3b      	ldrb	r3, [r7, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	f040 80b8 	bne.w	8002c44 <HAL_HCD_HC_SubmitRequest+0x214>
 8002ad4:	78bb      	ldrb	r3, [r7, #2]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 80b4 	bne.w	8002c44 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002adc:	8b3b      	ldrh	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3355      	adds	r3, #85	; 0x55
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3355      	adds	r3, #85	; 0x55
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3342      	adds	r3, #66	; 0x42
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b1a:	e093      	b.n	8002c44 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3342      	adds	r3, #66	; 0x42
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	701a      	strb	r2, [r3, #0]
      break;
 8002b2e:	e089      	b.n	8002c44 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b30:	78bb      	ldrb	r3, [r7, #2]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d11d      	bne.n	8002b72 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3355      	adds	r3, #85	; 0x55
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3342      	adds	r3, #66	; 0x42
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b5c:	e073      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3342      	adds	r3, #66	; 0x42
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	701a      	strb	r2, [r3, #0]
      break;
 8002b70:	e069      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3354      	adds	r3, #84	; 0x54
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	3342      	adds	r3, #66	; 0x42
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
      break;
 8002b98:	e055      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3342      	adds	r3, #66	; 0x42
 8002ba8:	2202      	movs	r2, #2
 8002baa:	701a      	strb	r2, [r3, #0]
      break;
 8002bac:	e04b      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002bae:	78bb      	ldrb	r3, [r7, #2]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11d      	bne.n	8002bf0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3355      	adds	r3, #85	; 0x55
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3342      	adds	r3, #66	; 0x42
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bda:	e034      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3342      	adds	r3, #66	; 0x42
 8002bea:	2202      	movs	r2, #2
 8002bec:	701a      	strb	r2, [r3, #0]
      break;
 8002bee:	e02a      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3354      	adds	r3, #84	; 0x54
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3342      	adds	r3, #66	; 0x42
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
      break;
 8002c16:	e016      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3342      	adds	r3, #66	; 0x42
 8002c26:	2202      	movs	r2, #2
 8002c28:	701a      	strb	r2, [r3, #0]
      break;
 8002c2a:	e00c      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3342      	adds	r3, #66	; 0x42
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c44:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3344      	adds	r3, #68	; 0x44
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	8b3a      	ldrh	r2, [r7, #24]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	202c      	movs	r0, #44	; 0x2c
 8002c60:	fb00 f303 	mul.w	r3, r0, r3
 8002c64:	440b      	add	r3, r1
 8002c66:	334c      	adds	r3, #76	; 0x4c
 8002c68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3360      	adds	r3, #96	; 0x60
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3350      	adds	r3, #80	; 0x50
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3339      	adds	r3, #57	; 0x39
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3361      	adds	r3, #97	; 0x61
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	222c      	movs	r2, #44	; 0x2c
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	3338      	adds	r3, #56	; 0x38
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	18d1      	adds	r1, r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f005 f9f0 	bl	80080b0 <USB_HC_StartXfer>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop

08002cdc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f004 ff1b 	bl	8007b2e <USB_GetMode>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	f040 80f6 	bne.w	8002eec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 feff 	bl	8007b08 <USB_ReadInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80ec 	beq.w	8002eea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 fef6 	bl	8007b08 <USB_ReadInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d26:	d104      	bne.n	8002d32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 fee6 	bl	8007b08 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d46:	d104      	bne.n	8002d52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 fed6 	bl	8007b08 <USB_ReadInterrupts>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d66:	d104      	bne.n	8002d72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f004 fec6 	bl	8007b08 <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 feb8 	bl	8007b08 <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da2:	d11c      	bne.n	8002dde <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002dac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002dbe:	2110      	movs	r1, #16
 8002dc0:	6938      	ldr	r0, [r7, #16]
 8002dc2:	f004 fda7 	bl	8007914 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002dc6:	6938      	ldr	r0, [r7, #16]
 8002dc8:	f004 fdd8 	bl	800797c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 ffae 	bl	8007d34 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f006 fdb3 	bl	8009944 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f004 fe90 	bl	8007b08 <USB_ReadInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df2:	d102      	bne.n	8002dfa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 f882 	bl	8003efe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 fe82 	bl	8007b08 <USB_ReadInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d106      	bne.n	8002e1c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f006 fd7c 	bl	800990c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f004 fe71 	bl	8007b08 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d101      	bne.n	8002e34 <HAL_HCD_IRQHandler+0x158>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_HCD_IRQHandler+0x15a>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0210 	bic.w	r2, r2, #16
 8002e48:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 ff85 	bl	8003d5a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0210 	orr.w	r2, r2, #16
 8002e5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 fe4f 	bl	8007b08 <USB_ReadInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e74:	d13a      	bne.n	8002eec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f005 fa5a 	bl	8008334 <USB_HC_ReadInterrupt>
 8002e80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e025      	b.n	8002ed4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d018      	beq.n	8002ece <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb2:	d106      	bne.n	8002ec2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f88f 	bl	8002fde <HCD_HC_IN_IRQHandler>
 8002ec0:	e005      	b.n	8002ece <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fbdd 	bl	8003688 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3d4      	bcc.n	8002e88 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee6:	615a      	str	r2, [r3, #20]
 8002ee8:	e000      	b.n	8002eec <HAL_HCD_IRQHandler+0x210>
      return;
 8002eea:	bf00      	nop
    }
  }
}
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_HCD_Start+0x16>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e013      	b.n	8002f30 <HAL_HCD_Start+0x3e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 ff46 	bl	8007da8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 fc88 	bl	8007836 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_HCD_Stop+0x16>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e00d      	b.n	8002f6a <HAL_HCD_Stop+0x32>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f005 fb34 	bl	80085c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3360      	adds	r3, #96	; 0x60
 8002f8c:	781b      	ldrb	r3, [r3, #0]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3350      	adds	r3, #80	; 0x50
 8002fb4:	681b      	ldr	r3, [r3, #0]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 ff3a 	bl	8007e48 <USB_GetCurrentFrame>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d11a      	bne.n	8003044 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	461a      	mov	r2, r3
 800301c:	2304      	movs	r3, #4
 800301e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3361      	adds	r3, #97	; 0x61
 800302e:	2206      	movs	r2, #6
 8003030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f005 f98a 	bl	8008356 <USB_HC_Halt>
 8003042:	e0af      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305a:	d11b      	bne.n	8003094 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800306e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3361      	adds	r3, #97	; 0x61
 800307e:	2207      	movs	r2, #7
 8003080:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f005 f962 	bl	8008356 <USB_HC_Halt>
 8003092:	e087      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d109      	bne.n	80030be <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b6:	461a      	mov	r2, r3
 80030b8:	2320      	movs	r3, #32
 80030ba:	6093      	str	r3, [r2, #8]
 80030bc:	e072      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d11a      	bne.n	800310a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	2308      	movs	r3, #8
 80030e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3361      	adds	r3, #97	; 0x61
 80030f4:	2205      	movs	r2, #5
 80030f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f005 f927 	bl	8008356 <USB_HC_Halt>
 8003108:	e04c      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d11b      	bne.n	800315a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	461a      	mov	r2, r3
 8003130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003134:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	3361      	adds	r3, #97	; 0x61
 8003144:	2208      	movs	r2, #8
 8003146:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f005 f8ff 	bl	8008356 <USB_HC_Halt>
 8003158:	e024      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d119      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3361      	adds	r3, #97	; 0x61
 8003190:	2206      	movs	r2, #6
 8003192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f005 f8d9 	bl	8008356 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ba:	d112      	bne.n	80031e2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f005 f8c5 	bl	8008356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031de:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80031e0:	e24e      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f040 80df 	bne.w	80033b8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d019      	beq.n	8003236 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3348      	adds	r3, #72	; 0x48
 8003210:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0159      	lsls	r1, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	440b      	add	r3, r1
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003224:	1ad2      	subs	r2, r2, r3
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	202c      	movs	r0, #44	; 0x2c
 800322c:	fb00 f303 	mul.w	r3, r0, r3
 8003230:	440b      	add	r3, r1
 8003232:	3350      	adds	r3, #80	; 0x50
 8003234:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	3361      	adds	r3, #97	; 0x61
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	335c      	adds	r3, #92	; 0x5c
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	461a      	mov	r2, r3
 8003268:	2301      	movs	r3, #1
 800326a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	333f      	adds	r3, #63	; 0x3f
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	333f      	adds	r3, #63	; 0x3f
 800328e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003290:	2b02      	cmp	r3, #2
 8003292:	d111      	bne.n	80032b8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f005 f859 	bl	8008356 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	461a      	mov	r2, r3
 80032b2:	2310      	movs	r3, #16
 80032b4:	6093      	str	r3, [r2, #8]
 80032b6:	e03a      	b.n	800332e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	333f      	adds	r3, #63	; 0x3f
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d009      	beq.n	80032e0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	333f      	adds	r3, #63	; 0x3f
 80032da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d126      	bne.n	800332e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3360      	adds	r3, #96	; 0x60
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	b2d9      	uxtb	r1, r3
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	202c      	movs	r0, #44	; 0x2c
 800331c:	fb00 f303 	mul.w	r3, r0, r3
 8003320:	4413      	add	r3, r2
 8003322:	3360      	adds	r3, #96	; 0x60
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f006 fb19 	bl	8009960 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d12b      	bne.n	800338e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3348      	adds	r3, #72	; 0x48
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	202c      	movs	r0, #44	; 0x2c
 800334c:	fb00 f202 	mul.w	r2, r0, r2
 8003350:	440a      	add	r2, r1
 8003352:	3240      	adds	r2, #64	; 0x40
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	fbb3 f3f2 	udiv	r3, r3, r2
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 818e 	beq.w	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3354      	adds	r3, #84	; 0x54
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	f083 0301 	eor.w	r3, r3, #1
 8003378:	b2d8      	uxtb	r0, r3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3354      	adds	r3, #84	; 0x54
 8003388:	4602      	mov	r2, r0
 800338a:	701a      	strb	r2, [r3, #0]
}
 800338c:	e178      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3354      	adds	r3, #84	; 0x54
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2d8      	uxtb	r0, r3
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	3354      	adds	r3, #84	; 0x54
 80033b2:	4602      	mov	r2, r0
 80033b4:	701a      	strb	r2, [r3, #0]
}
 80033b6:	e163      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	f040 80f6 	bne.w	80035bc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3361      	adds	r3, #97	; 0x61
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d109      	bne.n	80033f8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3360      	adds	r3, #96	; 0x60
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e0c9      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3361      	adds	r3, #97	; 0x61
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d109      	bne.n	8003420 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3360      	adds	r3, #96	; 0x60
 800341a:	2205      	movs	r2, #5
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e0b5      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3361      	adds	r3, #97	; 0x61
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b06      	cmp	r3, #6
 8003432:	d009      	beq.n	8003448 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	3361      	adds	r3, #97	; 0x61
 8003442:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003444:	2b08      	cmp	r3, #8
 8003446:	d150      	bne.n	80034ea <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	335c      	adds	r3, #92	; 0x5c
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	202c      	movs	r0, #44	; 0x2c
 8003460:	fb00 f303 	mul.w	r3, r0, r3
 8003464:	440b      	add	r3, r1
 8003466:	335c      	adds	r3, #92	; 0x5c
 8003468:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	335c      	adds	r3, #92	; 0x5c
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d912      	bls.n	80034a4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	335c      	adds	r3, #92	; 0x5c
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	2204      	movs	r2, #4
 80034a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034a2:	e073      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3360      	adds	r3, #96	; 0x60
 80034b2:	2202      	movs	r2, #2
 80034b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034cc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034d4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034e8:	e050      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3361      	adds	r3, #97	; 0x61
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d122      	bne.n	8003544 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	3360      	adds	r3, #96	; 0x60
 800350c:	2202      	movs	r2, #2
 800350e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003526:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800352e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	461a      	mov	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e023      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3361      	adds	r3, #97	; 0x61
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b07      	cmp	r3, #7
 8003556:	d119      	bne.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	335c      	adds	r3, #92	; 0x5c
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	202c      	movs	r0, #44	; 0x2c
 8003570:	fb00 f303 	mul.w	r3, r0, r3
 8003574:	440b      	add	r3, r1
 8003576:	335c      	adds	r3, #92	; 0x5c
 8003578:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	3360      	adds	r3, #96	; 0x60
 8003588:	2204      	movs	r2, #4
 800358a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	2302      	movs	r3, #2
 800359c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	b2d9      	uxtb	r1, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	202c      	movs	r0, #44	; 0x2c
 80035a8:	fb00 f303 	mul.w	r3, r0, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	3360      	adds	r3, #96	; 0x60
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f006 f9d3 	bl	8009960 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035ba:	e061      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d156      	bne.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	212c      	movs	r1, #44	; 0x2c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	333f      	adds	r3, #63	; 0x3f
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d111      	bne.n	800360a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	212c      	movs	r1, #44	; 0x2c
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	335c      	adds	r3, #92	; 0x5c
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fea7 	bl	8008356 <USB_HC_Halt>
 8003608:	e031      	b.n	800366e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	333f      	adds	r3, #63	; 0x3f
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	333f      	adds	r3, #63	; 0x3f
 800362c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800362e:	2b02      	cmp	r3, #2
 8003630:	d11d      	bne.n	800366e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	212c      	movs	r1, #44	; 0x2c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	335c      	adds	r3, #92	; 0x5c
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d110      	bne.n	800366e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	3361      	adds	r3, #97	; 0x61
 800365a:	2203      	movs	r2, #3
 800365c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f004 fe74 	bl	8008356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	461a      	mov	r2, r3
 800367c:	2310      	movs	r3, #16
 800367e:	6093      	str	r3, [r2, #8]
}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d11a      	bne.n	80036ee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	461a      	mov	r2, r3
 80036c6:	2304      	movs	r3, #4
 80036c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3361      	adds	r3, #97	; 0x61
 80036d8:	2206      	movs	r2, #6
 80036da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 fe35 	bl	8008356 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80036ec:	e331      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d12e      	bne.n	8003762 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	2320      	movs	r3, #32
 8003714:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	333d      	adds	r3, #61	; 0x3d
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	f040 8313 	bne.w	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	333d      	adds	r3, #61	; 0x3d
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	3360      	adds	r3, #96	; 0x60
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f004 fdfb 	bl	8008356 <USB_HC_Halt>
}
 8003760:	e2f7      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d112      	bne.n	80037a0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003786:	461a      	mov	r2, r3
 8003788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f004 fddc 	bl	8008356 <USB_HC_Halt>
}
 800379e:	e2d8      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d140      	bne.n	8003838 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	335c      	adds	r3, #92	; 0x5c
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d111      	bne.n	8003802 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	333d      	adds	r3, #61	; 0x3d
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	461a      	mov	r2, r3
 80037fe:	2340      	movs	r3, #64	; 0x40
 8003800:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	461a      	mov	r2, r3
 8003810:	2301      	movs	r3, #1
 8003812:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3361      	adds	r3, #97	; 0x61
 8003822:	2201      	movs	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f004 fd90 	bl	8008356 <USB_HC_Halt>
}
 8003836:	e28c      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d12c      	bne.n	80038a8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	3361      	adds	r3, #97	; 0x61
 800385c:	2204      	movs	r2, #4
 800385e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	333d      	adds	r3, #61	; 0x3d
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	335c      	adds	r3, #92	; 0x5c
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f004 fd61 	bl	8008356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	461a      	mov	r2, r3
 80038a2:	2340      	movs	r3, #64	; 0x40
 80038a4:	6093      	str	r3, [r2, #8]
}
 80038a6:	e254      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d11a      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	461a      	mov	r2, r3
 80038cc:	2308      	movs	r3, #8
 80038ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	3361      	adds	r3, #97	; 0x61
 80038de:	2205      	movs	r2, #5
 80038e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f004 fd32 	bl	8008356 <USB_HC_Halt>
}
 80038f2:	e22e      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b10      	cmp	r3, #16
 8003908:	d140      	bne.n	800398c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	335c      	adds	r3, #92	; 0x5c
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3361      	adds	r3, #97	; 0x61
 800392a:	2203      	movs	r2, #3
 800392c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	333d      	adds	r3, #61	; 0x3d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d112      	bne.n	8003968 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	333c      	adds	r3, #60	; 0x3c
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	333d      	adds	r3, #61	; 0x3d
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f004 fcef 	bl	8008356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	2310      	movs	r3, #16
 8003988:	6093      	str	r3, [r2, #8]
}
 800398a:	e1e2      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d164      	bne.n	8003a6c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d111      	bne.n	80039ce <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	3361      	adds	r3, #97	; 0x61
 80039b8:	2206      	movs	r2, #6
 80039ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 fcc5 	bl	8008356 <USB_HC_Halt>
 80039cc:	e044      	b.n	8003a58 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	335c      	adds	r3, #92	; 0x5c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	202c      	movs	r0, #44	; 0x2c
 80039e6:	fb00 f303 	mul.w	r3, r0, r3
 80039ea:	440b      	add	r3, r1
 80039ec:	335c      	adds	r3, #92	; 0x5c
 80039ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	335c      	adds	r3, #92	; 0x5c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d920      	bls.n	8003a46 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	335c      	adds	r3, #92	; 0x5c
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3360      	adds	r3, #96	; 0x60
 8003a24:	2204      	movs	r2, #4
 8003a26:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	b2d9      	uxtb	r1, r3
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	202c      	movs	r0, #44	; 0x2c
 8003a32:	fb00 f303 	mul.w	r3, r0, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	3360      	adds	r3, #96	; 0x60
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f005 ff8e 	bl	8009960 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a44:	e008      	b.n	8003a58 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3360      	adds	r3, #96	; 0x60
 8003a54:	2202      	movs	r2, #2
 8003a56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	6093      	str	r3, [r2, #8]
}
 8003a6a:	e172      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a82:	d11b      	bne.n	8003abc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3361      	adds	r3, #97	; 0x61
 8003a92:	2208      	movs	r2, #8
 8003a94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 fc58 	bl	8008356 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab8:	6093      	str	r3, [r2, #8]
}
 8003aba:	e14a      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	f040 813f 	bne.w	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3361      	adds	r3, #97	; 0x61
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d17d      	bne.n	8003be4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3360      	adds	r3, #96	; 0x60
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	333f      	adds	r3, #63	; 0x3f
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d00a      	beq.n	8003b24 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	333f      	adds	r3, #63	; 0x3f
 8003b1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	f040 8100 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d113      	bne.n	8003b54 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3355      	adds	r3, #85	; 0x55
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	f083 0301 	eor.w	r3, r3, #1
 8003b40:	b2d8      	uxtb	r0, r3
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3355      	adds	r3, #85	; 0x55
 8003b50:	4602      	mov	r2, r0
 8003b52:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f040 80e3 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	334c      	adds	r3, #76	; 0x4c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80d8 	beq.w	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	334c      	adds	r3, #76	; 0x4c
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	202c      	movs	r0, #44	; 0x2c
 8003b8a:	fb00 f202 	mul.w	r2, r0, r2
 8003b8e:	440a      	add	r2, r1
 8003b90:	3240      	adds	r2, #64	; 0x40
 8003b92:	8812      	ldrh	r2, [r2, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	3b01      	subs	r3, #1
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	202c      	movs	r0, #44	; 0x2c
 8003b9e:	fb00 f202 	mul.w	r2, r0, r2
 8003ba2:	440a      	add	r2, r1
 8003ba4:	3240      	adds	r2, #64	; 0x40
 8003ba6:	8812      	ldrh	r2, [r2, #0]
 8003ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80b5 	beq.w	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3355      	adds	r3, #85	; 0x55
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f083 0301 	eor.w	r3, r3, #1
 8003bce:	b2d8      	uxtb	r0, r3
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	3355      	adds	r3, #85	; 0x55
 8003bde:	4602      	mov	r2, r0
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e09f      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	3361      	adds	r3, #97	; 0x61
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d109      	bne.n	8003c0c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	212c      	movs	r1, #44	; 0x2c
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	3360      	adds	r3, #96	; 0x60
 8003c06:	2202      	movs	r2, #2
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e08b      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3361      	adds	r3, #97	; 0x61
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d109      	bne.n	8003c34 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3360      	adds	r3, #96	; 0x60
 8003c2e:	2202      	movs	r2, #2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e077      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3361      	adds	r3, #97	; 0x61
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d109      	bne.n	8003c5c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3360      	adds	r3, #96	; 0x60
 8003c56:	2205      	movs	r2, #5
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e063      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	212c      	movs	r1, #44	; 0x2c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	3361      	adds	r3, #97	; 0x61
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d009      	beq.n	8003c84 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3361      	adds	r3, #97	; 0x61
 8003c7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d14f      	bne.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	335c      	adds	r3, #92	; 0x5c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	202c      	movs	r0, #44	; 0x2c
 8003c9c:	fb00 f303 	mul.w	r3, r0, r3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	335c      	adds	r3, #92	; 0x5c
 8003ca4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	335c      	adds	r3, #92	; 0x5c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d912      	bls.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	335c      	adds	r3, #92	; 0x5c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3360      	adds	r3, #96	; 0x60
 8003cda:	2204      	movs	r2, #4
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e021      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	212c      	movs	r1, #44	; 0x2c
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	3360      	adds	r3, #96	; 0x60
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d08:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d10:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1e:	461a      	mov	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	461a      	mov	r2, r3
 8003d32:	2302      	movs	r3, #2
 8003d34:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	b2d9      	uxtb	r1, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	202c      	movs	r0, #44	; 0x2c
 8003d40:	fb00 f303 	mul.w	r3, r0, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3360      	adds	r3, #96	; 0x60
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f005 fe07 	bl	8009960 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d52:	bf00      	nop
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b08a      	sub	sp, #40	; 0x28
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	0c5b      	lsrs	r3, r3, #17
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d8e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d004      	beq.n	8003da0 <HCD_RXQLVL_IRQHandler+0x46>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	f000 80a9 	beq.w	8003ef0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d9e:	e0aa      	b.n	8003ef6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80a6 	beq.w	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3344      	adds	r3, #68	; 0x44
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 809b 	beq.w	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3350      	adds	r3, #80	; 0x50
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	202c      	movs	r0, #44	; 0x2c
 8003dd8:	fb00 f303 	mul.w	r3, r0, r3
 8003ddc:	440b      	add	r3, r1
 8003dde:	334c      	adds	r3, #76	; 0x4c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d87a      	bhi.n	8003edc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	212c      	movs	r1, #44	; 0x2c
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	3344      	adds	r3, #68	; 0x44
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f003 fe2a 	bl	8007a58 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3344      	adds	r3, #68	; 0x44
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	441a      	add	r2, r3
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	202c      	movs	r0, #44	; 0x2c
 8003e1e:	fb00 f303 	mul.w	r3, r0, r3
 8003e22:	440b      	add	r3, r1
 8003e24:	3344      	adds	r3, #68	; 0x44
 8003e26:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3350      	adds	r3, #80	; 0x50
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	441a      	add	r2, r3
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	202c      	movs	r0, #44	; 0x2c
 8003e42:	fb00 f303 	mul.w	r3, r0, r3
 8003e46:	440b      	add	r3, r1
 8003e48:	3350      	adds	r3, #80	; 0x50
 8003e4a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	0cdb      	lsrs	r3, r3, #19
 8003e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e60:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3340      	adds	r3, #64	; 0x40
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d13c      	bne.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d039      	beq.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e96:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e9e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	212c      	movs	r1, #44	; 0x2c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3354      	adds	r3, #84	; 0x54
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2d8      	uxtb	r0, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3354      	adds	r3, #84	; 0x54
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	701a      	strb	r2, [r3, #0]
      break;
 8003eda:	e00b      	b.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	212c      	movs	r1, #44	; 0x2c
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3360      	adds	r3, #96	; 0x60
 8003eea:	2204      	movs	r2, #4
 8003eec:	701a      	strb	r2, [r3, #0]
      break;
 8003eee:	e001      	b.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003ef4:	bf00      	nop
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f2a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d10b      	bne.n	8003f4e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d102      	bne.n	8003f46 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f005 fcf1 	bl	8009928 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d132      	bne.n	8003fbe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
 8003f5e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d126      	bne.n	8003fb8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d113      	bne.n	8003f9a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f7c:	d106      	bne.n	8003f8c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2102      	movs	r1, #2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f003 fed5 	bl	8007d34 <USB_InitFSLSPClkSel>
 8003f8a:	e011      	b.n	8003fb0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 fece 	bl	8007d34 <USB_InitFSLSPClkSel>
 8003f98:	e00a      	b.n	8003fb0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d106      	bne.n	8003fb0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003fae:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f005 fce3 	bl	800997c <HAL_HCD_PortEnabled_Callback>
 8003fb6:	e002      	b.n	8003fbe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f005 fced 	bl	8009998 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d103      	bne.n	8003fd0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f043 0320 	orr.w	r3, r3, #32
 8003fce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e12b      	b.n	800424e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fabc 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004048:	f001 ffb4 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 800404c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a81      	ldr	r2, [pc, #516]	; (8004258 <HAL_I2C_Init+0x274>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d807      	bhi.n	8004068 <HAL_I2C_Init+0x84>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a80      	ldr	r2, [pc, #512]	; (800425c <HAL_I2C_Init+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e006      	b.n	8004076 <HAL_I2C_Init+0x92>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a7d      	ldr	r2, [pc, #500]	; (8004260 <HAL_I2C_Init+0x27c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0e7      	b.n	800424e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a78      	ldr	r2, [pc, #480]	; (8004264 <HAL_I2C_Init+0x280>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0c9b      	lsrs	r3, r3, #18
 8004088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a6a      	ldr	r2, [pc, #424]	; (8004258 <HAL_I2C_Init+0x274>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d802      	bhi.n	80040b8 <HAL_I2C_Init+0xd4>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	e009      	b.n	80040cc <HAL_I2C_Init+0xe8>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	4a69      	ldr	r2, [pc, #420]	; (8004268 <HAL_I2C_Init+0x284>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	3301      	adds	r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	495c      	ldr	r1, [pc, #368]	; (8004258 <HAL_I2C_Init+0x274>)
 80040e8:	428b      	cmp	r3, r1
 80040ea:	d819      	bhi.n	8004120 <HAL_I2C_Init+0x13c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1e59      	subs	r1, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004100:	400b      	ands	r3, r1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_I2C_Init+0x138>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e59      	subs	r1, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fbb1 f3f3 	udiv	r3, r1, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411a:	e051      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800411c:	2304      	movs	r3, #4
 800411e:	e04f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d111      	bne.n	800414c <HAL_I2C_Init+0x168>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e012      	b.n	8004172 <HAL_I2C_Init+0x18e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Init+0x196>
 8004176:	2301      	movs	r3, #1
 8004178:	e022      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10e      	bne.n	80041a0 <HAL_I2C_Init+0x1bc>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1e58      	subs	r0, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	440b      	add	r3, r1
 8004190:	fbb0 f3f3 	udiv	r3, r0, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	e00f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	0099      	lsls	r1, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	6809      	ldr	r1, [r1, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6911      	ldr	r1, [r2, #16]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68d2      	ldr	r2, [r2, #12]
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	000186a0 	.word	0x000186a0
 800425c:	001e847f 	.word	0x001e847f
 8004260:	003d08ff 	.word	0x003d08ff
 8004264:	431bde83 	.word	0x431bde83
 8004268:	10624dd3 	.word	0x10624dd3

0800426c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	460b      	mov	r3, r1
 800427a:	817b      	strh	r3, [r7, #10]
 800427c:	4613      	mov	r3, r2
 800427e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7fd fde2 	bl	8001e48 <HAL_GetTick>
 8004284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	f040 80e0 	bne.w	8004454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2319      	movs	r3, #25
 800429a:	2201      	movs	r2, #1
 800429c:	4970      	ldr	r1, [pc, #448]	; (8004460 <HAL_I2C_Master_Transmit+0x1f4>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fc58 	bl	8004b54 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0d3      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_I2C_Master_Transmit+0x50>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e0cc      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d007      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2221      	movs	r2, #33	; 0x21
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2210      	movs	r2, #16
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	893a      	ldrh	r2, [r7, #8]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a50      	ldr	r2, [pc, #320]	; (8004464 <HAL_I2C_Master_Transmit+0x1f8>)
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004324:	8979      	ldrh	r1, [r7, #10]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fac2 	bl	80048b4 <I2C_MasterRequestWrite>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e08d      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004350:	e066      	b.n	8004420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fcd2 	bl	8004d00 <I2C_WaitOnTXEFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b04      	cmp	r3, #4
 8004368:	d107      	bne.n	800437a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06b      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d11b      	bne.n	80043f4 <HAL_I2C_Master_Transmit+0x188>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	6a39      	ldr	r1, [r7, #32]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fcc2 	bl	8004d82 <I2C_WaitOnBTFFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e01a      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d194      	bne.n	8004352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	00100002 	.word	0x00100002
 8004464:	ffff0000 	.word	0xffff0000

08004468 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	460b      	mov	r3, r1
 8004476:	817b      	strh	r3, [r7, #10]
 8004478:	4613      	mov	r3, r2
 800447a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7fd fce4 	bl	8001e48 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b20      	cmp	r3, #32
 800448c:	f040 820b 	bne.w	80048a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	2319      	movs	r3, #25
 8004496:	2201      	movs	r2, #1
 8004498:	497c      	ldr	r1, [pc, #496]	; (800468c <HAL_I2C_Master_Receive+0x224>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fb5a 	bl	8004b54 <I2C_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
 80044a8:	e1fe      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_I2C_Master_Receive+0x50>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e1f7      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d007      	beq.n	80044de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2222      	movs	r2, #34	; 0x22
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2210      	movs	r2, #16
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	893a      	ldrh	r2, [r7, #8]
 800450e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4a5c      	ldr	r2, [pc, #368]	; (8004690 <HAL_I2C_Master_Receive+0x228>)
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004520:	8979      	ldrh	r1, [r7, #10]
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fa46 	bl	80049b8 <I2C_MasterRequestRead>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e1b8      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d113      	bne.n	8004566 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453e:	2300      	movs	r3, #0
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e18c      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	2b01      	cmp	r3, #1
 800456c:	d11b      	bne.n	80045a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e16c      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d11b      	bne.n	80045e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	e14c      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800460c:	e138      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	2b03      	cmp	r3, #3
 8004614:	f200 80f1 	bhi.w	80047fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	2b01      	cmp	r3, #1
 800461e:	d123      	bne.n	8004668 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fbed 	bl	8004e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e139      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004666:	e10b      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b02      	cmp	r3, #2
 800466e:	d14e      	bne.n	800470e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	2200      	movs	r2, #0
 8004678:	4906      	ldr	r1, [pc, #24]	; (8004694 <HAL_I2C_Master_Receive+0x22c>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fa6a 	bl	8004b54 <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e10e      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
 800468a:	bf00      	nop
 800468c:	00100002 	.word	0x00100002
 8004690:	ffff0000 	.word	0xffff0000
 8004694:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800470c:	e0b8      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2200      	movs	r2, #0
 8004716:	4966      	ldr	r1, [pc, #408]	; (80048b0 <HAL_I2C_Master_Receive+0x448>)
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fa1b 	bl	8004b54 <I2C_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0bf      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2200      	movs	r2, #0
 8004772:	494f      	ldr	r1, [pc, #316]	; (80048b0 <HAL_I2C_Master_Receive+0x448>)
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f9ed 	bl	8004b54 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e091      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047f8:	e042      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fb00 	bl	8004e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e04c      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d118      	bne.n	8004880 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	f47f aec2 	bne.w	800460e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e000      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048a6:	2302      	movs	r3, #2
  }
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	00010004 	.word	0x00010004

080048b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	460b      	mov	r3, r1
 80048c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d006      	beq.n	80048de <I2C_MasterRequestWrite+0x2a>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d003      	beq.n	80048de <I2C_MasterRequestWrite+0x2a>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048dc:	d108      	bne.n	80048f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e00b      	b.n	8004908 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	2b12      	cmp	r3, #18
 80048f6:	d107      	bne.n	8004908 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f91d 	bl	8004b54 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d103      	bne.n	8004938 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e035      	b.n	80049a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004944:	d108      	bne.n	8004958 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004946:	897b      	ldrh	r3, [r7, #10]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004954:	611a      	str	r2, [r3, #16]
 8004956:	e01b      	b.n	8004990 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004958:	897b      	ldrh	r3, [r7, #10]
 800495a:	11db      	asrs	r3, r3, #7
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f063 030f 	orn	r3, r3, #15
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	490e      	ldr	r1, [pc, #56]	; (80049b0 <I2C_MasterRequestWrite+0xfc>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f943 	bl	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e010      	b.n	80049a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004986:	897b      	ldrh	r3, [r7, #10]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4907      	ldr	r1, [pc, #28]	; (80049b4 <I2C_MasterRequestWrite+0x100>)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f933 	bl	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	00010008 	.word	0x00010008
 80049b4:	00010002 	.word	0x00010002

080049b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	460b      	mov	r3, r1
 80049c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d006      	beq.n	80049f2 <I2C_MasterRequestRead+0x3a>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d003      	beq.n	80049f2 <I2C_MasterRequestRead+0x3a>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049f0:	d108      	bne.n	8004a04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e00b      	b.n	8004a1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	2b11      	cmp	r3, #17
 8004a0a:	d107      	bne.n	8004a1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f893 	bl	8004b54 <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00d      	beq.n	8004a50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a42:	d103      	bne.n	8004a4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e079      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a58:	d108      	bne.n	8004a6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a5a:	897b      	ldrh	r3, [r7, #10]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	611a      	str	r2, [r3, #16]
 8004a6a:	e05f      	b.n	8004b2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a6c:	897b      	ldrh	r3, [r7, #10]
 8004a6e:	11db      	asrs	r3, r3, #7
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f003 0306 	and.w	r3, r3, #6
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f063 030f 	orn	r3, r3, #15
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	4930      	ldr	r1, [pc, #192]	; (8004b4c <I2C_MasterRequestRead+0x194>)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f8b9 	bl	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e054      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a9a:	897b      	ldrh	r3, [r7, #10]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4929      	ldr	r1, [pc, #164]	; (8004b50 <I2C_MasterRequestRead+0x198>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8a9 	bl	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e044      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ade:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f831 	bl	8004b54 <I2C_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00d      	beq.n	8004b14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b06:	d103      	bne.n	8004b10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e017      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	11db      	asrs	r3, r3, #7
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f063 030e 	orn	r3, r3, #14
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4907      	ldr	r1, [pc, #28]	; (8004b50 <I2C_MasterRequestRead+0x198>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f865 	bl	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	00010008 	.word	0x00010008
 8004b50:	00010002 	.word	0x00010002

08004b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b64:	e025      	b.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d021      	beq.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fd f96b 	bl	8001e48 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d116      	bne.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f043 0220 	orr.w	r2, r3, #32
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e023      	b.n	8004bfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10d      	bne.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	e00c      	b.n	8004bf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	43da      	mvns	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf0c      	ite	eq
 8004bea:	2301      	moveq	r3, #1
 8004bec:	2300      	movne	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d0b6      	beq.n	8004b66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c10:	e051      	b.n	8004cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c20:	d123      	bne.n	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f043 0204 	orr.w	r2, r3, #4
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e046      	b.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d021      	beq.n	8004cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c72:	f7fd f8e9 	bl	8001e48 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d302      	bcc.n	8004c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d116      	bne.n	8004cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f043 0220 	orr.w	r2, r3, #32
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e020      	b.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	0c1b      	lsrs	r3, r3, #16
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10c      	bne.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf14      	ite	ne
 8004cd2:	2301      	movne	r3, #1
 8004cd4:	2300      	moveq	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	e00b      	b.n	8004cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	43da      	mvns	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d18d      	bne.n	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d0c:	e02d      	b.n	8004d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f8ce 	bl	8004eb0 <I2C_IsAcknowledgeFailed>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e02d      	b.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d021      	beq.n	8004d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fd f88f 	bl	8001e48 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d116      	bne.n	8004d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e007      	b.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d1ca      	bne.n	8004d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d8e:	e02d      	b.n	8004dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f88d 	bl	8004eb0 <I2C_IsAcknowledgeFailed>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e02d      	b.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d021      	beq.n	8004dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da8:	f7fd f84e 	bl	8001e48 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d302      	bcc.n	8004dbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d116      	bne.n	8004dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e007      	b.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d1ca      	bne.n	8004d90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e10:	e042      	b.n	8004e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d119      	bne.n	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0210 	mvn.w	r2, #16
 8004e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e029      	b.n	8004ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e54:	f7fc fff8 	bl	8001e48 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d302      	bcc.n	8004e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d116      	bne.n	8004e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f043 0220 	orr.w	r2, r3, #32
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e007      	b.n	8004ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d1b5      	bne.n	8004e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec6:	d11b      	bne.n	8004f00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ed0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f043 0204 	orr.w	r2, r3, #4
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d129      	bne.n	8004f78 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2224      	movs	r2, #36	; 0x24
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0210 	bic.w	r2, r2, #16
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d12a      	bne.n	8004ff6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2224      	movs	r2, #36	; 0x24
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004fc0:	89fb      	ldrh	r3, [r7, #14]
 8004fc2:	f023 030f 	bic.w	r3, r3, #15
 8004fc6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	89fb      	ldrh	r3, [r7, #14]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	89fa      	ldrh	r2, [r7, #14]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e000      	b.n	8004ff8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
  }
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0bf      	b.n	8005196 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc fb16 	bl	800165c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005046:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6999      	ldr	r1, [r3, #24]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800505c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6899      	ldr	r1, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b4a      	ldr	r3, [pc, #296]	; (80051a0 <HAL_LTDC_Init+0x19c>)
 8005078:	400b      	ands	r3, r1
 800507a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6899      	ldr	r1, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68d9      	ldr	r1, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <HAL_LTDC_Init+0x19c>)
 80050a6:	400b      	ands	r3, r1
 80050a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68d9      	ldr	r1, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6919      	ldr	r1, [r3, #16]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <HAL_LTDC_Init+0x19c>)
 80050d4:	400b      	ands	r3, r1
 80050d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6919      	ldr	r1, [r3, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6959      	ldr	r1, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <HAL_LTDC_Init+0x19c>)
 8005102:	400b      	ands	r3, r1
 8005104:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6959      	ldr	r1, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0206 	orr.w	r2, r2, #6
 8005172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	f000f800 	.word	0xf000f800

080051a4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d023      	beq.n	800520e <HAL_LTDC_IRQHandler+0x6a>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01e      	beq.n	800520e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0204 	bic.w	r2, r2, #4
 80051de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2204      	movs	r2, #4
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051ee:	f043 0201 	orr.w	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2204      	movs	r2, #4
 80051fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f86f 	bl	80052ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d023      	beq.n	8005260 <HAL_LTDC_IRQHandler+0xbc>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01e      	beq.n	8005260 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0202 	bic.w	r2, r2, #2
 8005230:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2202      	movs	r2, #2
 8005238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005240:	f043 0202 	orr.w	r2, r3, #2
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2204      	movs	r2, #4
 800524e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f846 	bl	80052ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01b      	beq.n	80052a2 <HAL_LTDC_IRQHandler+0xfe>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d016      	beq.n	80052a2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f82f 	bl	8005300 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_LTDC_IRQHandler+0x140>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d016      	beq.n	80052e4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0208 	bic.w	r2, r2, #8
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2208      	movs	r2, #8
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f818 	bl	8005314 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005328:	b5b0      	push	{r4, r5, r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_LTDC_ConfigLayer+0x1a>
 800533e:	2302      	movs	r3, #2
 8005340:	e02c      	b.n	800539c <HAL_LTDC_ConfigLayer+0x74>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2202      	movs	r2, #2
 800534e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2134      	movs	r1, #52	; 0x34
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	4413      	add	r3, r2
 800535e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4614      	mov	r4, r2
 8005366:	461d      	mov	r5, r3
 8005368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800536a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800536c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800536e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f811 	bl	80053a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bdb0      	pop	{r4, r5, r7, pc}

080053a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	; 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c0:	4413      	add	r3, r2
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	01db      	lsls	r3, r3, #7
 80053d0:	4413      	add	r3, r2
 80053d2:	3384      	adds	r3, #132	; 0x84
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	4611      	mov	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	01d2      	lsls	r2, r2, #7
 80053e0:	440a      	add	r2, r1
 80053e2:	3284      	adds	r2, #132	; 0x84
 80053e4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053fa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053fc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4619      	mov	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	01db      	lsls	r3, r3, #7
 8005408:	440b      	add	r3, r1
 800540a:	3384      	adds	r3, #132	; 0x84
 800540c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005412:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005422:	4413      	add	r3, r2
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	01db      	lsls	r3, r3, #7
 8005432:	4413      	add	r3, r2
 8005434:	3384      	adds	r3, #132	; 0x84
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	6812      	ldr	r2, [r2, #0]
 800543c:	4611      	mov	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	01d2      	lsls	r2, r2, #7
 8005442:	440a      	add	r2, r1
 8005444:	3284      	adds	r2, #132	; 0x84
 8005446:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800544a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800545a:	4413      	add	r3, r2
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4619      	mov	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	01db      	lsls	r3, r3, #7
 8005468:	440b      	add	r3, r1
 800546a:	3384      	adds	r3, #132	; 0x84
 800546c:	4619      	mov	r1, r3
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4313      	orrs	r3, r2
 8005472:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	01db      	lsls	r3, r3, #7
 800547e:	4413      	add	r3, r2
 8005480:	3384      	adds	r3, #132	; 0x84
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	4611      	mov	r1, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	01d2      	lsls	r2, r2, #7
 800548e:	440a      	add	r2, r1
 8005490:	3284      	adds	r2, #132	; 0x84
 8005492:	f023 0307 	bic.w	r3, r3, #7
 8005496:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	01db      	lsls	r3, r3, #7
 80054a2:	4413      	add	r3, r2
 80054a4:	3384      	adds	r3, #132	; 0x84
 80054a6:	461a      	mov	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	061b      	lsls	r3, r3, #24
 80054c8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	01db      	lsls	r3, r3, #7
 80054d4:	4413      	add	r3, r2
 80054d6:	3384      	adds	r3, #132	; 0x84
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	01db      	lsls	r3, r3, #7
 80054e4:	4413      	add	r3, r2
 80054e6:	3384      	adds	r3, #132	; 0x84
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054f4:	461a      	mov	r2, r3
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4619      	mov	r1, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	01db      	lsls	r3, r3, #7
 8005508:	440b      	add	r3, r1
 800550a:	3384      	adds	r3, #132	; 0x84
 800550c:	4619      	mov	r1, r3
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	01db      	lsls	r3, r3, #7
 800551e:	4413      	add	r3, r2
 8005520:	3384      	adds	r3, #132	; 0x84
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	4611      	mov	r1, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	01d2      	lsls	r2, r2, #7
 800552e:	440a      	add	r2, r1
 8005530:	3284      	adds	r2, #132	; 0x84
 8005532:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005536:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	01db      	lsls	r3, r3, #7
 8005542:	4413      	add	r3, r2
 8005544:	3384      	adds	r3, #132	; 0x84
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	01db      	lsls	r3, r3, #7
 8005558:	4413      	add	r3, r2
 800555a:	3384      	adds	r3, #132	; 0x84
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	4611      	mov	r1, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	01d2      	lsls	r2, r2, #7
 8005568:	440a      	add	r2, r1
 800556a:	3284      	adds	r2, #132	; 0x84
 800556c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005570:	f023 0307 	bic.w	r3, r3, #7
 8005574:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	69da      	ldr	r2, [r3, #28]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	6809      	ldr	r1, [r1, #0]
 8005582:	4608      	mov	r0, r1
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	01c9      	lsls	r1, r1, #7
 8005588:	4401      	add	r1, r0
 800558a:	3184      	adds	r1, #132	; 0x84
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	01db      	lsls	r3, r3, #7
 800559a:	4413      	add	r3, r2
 800559c:	3384      	adds	r3, #132	; 0x84
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	01db      	lsls	r3, r3, #7
 80055aa:	4413      	add	r3, r2
 80055ac:	3384      	adds	r3, #132	; 0x84
 80055ae:	461a      	mov	r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	01db      	lsls	r3, r3, #7
 80055be:	4413      	add	r3, r2
 80055c0:	3384      	adds	r3, #132	; 0x84
 80055c2:	461a      	mov	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80055d2:	2304      	movs	r3, #4
 80055d4:	61fb      	str	r3, [r7, #28]
 80055d6:	e01b      	b.n	8005610 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d102      	bne.n	80055e6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80055e0:	2303      	movs	r3, #3
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e014      	b.n	8005610 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d00b      	beq.n	8005606 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d007      	beq.n	8005606 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d003      	beq.n	8005606 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005602:	2b07      	cmp	r3, #7
 8005604:	d102      	bne.n	800560c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005606:	2302      	movs	r3, #2
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	e001      	b.n	8005610 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800560c:	2301      	movs	r3, #1
 800560e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	01db      	lsls	r3, r3, #7
 800561a:	4413      	add	r3, r2
 800561c:	3384      	adds	r3, #132	; 0x84
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	4611      	mov	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	01d2      	lsls	r2, r2, #7
 800562a:	440a      	add	r2, r1
 800562c:	3284      	adds	r2, #132	; 0x84
 800562e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005632:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	fb02 f303 	mul.w	r3, r2, r3
 800563e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1acb      	subs	r3, r1, r3
 800564a:	69f9      	ldr	r1, [r7, #28]
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005652:	68f9      	ldr	r1, [r7, #12]
 8005654:	6809      	ldr	r1, [r1, #0]
 8005656:	4608      	mov	r0, r1
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	01c9      	lsls	r1, r1, #7
 800565c:	4401      	add	r1, r0
 800565e:	3184      	adds	r1, #132	; 0x84
 8005660:	4313      	orrs	r3, r2
 8005662:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	01db      	lsls	r3, r3, #7
 800566e:	4413      	add	r3, r2
 8005670:	3384      	adds	r3, #132	; 0x84
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	4611      	mov	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	01d2      	lsls	r2, r2, #7
 800567e:	440a      	add	r2, r1
 8005680:	3284      	adds	r2, #132	; 0x84
 8005682:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005686:	f023 0307 	bic.w	r3, r3, #7
 800568a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	01db      	lsls	r3, r3, #7
 8005696:	4413      	add	r3, r2
 8005698:	3384      	adds	r3, #132	; 0x84
 800569a:	461a      	mov	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	01db      	lsls	r3, r3, #7
 80056ac:	4413      	add	r3, r2
 80056ae:	3384      	adds	r3, #132	; 0x84
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	4611      	mov	r1, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	01d2      	lsls	r2, r2, #7
 80056bc:	440a      	add	r2, r1
 80056be:	3284      	adds	r2, #132	; 0x84
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	6013      	str	r3, [r2, #0]
}
 80056c6:	bf00      	nop
 80056c8:	3724      	adds	r7, #36	; 0x24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e267      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d075      	beq.n	80057de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056f2:	4b88      	ldr	r3, [pc, #544]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d00c      	beq.n	8005718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056fe:	4b85      	ldr	r3, [pc, #532]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005706:	2b08      	cmp	r3, #8
 8005708:	d112      	bne.n	8005730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800570a:	4b82      	ldr	r3, [pc, #520]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005716:	d10b      	bne.n	8005730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	4b7e      	ldr	r3, [pc, #504]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d05b      	beq.n	80057dc <HAL_RCC_OscConfig+0x108>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d157      	bne.n	80057dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e242      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d106      	bne.n	8005748 <HAL_RCC_OscConfig+0x74>
 800573a:	4b76      	ldr	r3, [pc, #472]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a75      	ldr	r2, [pc, #468]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e01d      	b.n	8005784 <HAL_RCC_OscConfig+0xb0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005750:	d10c      	bne.n	800576c <HAL_RCC_OscConfig+0x98>
 8005752:	4b70      	ldr	r3, [pc, #448]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6f      	ldr	r2, [pc, #444]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	4b6d      	ldr	r3, [pc, #436]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a6c      	ldr	r2, [pc, #432]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e00b      	b.n	8005784 <HAL_RCC_OscConfig+0xb0>
 800576c:	4b69      	ldr	r3, [pc, #420]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a68      	ldr	r2, [pc, #416]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	4b66      	ldr	r3, [pc, #408]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a65      	ldr	r2, [pc, #404]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 800577e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fc fb5c 	bl	8001e48 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005794:	f7fc fb58 	bl	8001e48 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b64      	cmp	r3, #100	; 0x64
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e207      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b5b      	ldr	r3, [pc, #364]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0xc0>
 80057b2:	e014      	b.n	80057de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fc fb48 	bl	8001e48 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fc fb44 	bl	8001e48 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e1f3      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ce:	4b51      	ldr	r3, [pc, #324]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0xe8>
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d063      	beq.n	80058b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ea:	4b4a      	ldr	r3, [pc, #296]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057f6:	4b47      	ldr	r3, [pc, #284]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d11c      	bne.n	800583c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005802:	4b44      	ldr	r3, [pc, #272]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d116      	bne.n	800583c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580e:	4b41      	ldr	r3, [pc, #260]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_RCC_OscConfig+0x152>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d001      	beq.n	8005826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e1c7      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005826:	4b3b      	ldr	r3, [pc, #236]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4937      	ldr	r1, [pc, #220]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005836:	4313      	orrs	r3, r2
 8005838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583a:	e03a      	b.n	80058b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d020      	beq.n	8005886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005844:	4b34      	ldr	r3, [pc, #208]	; (8005918 <HAL_RCC_OscConfig+0x244>)
 8005846:	2201      	movs	r2, #1
 8005848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fc fafd 	bl	8001e48 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005852:	f7fc faf9 	bl	8001e48 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e1a8      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005864:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005870:	4b28      	ldr	r3, [pc, #160]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4925      	ldr	r1, [pc, #148]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 8005880:	4313      	orrs	r3, r2
 8005882:	600b      	str	r3, [r1, #0]
 8005884:	e015      	b.n	80058b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <HAL_RCC_OscConfig+0x244>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fc fadc 	bl	8001e48 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005894:	f7fc fad8 	bl	8001e48 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e187      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a6:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d036      	beq.n	800592c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d016      	beq.n	80058f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <HAL_RCC_OscConfig+0x248>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058cc:	f7fc fabc 	bl	8001e48 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d4:	f7fc fab8 	bl	8001e48 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e167      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_RCC_OscConfig+0x240>)
 80058e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x200>
 80058f2:	e01b      	b.n	800592c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_RCC_OscConfig+0x248>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058fa:	f7fc faa5 	bl	8001e48 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005900:	e00e      	b.n	8005920 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005902:	f7fc faa1 	bl	8001e48 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d907      	bls.n	8005920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e150      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
 8005914:	40023800 	.word	0x40023800
 8005918:	42470000 	.word	0x42470000
 800591c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005920:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1ea      	bne.n	8005902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8097 	beq.w	8005a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593e:	4b81      	ldr	r3, [pc, #516]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10f      	bne.n	800596a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	4b7d      	ldr	r3, [pc, #500]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	4a7c      	ldr	r2, [pc, #496]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005958:	6413      	str	r3, [r2, #64]	; 0x40
 800595a:	4b7a      	ldr	r3, [pc, #488]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596a:	4b77      	ldr	r3, [pc, #476]	; (8005b48 <HAL_RCC_OscConfig+0x474>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d118      	bne.n	80059a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005976:	4b74      	ldr	r3, [pc, #464]	; (8005b48 <HAL_RCC_OscConfig+0x474>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a73      	ldr	r2, [pc, #460]	; (8005b48 <HAL_RCC_OscConfig+0x474>)
 800597c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005982:	f7fc fa61 	bl	8001e48 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598a:	f7fc fa5d 	bl	8001e48 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e10c      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599c:	4b6a      	ldr	r3, [pc, #424]	; (8005b48 <HAL_RCC_OscConfig+0x474>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d106      	bne.n	80059be <HAL_RCC_OscConfig+0x2ea>
 80059b0:	4b64      	ldr	r3, [pc, #400]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	4a63      	ldr	r2, [pc, #396]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	6713      	str	r3, [r2, #112]	; 0x70
 80059bc:	e01c      	b.n	80059f8 <HAL_RCC_OscConfig+0x324>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d10c      	bne.n	80059e0 <HAL_RCC_OscConfig+0x30c>
 80059c6:	4b5f      	ldr	r3, [pc, #380]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	4a5e      	ldr	r2, [pc, #376]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059cc:	f043 0304 	orr.w	r3, r3, #4
 80059d0:	6713      	str	r3, [r2, #112]	; 0x70
 80059d2:	4b5c      	ldr	r3, [pc, #368]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	4a5b      	ldr	r2, [pc, #364]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6713      	str	r3, [r2, #112]	; 0x70
 80059de:	e00b      	b.n	80059f8 <HAL_RCC_OscConfig+0x324>
 80059e0:	4b58      	ldr	r3, [pc, #352]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	4a57      	ldr	r2, [pc, #348]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	6713      	str	r3, [r2, #112]	; 0x70
 80059ec:	4b55      	ldr	r3, [pc, #340]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	4a54      	ldr	r2, [pc, #336]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 80059f2:	f023 0304 	bic.w	r3, r3, #4
 80059f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d015      	beq.n	8005a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a00:	f7fc fa22 	bl	8001e48 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a08:	f7fc fa1e 	bl	8001e48 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e0cb      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1e:	4b49      	ldr	r3, [pc, #292]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0ee      	beq.n	8005a08 <HAL_RCC_OscConfig+0x334>
 8005a2a:	e014      	b.n	8005a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2c:	f7fc fa0c 	bl	8001e48 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a34:	f7fc fa08 	bl	8001e48 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e0b5      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a4a:	4b3e      	ldr	r3, [pc, #248]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1ee      	bne.n	8005a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5c:	4b39      	ldr	r3, [pc, #228]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	4a38      	ldr	r2, [pc, #224]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80a1 	beq.w	8005bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a72:	4b34      	ldr	r3, [pc, #208]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d05c      	beq.n	8005b38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d141      	bne.n	8005b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a86:	4b31      	ldr	r3, [pc, #196]	; (8005b4c <HAL_RCC_OscConfig+0x478>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8c:	f7fc f9dc 	bl	8001e48 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a94:	f7fc f9d8 	bl	8001e48 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e087      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa6:	4b27      	ldr	r3, [pc, #156]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	019b      	lsls	r3, r3, #6
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	3b01      	subs	r3, #1
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	061b      	lsls	r3, r3, #24
 8005ad6:	491b      	ldr	r1, [pc, #108]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005adc:	4b1b      	ldr	r3, [pc, #108]	; (8005b4c <HAL_RCC_OscConfig+0x478>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae2:	f7fc f9b1 	bl	8001e48 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aea:	f7fc f9ad 	bl	8001e48 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e05c      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x416>
 8005b08:	e054      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0a:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <HAL_RCC_OscConfig+0x478>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b10:	f7fc f99a 	bl	8001e48 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fc f996 	bl	8001e48 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e045      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x444>
 8005b36:	e03d      	b.n	8005bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e038      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40007000 	.word	0x40007000
 8005b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b50:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <HAL_RCC_OscConfig+0x4ec>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d028      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d121      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d11a      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b80:	4013      	ands	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d111      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d107      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40023800 	.word	0x40023800

08005bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0cc      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b68      	ldr	r3, [pc, #416]	; (8005d7c <HAL_RCC_ClockConfig+0x1b8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d90c      	bls.n	8005c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b65      	ldr	r3, [pc, #404]	; (8005d7c <HAL_RCC_ClockConfig+0x1b8>)
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bee:	4b63      	ldr	r3, [pc, #396]	; (8005d7c <HAL_RCC_ClockConfig+0x1b8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0b8      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d020      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c18:	4b59      	ldr	r3, [pc, #356]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a58      	ldr	r2, [pc, #352]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c30:	4b53      	ldr	r3, [pc, #332]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	4a52      	ldr	r2, [pc, #328]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c3c:	4b50      	ldr	r3, [pc, #320]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	494d      	ldr	r1, [pc, #308]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d044      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d107      	bne.n	8005c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c62:	4b47      	ldr	r3, [pc, #284]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d119      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e07f      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d003      	beq.n	8005c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c82:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e06f      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c92:	4b3b      	ldr	r3, [pc, #236]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e067      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ca2:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f023 0203 	bic.w	r2, r3, #3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	4934      	ldr	r1, [pc, #208]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb4:	f7fc f8c8 	bl	8001e48 <HAL_GetTick>
 8005cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cbc:	f7fc f8c4 	bl	8001e48 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e04f      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd2:	4b2b      	ldr	r3, [pc, #172]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 020c 	and.w	r2, r3, #12
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d1eb      	bne.n	8005cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b25      	ldr	r3, [pc, #148]	; (8005d7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d20c      	bcs.n	8005d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <HAL_RCC_ClockConfig+0x1b8>)
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <HAL_RCC_ClockConfig+0x1b8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e032      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d18:	4b19      	ldr	r3, [pc, #100]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4916      	ldr	r1, [pc, #88]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	490e      	ldr	r1, [pc, #56]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d4a:	f000 f821 	bl	8005d90 <HAL_RCC_GetSysClockFreq>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	490a      	ldr	r1, [pc, #40]	; (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005d5c:	5ccb      	ldrb	r3, [r1, r3]
 8005d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d62:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d66:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fb fef4 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40023c00 	.word	0x40023c00
 8005d80:	40023800 	.word	0x40023800
 8005d84:	0800a6b0 	.word	0x0800a6b0
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	20000004 	.word	0x20000004

08005d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d94:	b094      	sub	sp, #80	; 0x50
 8005d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da0:	2300      	movs	r3, #0
 8005da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005da8:	4b79      	ldr	r3, [pc, #484]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d00d      	beq.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	f200 80e1 	bhi.w	8005f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d003      	beq.n	8005dca <HAL_RCC_GetSysClockFreq+0x3a>
 8005dc2:	e0db      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dc4:	4b73      	ldr	r3, [pc, #460]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005dc8:	e0db      	b.n	8005f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dca:	4b73      	ldr	r3, [pc, #460]	; (8005f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dce:	e0d8      	b.n	8005f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dd0:	4b6f      	ldr	r3, [pc, #444]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dda:	4b6d      	ldr	r3, [pc, #436]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d063      	beq.n	8005eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de6:	4b6a      	ldr	r3, [pc, #424]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	099b      	lsrs	r3, r3, #6
 8005dec:	2200      	movs	r2, #0
 8005dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e02:	4622      	mov	r2, r4
 8005e04:	462b      	mov	r3, r5
 8005e06:	f04f 0000 	mov.w	r0, #0
 8005e0a:	f04f 0100 	mov.w	r1, #0
 8005e0e:	0159      	lsls	r1, r3, #5
 8005e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e14:	0150      	lsls	r0, r2, #5
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	1a51      	subs	r1, r2, r1
 8005e1e:	6139      	str	r1, [r7, #16]
 8005e20:	4629      	mov	r1, r5
 8005e22:	eb63 0301 	sbc.w	r3, r3, r1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e34:	4659      	mov	r1, fp
 8005e36:	018b      	lsls	r3, r1, #6
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e3e:	4651      	mov	r1, sl
 8005e40:	018a      	lsls	r2, r1, #6
 8005e42:	4651      	mov	r1, sl
 8005e44:	ebb2 0801 	subs.w	r8, r2, r1
 8005e48:	4659      	mov	r1, fp
 8005e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e62:	4690      	mov	r8, r2
 8005e64:	4699      	mov	r9, r3
 8005e66:	4623      	mov	r3, r4
 8005e68:	eb18 0303 	adds.w	r3, r8, r3
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	462b      	mov	r3, r5
 8005e70:	eb49 0303 	adc.w	r3, r9, r3
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e82:	4629      	mov	r1, r5
 8005e84:	024b      	lsls	r3, r1, #9
 8005e86:	4621      	mov	r1, r4
 8005e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	024a      	lsls	r2, r1, #9
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e96:	2200      	movs	r2, #0
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ea0:	f7fa fd34 	bl	800090c <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eac:	e058      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eae:	4b38      	ldr	r3, [pc, #224]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	099b      	lsrs	r3, r3, #6
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	4611      	mov	r1, r2
 8005eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	f04f 0000 	mov.w	r0, #0
 8005ed0:	f04f 0100 	mov.w	r1, #0
 8005ed4:	0159      	lsls	r1, r3, #5
 8005ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eda:	0150      	lsls	r0, r2, #5
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f00:	ebb2 040a 	subs.w	r4, r2, sl
 8005f04:	eb63 050b 	sbc.w	r5, r3, fp
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	00eb      	lsls	r3, r5, #3
 8005f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f16:	00e2      	lsls	r2, r4, #3
 8005f18:	4614      	mov	r4, r2
 8005f1a:	461d      	mov	r5, r3
 8005f1c:	4643      	mov	r3, r8
 8005f1e:	18e3      	adds	r3, r4, r3
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	464b      	mov	r3, r9
 8005f24:	eb45 0303 	adc.w	r3, r5, r3
 8005f28:	607b      	str	r3, [r7, #4]
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f36:	4629      	mov	r1, r5
 8005f38:	028b      	lsls	r3, r1, #10
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f40:	4621      	mov	r1, r4
 8005f42:	028a      	lsls	r2, r1, #10
 8005f44:	4610      	mov	r0, r2
 8005f46:	4619      	mov	r1, r3
 8005f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	61fa      	str	r2, [r7, #28]
 8005f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f54:	f7fa fcda 	bl	800090c <__aeabi_uldivmod>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f7a:	e002      	b.n	8005f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3750      	adds	r7, #80	; 0x50
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f8e:	bf00      	nop
 8005f90:	40023800 	.word	0x40023800
 8005f94:	00f42400 	.word	0x00f42400
 8005f98:	007a1200 	.word	0x007a1200

08005f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000000 	.word	0x20000000

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fb8:	f7ff fff0 	bl	8005f9c <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	0a9b      	lsrs	r3, r3, #10
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4903      	ldr	r1, [pc, #12]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	0800a6c0 	.word	0x0800a6c0

08005fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fe0:	f7ff ffdc 	bl	8005f9c <HAL_RCC_GetHCLKFreq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	0b5b      	lsrs	r3, r3, #13
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4903      	ldr	r1, [pc, #12]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ff2:	5ccb      	ldrb	r3, [r1, r3]
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40023800 	.word	0x40023800
 8006000:	0800a6c0 	.word	0x0800a6c0

08006004 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	220f      	movs	r2, #15
 8006012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006014:	4b12      	ldr	r3, [pc, #72]	; (8006060 <HAL_RCC_GetClockConfig+0x5c>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0203 	and.w	r2, r3, #3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <HAL_RCC_GetClockConfig+0x5c>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <HAL_RCC_GetClockConfig+0x5c>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <HAL_RCC_GetClockConfig+0x5c>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	08db      	lsrs	r3, r3, #3
 800603e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_RCC_GetClockConfig+0x60>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 020f 	and.w	r2, r3, #15
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	601a      	str	r2, [r3, #0]
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800
 8006064:	40023c00 	.word	0x40023c00

08006068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006098:	2b00      	cmp	r3, #0
 800609a:	d075      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800609c:	4b91      	ldr	r3, [pc, #580]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060a2:	f7fb fed1 	bl	8001e48 <HAL_GetTick>
 80060a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a8:	e008      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060aa:	f7fb fecd 	bl	8001e48 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e189      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060bc:	4b8a      	ldr	r3, [pc, #552]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f0      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	019a      	lsls	r2, r3, #6
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	071b      	lsls	r3, r3, #28
 80060e0:	4981      	ldr	r1, [pc, #516]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01f      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060f4:	4b7c      	ldr	r3, [pc, #496]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fa:	0f1b      	lsrs	r3, r3, #28
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	019a      	lsls	r2, r3, #6
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	061b      	lsls	r3, r3, #24
 800610e:	431a      	orrs	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	071b      	lsls	r3, r3, #28
 8006114:	4974      	ldr	r1, [pc, #464]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800611c:	4b72      	ldr	r3, [pc, #456]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800611e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006122:	f023 021f 	bic.w	r2, r3, #31
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	3b01      	subs	r3, #1
 800612c:	496e      	ldr	r1, [pc, #440]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00d      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	019a      	lsls	r2, r3, #6
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	061b      	lsls	r3, r3, #24
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	071b      	lsls	r3, r3, #28
 8006154:	4964      	ldr	r1, [pc, #400]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800615c:	4b61      	ldr	r3, [pc, #388]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006162:	f7fb fe71 	bl	8001e48 <HAL_GetTick>
 8006166:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006168:	e008      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800616a:	f7fb fe6d 	bl	8001e48 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e129      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800617c:	4b5a      	ldr	r3, [pc, #360]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800619c:	2b00      	cmp	r3, #0
 800619e:	d079      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80061a0:	4b52      	ldr	r3, [pc, #328]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061a6:	f7fb fe4f 	bl	8001e48 <HAL_GetTick>
 80061aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80061ae:	f7fb fe4b 	bl	8001e48 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e107      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061c0:	4b49      	ldr	r3, [pc, #292]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061cc:	d0ef      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d020      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061da:	4b43      	ldr	r3, [pc, #268]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	0f1b      	lsrs	r3, r3, #28
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	019a      	lsls	r2, r3, #6
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	061b      	lsls	r3, r3, #24
 80061f4:	431a      	orrs	r2, r3
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	071b      	lsls	r3, r3, #28
 80061fa:	493b      	ldr	r1, [pc, #236]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006202:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	3b01      	subs	r3, #1
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	4934      	ldr	r1, [pc, #208]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01e      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006228:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	0e1b      	lsrs	r3, r3, #24
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	019a      	lsls	r2, r3, #6
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	061b      	lsls	r3, r3, #24
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	071b      	lsls	r3, r3, #28
 8006248:	4927      	ldr	r1, [pc, #156]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006250:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	4922      	ldr	r1, [pc, #136]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006260:	4313      	orrs	r3, r2
 8006262:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006266:	4b21      	ldr	r3, [pc, #132]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006268:	2201      	movs	r2, #1
 800626a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800626c:	f7fb fdec 	bl	8001e48 <HAL_GetTick>
 8006270:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006274:	f7fb fde8 	bl	8001e48 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e0a4      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006286:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800628e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006292:	d1ef      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 808b 	beq.w	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	4a0f      	ldr	r2, [pc, #60]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b0:	6413      	str	r3, [r2, #64]	; 0x40
 80062b2:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062be:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a0b      	ldr	r2, [pc, #44]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80062c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062ca:	f7fb fdbd 	bl	8001e48 <HAL_GetTick>
 80062ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062d0:	e010      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062d2:	f7fb fdb9 	bl	8001e48 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d909      	bls.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e075      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80062e4:	42470068 	.word	0x42470068
 80062e8:	40023800 	.word	0x40023800
 80062ec:	42470070 	.word	0x42470070
 80062f0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062f4:	4b38      	ldr	r3, [pc, #224]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0e8      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006308:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02f      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	429a      	cmp	r2, r3
 800631c:	d028      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800631e:	4b2f      	ldr	r3, [pc, #188]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006326:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006328:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800632a:	2201      	movs	r2, #1
 800632c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800632e:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006334:	4a29      	ldr	r2, [pc, #164]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800633a:	4b28      	ldr	r3, [pc, #160]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b01      	cmp	r3, #1
 8006344:	d114      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006346:	f7fb fd7f 	bl	8001e48 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634c:	e00a      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800634e:	f7fb fd7b 	bl	8001e48 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f241 3288 	movw	r2, #5000	; 0x1388
 800635c:	4293      	cmp	r3, r2
 800635e:	d901      	bls.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e035      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006364:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0ee      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800637c:	d10d      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800637e:	4b17      	ldr	r3, [pc, #92]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006392:	4912      	ldr	r1, [pc, #72]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006394:	4313      	orrs	r3, r2
 8006396:	608b      	str	r3, [r1, #8]
 8006398:	e005      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800639a:	4b10      	ldr	r3, [pc, #64]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	4a0f      	ldr	r2, [pc, #60]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063a4:	6093      	str	r3, [r2, #8]
 80063a6:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b2:	490a      	ldr	r1, [pc, #40]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d004      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80063cc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40007000 	.word	0x40007000
 80063dc:	40023800 	.word	0x40023800
 80063e0:	42470e40 	.word	0x42470e40
 80063e4:	424711e0 	.word	0x424711e0

080063e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e025      	b.n	8006448 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d106      	bne.n	8006416 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7fb fb97 	bl	8001b44 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f001 f8dd 	bl	80075e8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	461a      	mov	r2, r3
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	f001 f932 	bl	80076a2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e07b      	b.n	800655a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	2b00      	cmp	r3, #0
 8006468:	d108      	bne.n	800647c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006472:	d009      	beq.n	8006488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	61da      	str	r2, [r3, #28]
 800647a:	e005      	b.n	8006488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d106      	bne.n	80064a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fb fa0a 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	ea42 0103 	orr.w	r1, r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	0c1b      	lsrs	r3, r3, #16
 8006526:	f003 0104 	and.w	r1, r3, #4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	f003 0210 	and.w	r2, r3, #16
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69da      	ldr	r2, [r3, #28]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006548:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e041      	b.n	80065f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7fb f9df 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f000 fa95 	bl	8006ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d001      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e04e      	b.n	80066b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a23      	ldr	r2, [pc, #140]	; (80066c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d022      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0x80>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d01d      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0x80>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d018      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0x80>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1e      	ldr	r2, [pc, #120]	; (80066cc <HAL_TIM_Base_Start_IT+0xcc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0x80>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0x80>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0x80>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0x80>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a18      	ldr	r2, [pc, #96]	; (80066dc <HAL_TIM_Base_Start_IT+0xdc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d111      	bne.n	80066a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b06      	cmp	r3, #6
 8006690:	d010      	beq.n	80066b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0201 	orr.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a2:	e007      	b.n	80066b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40010000 	.word	0x40010000
 80066c8:	40000400 	.word	0x40000400
 80066cc:	40000800 	.word	0x40000800
 80066d0:	40000c00 	.word	0x40000c00
 80066d4:	40010400 	.word	0x40010400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40001800 	.word	0x40001800

080066e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d122      	bne.n	800673c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b02      	cmp	r3, #2
 8006702:	d11b      	bne.n	800673c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0202 	mvn.w	r2, #2
 800670c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f9b5 	bl	8006a92 <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f9a7 	bl	8006a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f9b8 	bl	8006aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b04      	cmp	r3, #4
 8006748:	d122      	bne.n	8006790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b04      	cmp	r3, #4
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0204 	mvn.w	r2, #4
 8006760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f98b 	bl	8006a92 <HAL_TIM_IC_CaptureCallback>
 800677c:	e005      	b.n	800678a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f97d 	bl	8006a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f98e 	bl	8006aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b08      	cmp	r3, #8
 800679c:	d122      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d11b      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0208 	mvn.w	r2, #8
 80067b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2204      	movs	r2, #4
 80067ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f961 	bl	8006a92 <HAL_TIM_IC_CaptureCallback>
 80067d0:	e005      	b.n	80067de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f953 	bl	8006a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f964 	bl	8006aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d122      	bne.n	8006838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d11b      	bne.n	8006838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0210 	mvn.w	r2, #16
 8006808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2208      	movs	r2, #8
 800680e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f937 	bl	8006a92 <HAL_TIM_IC_CaptureCallback>
 8006824:	e005      	b.n	8006832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f929 	bl	8006a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f93a 	bl	8006aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b01      	cmp	r3, #1
 8006844:	d10e      	bne.n	8006864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b01      	cmp	r3, #1
 8006852:	d107      	bne.n	8006864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0201 	mvn.w	r2, #1
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fa fe08 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686e:	2b80      	cmp	r3, #128	; 0x80
 8006870:	d10e      	bne.n	8006890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b80      	cmp	r3, #128	; 0x80
 800687e:	d107      	bne.n	8006890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fae0 	bl	8006e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d10e      	bne.n	80068bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d107      	bne.n	80068bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8ff 	bl	8006aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d10e      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d107      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0220 	mvn.w	r2, #32
 80068e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 faaa 	bl	8006e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIM_ConfigClockSource+0x1c>
 8006908:	2302      	movs	r3, #2
 800690a:	e0b4      	b.n	8006a76 <HAL_TIM_ConfigClockSource+0x186>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800692a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006944:	d03e      	beq.n	80069c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694a:	f200 8087 	bhi.w	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
 800694e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006952:	f000 8086 	beq.w	8006a62 <HAL_TIM_ConfigClockSource+0x172>
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d87f      	bhi.n	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
 800695c:	2b70      	cmp	r3, #112	; 0x70
 800695e:	d01a      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0xa6>
 8006960:	2b70      	cmp	r3, #112	; 0x70
 8006962:	d87b      	bhi.n	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
 8006964:	2b60      	cmp	r3, #96	; 0x60
 8006966:	d050      	beq.n	8006a0a <HAL_TIM_ConfigClockSource+0x11a>
 8006968:	2b60      	cmp	r3, #96	; 0x60
 800696a:	d877      	bhi.n	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
 800696c:	2b50      	cmp	r3, #80	; 0x50
 800696e:	d03c      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0xfa>
 8006970:	2b50      	cmp	r3, #80	; 0x50
 8006972:	d873      	bhi.n	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d058      	beq.n	8006a2a <HAL_TIM_ConfigClockSource+0x13a>
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d86f      	bhi.n	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
 800697c:	2b30      	cmp	r3, #48	; 0x30
 800697e:	d064      	beq.n	8006a4a <HAL_TIM_ConfigClockSource+0x15a>
 8006980:	2b30      	cmp	r3, #48	; 0x30
 8006982:	d86b      	bhi.n	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
 8006984:	2b20      	cmp	r3, #32
 8006986:	d060      	beq.n	8006a4a <HAL_TIM_ConfigClockSource+0x15a>
 8006988:	2b20      	cmp	r3, #32
 800698a:	d867      	bhi.n	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d05c      	beq.n	8006a4a <HAL_TIM_ConfigClockSource+0x15a>
 8006990:	2b10      	cmp	r3, #16
 8006992:	d05a      	beq.n	8006a4a <HAL_TIM_ConfigClockSource+0x15a>
 8006994:	e062      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6899      	ldr	r1, [r3, #8]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f000 f9ad 	bl	8006d04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	609a      	str	r2, [r3, #8]
      break;
 80069c2:	e04f      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6899      	ldr	r1, [r3, #8]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f000 f996 	bl	8006d04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069e6:	609a      	str	r2, [r3, #8]
      break;
 80069e8:	e03c      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6859      	ldr	r1, [r3, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f000 f90a 	bl	8006c10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2150      	movs	r1, #80	; 0x50
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f963 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006a08:	e02c      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6859      	ldr	r1, [r3, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f000 f929 	bl	8006c6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2160      	movs	r1, #96	; 0x60
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f953 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006a28:	e01c      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6859      	ldr	r1, [r3, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f000 f8ea 	bl	8006c10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2140      	movs	r1, #64	; 0x40
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f943 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006a48:	e00c      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4619      	mov	r1, r3
 8006a54:	4610      	mov	r0, r2
 8006a56:	f000 f93a 	bl	8006cce <TIM_ITRx_SetConfig>
      break;
 8006a5a:	e003      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a60:	e000      	b.n	8006a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a40      	ldr	r2, [pc, #256]	; (8006be4 <TIM_Base_SetConfig+0x114>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d013      	beq.n	8006b10 <TIM_Base_SetConfig+0x40>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aee:	d00f      	beq.n	8006b10 <TIM_Base_SetConfig+0x40>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a3d      	ldr	r2, [pc, #244]	; (8006be8 <TIM_Base_SetConfig+0x118>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00b      	beq.n	8006b10 <TIM_Base_SetConfig+0x40>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a3c      	ldr	r2, [pc, #240]	; (8006bec <TIM_Base_SetConfig+0x11c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d007      	beq.n	8006b10 <TIM_Base_SetConfig+0x40>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a3b      	ldr	r2, [pc, #236]	; (8006bf0 <TIM_Base_SetConfig+0x120>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_Base_SetConfig+0x40>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a3a      	ldr	r2, [pc, #232]	; (8006bf4 <TIM_Base_SetConfig+0x124>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d108      	bne.n	8006b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a2f      	ldr	r2, [pc, #188]	; (8006be4 <TIM_Base_SetConfig+0x114>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d02b      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b30:	d027      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a2c      	ldr	r2, [pc, #176]	; (8006be8 <TIM_Base_SetConfig+0x118>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d023      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a2b      	ldr	r2, [pc, #172]	; (8006bec <TIM_Base_SetConfig+0x11c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d01f      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <TIM_Base_SetConfig+0x120>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d01b      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a29      	ldr	r2, [pc, #164]	; (8006bf4 <TIM_Base_SetConfig+0x124>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d017      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a28      	ldr	r2, [pc, #160]	; (8006bf8 <TIM_Base_SetConfig+0x128>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a27      	ldr	r2, [pc, #156]	; (8006bfc <TIM_Base_SetConfig+0x12c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00f      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a26      	ldr	r2, [pc, #152]	; (8006c00 <TIM_Base_SetConfig+0x130>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00b      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a25      	ldr	r2, [pc, #148]	; (8006c04 <TIM_Base_SetConfig+0x134>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d007      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a24      	ldr	r2, [pc, #144]	; (8006c08 <TIM_Base_SetConfig+0x138>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a23      	ldr	r2, [pc, #140]	; (8006c0c <TIM_Base_SetConfig+0x13c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d108      	bne.n	8006b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a0a      	ldr	r2, [pc, #40]	; (8006be4 <TIM_Base_SetConfig+0x114>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d003      	beq.n	8006bc8 <TIM_Base_SetConfig+0xf8>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a0c      	ldr	r2, [pc, #48]	; (8006bf4 <TIM_Base_SetConfig+0x124>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d103      	bne.n	8006bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	615a      	str	r2, [r3, #20]
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40014400 	.word	0x40014400
 8006c00:	40014800 	.word	0x40014800
 8006c04:	40001800 	.word	0x40001800
 8006c08:	40001c00 	.word	0x40001c00
 8006c0c:	40002000 	.word	0x40002000

08006c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f023 0201 	bic.w	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f023 030a 	bic.w	r3, r3, #10
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b087      	sub	sp, #28
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f023 0210 	bic.w	r2, r3, #16
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	031b      	lsls	r3, r3, #12
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006caa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	621a      	str	r2, [r3, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f043 0307 	orr.w	r3, r3, #7
 8006cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	609a      	str	r2, [r3, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	021a      	lsls	r2, r3, #8
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	609a      	str	r2, [r3, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e05a      	b.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d022      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da8:	d01d      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d018      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1a      	ldr	r2, [pc, #104]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10c      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	40010400 	.word	0x40010400
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40001800 	.word	0x40001800

08006e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e03f      	b.n	8006ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fa fd80 	bl	8001990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2224      	movs	r2, #36	; 0x24
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f929 	bl	8007100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695a      	ldr	r2, [r3, #20]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b08a      	sub	sp, #40	; 0x28
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d17c      	bne.n	8007018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_UART_Transmit+0x2c>
 8006f24:	88fb      	ldrh	r3, [r7, #6]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e075      	b.n	800701a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Transmit+0x3e>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e06e      	b.n	800701a <HAL_UART_Transmit+0x11c>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2221      	movs	r2, #33	; 0x21
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f52:	f7fa ff79 	bl	8001e48 <HAL_GetTick>
 8006f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6c:	d108      	bne.n	8006f80 <HAL_UART_Transmit+0x82>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	e003      	b.n	8006f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f90:	e02a      	b.n	8006fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2180      	movs	r1, #128	; 0x80
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f840 	bl	8007022 <UART_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e036      	b.n	800701a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	61bb      	str	r3, [r7, #24]
 8006fc8:	e007      	b.n	8006fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1cf      	bne.n	8006f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2140      	movs	r1, #64	; 0x40
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f810 	bl	8007022 <UART_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e006      	b.n	800701a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b090      	sub	sp, #64	; 0x40
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	603b      	str	r3, [r7, #0]
 800702e:	4613      	mov	r3, r2
 8007030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007032:	e050      	b.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d04c      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800703c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0x30>
 8007042:	f7fa ff01 	bl	8001e48 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800704e:	429a      	cmp	r2, r3
 8007050:	d241      	bcs.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	330c      	adds	r3, #12
 8007070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007072:	637a      	str	r2, [r7, #52]	; 0x34
 8007074:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3314      	adds	r3, #20
 800708c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	613b      	str	r3, [r7, #16]
   return(result);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	63bb      	str	r3, [r7, #56]	; 0x38
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3314      	adds	r3, #20
 80070a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a6:	623a      	str	r2, [r7, #32]
 80070a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	69f9      	ldr	r1, [r7, #28]
 80070ac:	6a3a      	ldr	r2, [r7, #32]
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e00f      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4013      	ands	r3, r2
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	bf0c      	ite	eq
 80070e6:	2301      	moveq	r3, #1
 80070e8:	2300      	movne	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d09f      	beq.n	8007034 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3740      	adds	r7, #64	; 0x40
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007104:	b0c0      	sub	sp, #256	; 0x100
 8007106:	af00      	add	r7, sp, #0
 8007108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	68d9      	ldr	r1, [r3, #12]
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	ea40 0301 	orr.w	r3, r0, r1
 8007128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800712a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	431a      	orrs	r2, r3
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	431a      	orrs	r2, r3
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007158:	f021 010c 	bic.w	r1, r1, #12
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007166:	430b      	orrs	r3, r1
 8007168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	6999      	ldr	r1, [r3, #24]
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	ea40 0301 	orr.w	r3, r0, r1
 8007186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b8f      	ldr	r3, [pc, #572]	; (80073cc <UART_SetConfig+0x2cc>)
 8007190:	429a      	cmp	r2, r3
 8007192:	d005      	beq.n	80071a0 <UART_SetConfig+0xa0>
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b8d      	ldr	r3, [pc, #564]	; (80073d0 <UART_SetConfig+0x2d0>)
 800719c:	429a      	cmp	r2, r3
 800719e:	d104      	bne.n	80071aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fe ff1c 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 80071a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071a8:	e003      	b.n	80071b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071aa:	f7fe ff03 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 80071ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	f040 810c 	bne.w	80073d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	1891      	adds	r1, r2, r2
 80071d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80071da:	415b      	adcs	r3, r3
 80071dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071e2:	4621      	mov	r1, r4
 80071e4:	eb12 0801 	adds.w	r8, r2, r1
 80071e8:	4629      	mov	r1, r5
 80071ea:	eb43 0901 	adc.w	r9, r3, r1
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007202:	4690      	mov	r8, r2
 8007204:	4699      	mov	r9, r3
 8007206:	4623      	mov	r3, r4
 8007208:	eb18 0303 	adds.w	r3, r8, r3
 800720c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007210:	462b      	mov	r3, r5
 8007212:	eb49 0303 	adc.w	r3, r9, r3
 8007216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800722a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800722e:	460b      	mov	r3, r1
 8007230:	18db      	adds	r3, r3, r3
 8007232:	653b      	str	r3, [r7, #80]	; 0x50
 8007234:	4613      	mov	r3, r2
 8007236:	eb42 0303 	adc.w	r3, r2, r3
 800723a:	657b      	str	r3, [r7, #84]	; 0x54
 800723c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007244:	f7f9 fb62 	bl	800090c <__aeabi_uldivmod>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <UART_SetConfig+0x2d4>)
 800724e:	fba3 2302 	umull	r2, r3, r3, r2
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	011c      	lsls	r4, r3, #4
 8007256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725a:	2200      	movs	r2, #0
 800725c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	1891      	adds	r1, r2, r2
 800726e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007270:	415b      	adcs	r3, r3
 8007272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007278:	4641      	mov	r1, r8
 800727a:	eb12 0a01 	adds.w	sl, r2, r1
 800727e:	4649      	mov	r1, r9
 8007280:	eb43 0b01 	adc.w	fp, r3, r1
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007298:	4692      	mov	sl, r2
 800729a:	469b      	mov	fp, r3
 800729c:	4643      	mov	r3, r8
 800729e:	eb1a 0303 	adds.w	r3, sl, r3
 80072a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072a6:	464b      	mov	r3, r9
 80072a8:	eb4b 0303 	adc.w	r3, fp, r3
 80072ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072c4:	460b      	mov	r3, r1
 80072c6:	18db      	adds	r3, r3, r3
 80072c8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ca:	4613      	mov	r3, r2
 80072cc:	eb42 0303 	adc.w	r3, r2, r3
 80072d0:	647b      	str	r3, [r7, #68]	; 0x44
 80072d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072da:	f7f9 fb17 	bl	800090c <__aeabi_uldivmod>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	4b3b      	ldr	r3, [pc, #236]	; (80073d4 <UART_SetConfig+0x2d4>)
 80072e6:	fba3 2301 	umull	r2, r3, r3, r1
 80072ea:	095b      	lsrs	r3, r3, #5
 80072ec:	2264      	movs	r2, #100	; 0x64
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	1acb      	subs	r3, r1, r3
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <UART_SetConfig+0x2d4>)
 80072fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007308:	441c      	add	r4, r3
 800730a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800730e:	2200      	movs	r2, #0
 8007310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800731c:	4642      	mov	r2, r8
 800731e:	464b      	mov	r3, r9
 8007320:	1891      	adds	r1, r2, r2
 8007322:	63b9      	str	r1, [r7, #56]	; 0x38
 8007324:	415b      	adcs	r3, r3
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800732c:	4641      	mov	r1, r8
 800732e:	1851      	adds	r1, r2, r1
 8007330:	6339      	str	r1, [r7, #48]	; 0x30
 8007332:	4649      	mov	r1, r9
 8007334:	414b      	adcs	r3, r1
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007344:	4659      	mov	r1, fp
 8007346:	00cb      	lsls	r3, r1, #3
 8007348:	4651      	mov	r1, sl
 800734a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800734e:	4651      	mov	r1, sl
 8007350:	00ca      	lsls	r2, r1, #3
 8007352:	4610      	mov	r0, r2
 8007354:	4619      	mov	r1, r3
 8007356:	4603      	mov	r3, r0
 8007358:	4642      	mov	r2, r8
 800735a:	189b      	adds	r3, r3, r2
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007360:	464b      	mov	r3, r9
 8007362:	460a      	mov	r2, r1
 8007364:	eb42 0303 	adc.w	r3, r2, r3
 8007368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800737c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007380:	460b      	mov	r3, r1
 8007382:	18db      	adds	r3, r3, r3
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
 8007386:	4613      	mov	r3, r2
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800738e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007396:	f7f9 fab9 	bl	800090c <__aeabi_uldivmod>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <UART_SetConfig+0x2d4>)
 80073a0:	fba3 1302 	umull	r1, r3, r3, r2
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	2164      	movs	r1, #100	; 0x64
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	3332      	adds	r3, #50	; 0x32
 80073b2:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <UART_SetConfig+0x2d4>)
 80073b4:	fba2 2303 	umull	r2, r3, r2, r3
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	f003 0207 	and.w	r2, r3, #7
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4422      	add	r2, r4
 80073c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073c8:	e106      	b.n	80075d8 <UART_SetConfig+0x4d8>
 80073ca:	bf00      	nop
 80073cc:	40011000 	.word	0x40011000
 80073d0:	40011400 	.word	0x40011400
 80073d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	1891      	adds	r1, r2, r2
 80073f0:	6239      	str	r1, [r7, #32]
 80073f2:	415b      	adcs	r3, r3
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
 80073f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073fa:	4641      	mov	r1, r8
 80073fc:	1854      	adds	r4, r2, r1
 80073fe:	4649      	mov	r1, r9
 8007400:	eb43 0501 	adc.w	r5, r3, r1
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	f04f 0300 	mov.w	r3, #0
 800740c:	00eb      	lsls	r3, r5, #3
 800740e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007412:	00e2      	lsls	r2, r4, #3
 8007414:	4614      	mov	r4, r2
 8007416:	461d      	mov	r5, r3
 8007418:	4643      	mov	r3, r8
 800741a:	18e3      	adds	r3, r4, r3
 800741c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007420:	464b      	mov	r3, r9
 8007422:	eb45 0303 	adc.w	r3, r5, r3
 8007426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007446:	4629      	mov	r1, r5
 8007448:	008b      	lsls	r3, r1, #2
 800744a:	4621      	mov	r1, r4
 800744c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007450:	4621      	mov	r1, r4
 8007452:	008a      	lsls	r2, r1, #2
 8007454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007458:	f7f9 fa58 	bl	800090c <__aeabi_uldivmod>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4b60      	ldr	r3, [pc, #384]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007462:	fba3 2302 	umull	r2, r3, r3, r2
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	011c      	lsls	r4, r3, #4
 800746a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800747c:	4642      	mov	r2, r8
 800747e:	464b      	mov	r3, r9
 8007480:	1891      	adds	r1, r2, r2
 8007482:	61b9      	str	r1, [r7, #24]
 8007484:	415b      	adcs	r3, r3
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800748c:	4641      	mov	r1, r8
 800748e:	1851      	adds	r1, r2, r1
 8007490:	6139      	str	r1, [r7, #16]
 8007492:	4649      	mov	r1, r9
 8007494:	414b      	adcs	r3, r1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074a4:	4659      	mov	r1, fp
 80074a6:	00cb      	lsls	r3, r1, #3
 80074a8:	4651      	mov	r1, sl
 80074aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ae:	4651      	mov	r1, sl
 80074b0:	00ca      	lsls	r2, r1, #3
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	4642      	mov	r2, r8
 80074ba:	189b      	adds	r3, r3, r2
 80074bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c0:	464b      	mov	r3, r9
 80074c2:	460a      	mov	r2, r1
 80074c4:	eb42 0303 	adc.w	r3, r2, r3
 80074c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80074d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074e4:	4649      	mov	r1, r9
 80074e6:	008b      	lsls	r3, r1, #2
 80074e8:	4641      	mov	r1, r8
 80074ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ee:	4641      	mov	r1, r8
 80074f0:	008a      	lsls	r2, r1, #2
 80074f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074f6:	f7f9 fa09 	bl	800090c <__aeabi_uldivmod>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007502:	fba3 2301 	umull	r2, r3, r3, r1
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	2264      	movs	r2, #100	; 0x64
 800750a:	fb02 f303 	mul.w	r3, r2, r3
 800750e:	1acb      	subs	r3, r1, r3
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	3332      	adds	r3, #50	; 0x32
 8007514:	4a33      	ldr	r2, [pc, #204]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007520:	441c      	add	r4, r3
 8007522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007526:	2200      	movs	r2, #0
 8007528:	673b      	str	r3, [r7, #112]	; 0x70
 800752a:	677a      	str	r2, [r7, #116]	; 0x74
 800752c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	1891      	adds	r1, r2, r2
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	415b      	adcs	r3, r3
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007540:	4641      	mov	r1, r8
 8007542:	1851      	adds	r1, r2, r1
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	4649      	mov	r1, r9
 8007548:	414b      	adcs	r3, r1
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007558:	4659      	mov	r1, fp
 800755a:	00cb      	lsls	r3, r1, #3
 800755c:	4651      	mov	r1, sl
 800755e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007562:	4651      	mov	r1, sl
 8007564:	00ca      	lsls	r2, r1, #3
 8007566:	4610      	mov	r0, r2
 8007568:	4619      	mov	r1, r3
 800756a:	4603      	mov	r3, r0
 800756c:	4642      	mov	r2, r8
 800756e:	189b      	adds	r3, r3, r2
 8007570:	66bb      	str	r3, [r7, #104]	; 0x68
 8007572:	464b      	mov	r3, r9
 8007574:	460a      	mov	r2, r1
 8007576:	eb42 0303 	adc.w	r3, r2, r3
 800757a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	663b      	str	r3, [r7, #96]	; 0x60
 8007586:	667a      	str	r2, [r7, #100]	; 0x64
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007594:	4649      	mov	r1, r9
 8007596:	008b      	lsls	r3, r1, #2
 8007598:	4641      	mov	r1, r8
 800759a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800759e:	4641      	mov	r1, r8
 80075a0:	008a      	lsls	r2, r1, #2
 80075a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075a6:	f7f9 f9b1 	bl	800090c <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <UART_SetConfig+0x4e4>)
 80075b0:	fba3 1302 	umull	r1, r3, r3, r2
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	2164      	movs	r1, #100	; 0x64
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	3332      	adds	r3, #50	; 0x32
 80075c2:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <UART_SetConfig+0x4e4>)
 80075c4:	fba2 2303 	umull	r2, r3, r2, r3
 80075c8:	095b      	lsrs	r3, r3, #5
 80075ca:	f003 020f 	and.w	r2, r3, #15
 80075ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4422      	add	r2, r4
 80075d6:	609a      	str	r2, [r3, #8]
}
 80075d8:	bf00      	nop
 80075da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075de:	46bd      	mov	sp, r7
 80075e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e4:	51eb851f 	.word	0x51eb851f

080075e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d123      	bne.n	8007642 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007602:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	6851      	ldr	r1, [r2, #4]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6892      	ldr	r2, [r2, #8]
 800760e:	4311      	orrs	r1, r2
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	68d2      	ldr	r2, [r2, #12]
 8007614:	4311      	orrs	r1, r2
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	6912      	ldr	r2, [r2, #16]
 800761a:	4311      	orrs	r1, r2
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	6952      	ldr	r2, [r2, #20]
 8007620:	4311      	orrs	r1, r2
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	6992      	ldr	r2, [r2, #24]
 8007626:	4311      	orrs	r1, r2
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	69d2      	ldr	r2, [r2, #28]
 800762c:	4311      	orrs	r1, r2
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	6a12      	ldr	r2, [r2, #32]
 8007632:	4311      	orrs	r1, r2
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007638:	430a      	orrs	r2, r1
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	e028      	b.n	8007694 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	69d9      	ldr	r1, [r3, #28]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	4319      	orrs	r1, r3
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	430b      	orrs	r3, r1
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	6851      	ldr	r1, [r2, #4]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	6892      	ldr	r2, [r2, #8]
 8007674:	4311      	orrs	r1, r2
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	68d2      	ldr	r2, [r2, #12]
 800767a:	4311      	orrs	r1, r2
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	6912      	ldr	r2, [r2, #16]
 8007680:	4311      	orrs	r1, r2
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	6952      	ldr	r2, [r2, #20]
 8007686:	4311      	orrs	r1, r2
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	6992      	ldr	r2, [r2, #24]
 800768c:	430a      	orrs	r2, r1
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d128      	bne.n	8007706 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	1e59      	subs	r1, r3, #1
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	4319      	orrs	r1, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	4319      	orrs	r1, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	3b01      	subs	r3, #1
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	4319      	orrs	r1, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	4319      	orrs	r1, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	051b      	lsls	r3, r3, #20
 80076f2:	4319      	orrs	r1, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	061b      	lsls	r3, r3, #24
 80076fc:	430b      	orrs	r3, r1
 80076fe:	431a      	orrs	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	e02f      	b.n	8007766 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800770e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	68d2      	ldr	r2, [r2, #12]
 8007716:	3a01      	subs	r2, #1
 8007718:	0311      	lsls	r1, r2, #12
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	6952      	ldr	r2, [r2, #20]
 800771e:	3a01      	subs	r2, #1
 8007720:	0512      	lsls	r2, r2, #20
 8007722:	430a      	orrs	r2, r1
 8007724:	431a      	orrs	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	1e59      	subs	r1, r3, #1
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	3b01      	subs	r3, #1
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	4319      	orrs	r1, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	3b01      	subs	r3, #1
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	4319      	orrs	r1, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	3b01      	subs	r3, #1
 8007752:	041b      	lsls	r3, r3, #16
 8007754:	4319      	orrs	r1, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	3b01      	subs	r3, #1
 800775c:	061b      	lsls	r3, r3, #24
 800775e:	430b      	orrs	r3, r1
 8007760:	431a      	orrs	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007774:	b084      	sub	sp, #16
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	f107 001c 	add.w	r0, r7, #28
 8007782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2b01      	cmp	r3, #1
 800778a:	d122      	bne.n	80077d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d105      	bne.n	80077c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f9c0 	bl	8007b4c <USB_CoreReset>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73fb      	strb	r3, [r7, #15]
 80077d0:	e01a      	b.n	8007808 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9b4 	bl	8007b4c <USB_CoreReset>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
 80077fa:	e005      	b.n	8007808 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	2b01      	cmp	r3, #1
 800780c:	d10b      	bne.n	8007826 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f043 0206 	orr.w	r2, r3, #6
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f043 0220 	orr.w	r2, r3, #32
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007832:	b004      	add	sp, #16
 8007834:	4770      	bx	lr

08007836 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f043 0201 	orr.w	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f023 0201 	bic.w	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d115      	bne.n	80078c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078a8:	2001      	movs	r0, #1
 80078aa:	f7fa fad9 	bl	8001e60 <HAL_Delay>
      ms++;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3301      	adds	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f93a 	bl	8007b2e <USB_GetMode>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d01e      	beq.n	80078fe <USB_SetCurrentMode+0x84>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b31      	cmp	r3, #49	; 0x31
 80078c4:	d9f0      	bls.n	80078a8 <USB_SetCurrentMode+0x2e>
 80078c6:	e01a      	b.n	80078fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d115      	bne.n	80078fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078da:	2001      	movs	r0, #1
 80078dc:	f7fa fac0 	bl	8001e60 <HAL_Delay>
      ms++;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3301      	adds	r3, #1
 80078e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f921 	bl	8007b2e <USB_GetMode>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <USB_SetCurrentMode+0x84>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b31      	cmp	r3, #49	; 0x31
 80078f6:	d9f0      	bls.n	80078da <USB_SetCurrentMode+0x60>
 80078f8:	e001      	b.n	80078fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e005      	b.n	800790a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b32      	cmp	r3, #50	; 0x32
 8007902:	d101      	bne.n	8007908 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e000      	b.n	800790a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3301      	adds	r3, #1
 8007926:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <USB_FlushTxFifo+0x64>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d901      	bls.n	8007934 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e01b      	b.n	800796c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	daf2      	bge.n	8007922 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	019b      	lsls	r3, r3, #6
 8007944:	f043 0220 	orr.w	r2, r3, #32
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3301      	adds	r3, #1
 8007950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4a08      	ldr	r2, [pc, #32]	; (8007978 <USB_FlushTxFifo+0x64>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d901      	bls.n	800795e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e006      	b.n	800796c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b20      	cmp	r3, #32
 8007968:	d0f0      	beq.n	800794c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	00030d40 	.word	0x00030d40

0800797c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a11      	ldr	r2, [pc, #68]	; (80079d8 <USB_FlushRxFifo+0x5c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d901      	bls.n	800799a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e018      	b.n	80079cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	daf2      	bge.n	8007988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2210      	movs	r2, #16
 80079aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <USB_FlushRxFifo+0x5c>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e006      	b.n	80079cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0310 	and.w	r3, r3, #16
 80079c6:	2b10      	cmp	r3, #16
 80079c8:	d0f0      	beq.n	80079ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	00030d40 	.word	0x00030d40

080079dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079dc:	b480      	push	{r7}
 80079de:	b089      	sub	sp, #36	; 0x24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4611      	mov	r1, r2
 80079e8:	461a      	mov	r2, r3
 80079ea:	460b      	mov	r3, r1
 80079ec:	71fb      	strb	r3, [r7, #7]
 80079ee:	4613      	mov	r3, r2
 80079f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d123      	bne.n	8007a4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a02:	88bb      	ldrh	r3, [r7, #4]
 8007a04:	3303      	adds	r3, #3
 8007a06:	089b      	lsrs	r3, r3, #2
 8007a08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	e018      	b.n	8007a42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	031a      	lsls	r2, r3, #12
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	3301      	adds	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	3301      	adds	r3, #1
 8007a34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d3e2      	bcc.n	8007a10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3724      	adds	r7, #36	; 0x24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b08b      	sub	sp, #44	; 0x2c
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a6e:	88fb      	ldrh	r3, [r7, #6]
 8007a70:	089b      	lsrs	r3, r3, #2
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a7e:	2300      	movs	r3, #0
 8007a80:	623b      	str	r3, [r7, #32]
 8007a82:	e014      	b.n	8007aae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	3301      	adds	r3, #1
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	3301      	adds	r3, #1
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	623b      	str	r3, [r7, #32]
 8007aae:	6a3a      	ldr	r2, [r7, #32]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d3e6      	bcc.n	8007a84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ab6:	8bfb      	ldrh	r3, [r7, #30]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01e      	beq.n	8007afa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f107 0310 	add.w	r3, r7, #16
 8007acc:	6812      	ldr	r2, [r2, #0]
 8007ace:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	701a      	strb	r2, [r3, #0]
      i++;
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	3301      	adds	r3, #1
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007aee:	8bfb      	ldrh	r3, [r7, #30]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007af4:	8bfb      	ldrh	r3, [r7, #30]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1ea      	bne.n	8007ad0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	372c      	adds	r7, #44	; 0x2c
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b20:	68fb      	ldr	r3, [r7, #12]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
	...

08007b4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4a13      	ldr	r2, [pc, #76]	; (8007bb0 <USB_CoreReset+0x64>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d901      	bls.n	8007b6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e01b      	b.n	8007ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	daf2      	bge.n	8007b58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f043 0201 	orr.w	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <USB_CoreReset+0x64>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d901      	bls.n	8007b94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e006      	b.n	8007ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d0f0      	beq.n	8007b82 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	00030d40 	.word	0x00030d40

08007bb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b086      	sub	sp, #24
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d018      	beq.n	8007c3c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d10a      	bne.n	8007c26 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c1e:	f043 0304 	orr.w	r3, r3, #4
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	e014      	b.n	8007c50 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c34:	f023 0304 	bic.w	r3, r3, #4
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	e009      	b.n	8007c50 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c4a:	f023 0304 	bic.w	r3, r3, #4
 8007c4e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c50:	2110      	movs	r1, #16
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff fe5e 	bl	8007914 <USB_FlushTxFifo>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff fe8a 	bl	800797c <USB_FlushRxFifo>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c72:	2300      	movs	r3, #0
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	e015      	b.n	8007ca4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c84:	461a      	mov	r2, r3
 8007c86:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c98:	461a      	mov	r2, r3
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d3e5      	bcc.n	8007c78 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00b      	beq.n	8007cde <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ccc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a13      	ldr	r2, [pc, #76]	; (8007d20 <USB_HostInit+0x16c>)
 8007cd2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a13      	ldr	r2, [pc, #76]	; (8007d24 <USB_HostInit+0x170>)
 8007cd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007cdc:	e009      	b.n	8007cf2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2280      	movs	r2, #128	; 0x80
 8007ce2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a10      	ldr	r2, [pc, #64]	; (8007d28 <USB_HostInit+0x174>)
 8007ce8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a0f      	ldr	r2, [pc, #60]	; (8007d2c <USB_HostInit+0x178>)
 8007cee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d105      	bne.n	8007d04 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	f043 0210 	orr.w	r2, r3, #16
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699a      	ldr	r2, [r3, #24]
 8007d08:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <USB_HostInit+0x17c>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d1c:	b004      	add	sp, #16
 8007d1e:	4770      	bx	lr
 8007d20:	01000200 	.word	0x01000200
 8007d24:	00e00300 	.word	0x00e00300
 8007d28:	00600080 	.word	0x00600080
 8007d2c:	004000e0 	.word	0x004000e0
 8007d30:	a3200008 	.word	0xa3200008

08007d34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d107      	bne.n	8007d86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007d82:	6053      	str	r3, [r2, #4]
 8007d84:	e009      	b.n	8007d9a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d106      	bne.n	8007d9a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d92:	461a      	mov	r2, r3
 8007d94:	f241 7370 	movw	r3, #6000	; 0x1770
 8007d98:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007dcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <USB_DriveVbus+0x44>
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d106      	bne.n	8007dec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007de6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df6:	d109      	bne.n	8007e0c <USB_DriveVbus+0x64>
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d106      	bne.n	8007e0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	0c5b      	lsrs	r3, r3, #17
 8007e38:	f003 0303 	and.w	r3, r3, #3
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	b29b      	uxth	r3, r3
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
	...

08007e6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	4608      	mov	r0, r1
 8007e76:	4611      	mov	r1, r2
 8007e78:	461a      	mov	r2, r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	70fb      	strb	r3, [r7, #3]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70bb      	strb	r3, [r7, #2]
 8007e82:	4613      	mov	r3, r2
 8007e84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007ea2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d87e      	bhi.n	8007fa8 <USB_HC_Init+0x13c>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <USB_HC_Init+0x44>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007ec1 	.word	0x08007ec1
 8007eb4:	08007f6b 	.word	0x08007f6b
 8007eb8:	08007ec1 	.word	0x08007ec1
 8007ebc:	08007f2d 	.word	0x08007f2d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f240 439d 	movw	r3, #1181	; 0x49d
 8007ed2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007ed4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da10      	bge.n	8007efe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007efa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007efc:	e057      	b.n	8007fae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d051      	beq.n	8007fae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007f0a:	78fb      	ldrb	r3, [r7, #3]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	78fa      	ldrb	r2, [r7, #3]
 8007f1a:	0151      	lsls	r1, r2, #5
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	440a      	add	r2, r1
 8007f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f28:	60d3      	str	r3, [r2, #12]
      break;
 8007f2a:	e040      	b.n	8007fae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f240 639d 	movw	r3, #1693	; 0x69d
 8007f3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	da34      	bge.n	8007fb2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	78fa      	ldrb	r2, [r7, #3]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f66:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007f68:	e023      	b.n	8007fb2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f76:	461a      	mov	r2, r3
 8007f78:	f240 2325 	movw	r3, #549	; 0x225
 8007f7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da17      	bge.n	8007fb6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007f86:	78fb      	ldrb	r3, [r7, #3]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	78fa      	ldrb	r2, [r7, #3]
 8007f96:	0151      	lsls	r1, r2, #5
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007fa4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007fa6:	e006      	b.n	8007fb6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	77fb      	strb	r3, [r7, #31]
      break;
 8007fac:	e004      	b.n	8007fb8 <USB_HC_Init+0x14c>
      break;
 8007fae:	bf00      	nop
 8007fb0:	e002      	b.n	8007fb8 <USB_HC_Init+0x14c>
      break;
 8007fb2:	bf00      	nop
 8007fb4:	e000      	b.n	8007fb8 <USB_HC_Init+0x14c>
      break;
 8007fb6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd2:	f043 0302 	orr.w	r3, r3, #2
 8007fd6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fde:	699a      	ldr	r2, [r3, #24]
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fec:	6939      	ldr	r1, [r7, #16]
 8007fee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008002:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008006:	2b00      	cmp	r3, #0
 8008008:	da03      	bge.n	8008012 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800800a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	e001      	b.n	8008016 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff feff 	bl	8007e1a <USB_GetHostSpeed>
 800801c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800801e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008022:	2b02      	cmp	r3, #2
 8008024:	d106      	bne.n	8008034 <USB_HC_Init+0x1c8>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d003      	beq.n	8008034 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800802c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	e001      	b.n	8008038 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008038:	787b      	ldrb	r3, [r7, #1]
 800803a:	059b      	lsls	r3, r3, #22
 800803c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008040:	78bb      	ldrb	r3, [r7, #2]
 8008042:	02db      	lsls	r3, r3, #11
 8008044:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008048:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800804a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800804e:	049b      	lsls	r3, r3, #18
 8008050:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008054:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008056:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008058:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800805c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	0159      	lsls	r1, r3, #5
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	440b      	add	r3, r1
 800806a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008074:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008076:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800807a:	2b03      	cmp	r3, #3
 800807c:	d003      	beq.n	8008086 <USB_HC_Init+0x21a>
 800807e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008082:	2b01      	cmp	r3, #1
 8008084:	d10f      	bne.n	80080a6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4413      	add	r3, r2
 800808e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	78fa      	ldrb	r2, [r7, #3]
 8008096:	0151      	lsls	r1, r2, #5
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	440a      	add	r2, r1
 800809c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80080a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3720      	adds	r7, #32
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08c      	sub	sp, #48	; 0x30
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80080c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d02d      	beq.n	8008136 <USB_HC_StartXfer+0x86>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d129      	bne.n	8008136 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d117      	bne.n	8008118 <USB_HC_StartXfer+0x68>
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	79db      	ldrb	r3, [r3, #7]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <USB_HC_StartXfer+0x48>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	79db      	ldrb	r3, [r3, #7]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d10f      	bne.n	8008118 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	6a3a      	ldr	r2, [r7, #32]
 800810c:	440a      	add	r2, r1
 800810e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10b      	bne.n	8008136 <USB_HC_StartXfer+0x86>
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	795b      	ldrb	r3, [r3, #5]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d107      	bne.n	8008136 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	4619      	mov	r1, r3
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fa0f 	bl	8008550 <USB_DoPing>
      return HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	e0f8      	b.n	8008328 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d018      	beq.n	8008170 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	8912      	ldrh	r2, [r2, #8]
 8008146:	4413      	add	r3, r2
 8008148:	3b01      	subs	r3, #1
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	8912      	ldrh	r2, [r2, #8]
 800814e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008152:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008154:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008156:	8b7b      	ldrh	r3, [r7, #26]
 8008158:	429a      	cmp	r2, r3
 800815a:	d90b      	bls.n	8008174 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800815c:	8b7b      	ldrh	r3, [r7, #26]
 800815e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008160:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	8912      	ldrh	r2, [r2, #8]
 8008166:	fb03 f202 	mul.w	r2, r3, r2
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	611a      	str	r2, [r3, #16]
 800816e:	e001      	b.n	8008174 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008170:	2301      	movs	r3, #1
 8008172:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	78db      	ldrb	r3, [r3, #3]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800817c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	8912      	ldrh	r2, [r2, #8]
 8008182:	fb03 f202 	mul.w	r2, r3, r2
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	611a      	str	r2, [r3, #16]
 800818a:	e003      	b.n	8008194 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	695a      	ldr	r2, [r3, #20]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800819c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800819e:	04d9      	lsls	r1, r3, #19
 80081a0:	4b63      	ldr	r3, [pc, #396]	; (8008330 <USB_HC_StartXfer+0x280>)
 80081a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	7a9b      	ldrb	r3, [r3, #10]
 80081aa:	075b      	lsls	r3, r3, #29
 80081ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081b0:	69f9      	ldr	r1, [r7, #28]
 80081b2:	0148      	lsls	r0, r1, #5
 80081b4:	6a39      	ldr	r1, [r7, #32]
 80081b6:	4401      	add	r1, r0
 80081b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	68d9      	ldr	r1, [r3, #12]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d6:	460a      	mov	r2, r1
 80081d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bf0c      	ite	eq
 80081ea:	2301      	moveq	r3, #1
 80081ec:	2300      	movne	r3, #0
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69fa      	ldr	r2, [r7, #28]
 8008202:	0151      	lsls	r1, r2, #5
 8008204:	6a3a      	ldr	r2, [r7, #32]
 8008206:	440a      	add	r2, r1
 8008208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800820c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008210:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	4413      	add	r3, r2
 800821a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	7e7b      	ldrb	r3, [r7, #25]
 8008222:	075b      	lsls	r3, r3, #29
 8008224:	69f9      	ldr	r1, [r7, #28]
 8008226:	0148      	lsls	r0, r1, #5
 8008228:	6a39      	ldr	r1, [r7, #32]
 800822a:	4401      	add	r1, r0
 800822c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008230:	4313      	orrs	r3, r2
 8008232:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	4413      	add	r3, r2
 800823c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800824a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	78db      	ldrb	r3, [r3, #3]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	e003      	b.n	8008266 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008264:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800826c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	4413      	add	r3, r2
 8008276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827a:	461a      	mov	r2, r3
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	e04e      	b.n	8008328 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d149      	bne.n	8008326 <USB_HC_StartXfer+0x276>
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d045      	beq.n	8008326 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	79db      	ldrb	r3, [r3, #7]
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d830      	bhi.n	8008304 <USB_HC_StartXfer+0x254>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USB_HC_StartXfer+0x1f8>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082dd 	.word	0x080082dd
 80082b0:	080082b9 	.word	0x080082b9
 80082b4:	080082dd 	.word	0x080082dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	3303      	adds	r3, #3
 80082be:	089b      	lsrs	r3, r3, #2
 80082c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80082c2:	8afa      	ldrh	r2, [r7, #22]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d91c      	bls.n	8008308 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f043 0220 	orr.w	r2, r3, #32
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80082da:	e015      	b.n	8008308 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	3303      	adds	r3, #3
 80082e2:	089b      	lsrs	r3, r3, #2
 80082e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80082e6:	8afa      	ldrh	r2, [r7, #22]
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d90a      	bls.n	800830c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	619a      	str	r2, [r3, #24]
        }
        break;
 8008302:	e003      	b.n	800830c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008304:	bf00      	nop
 8008306:	e002      	b.n	800830e <USB_HC_StartXfer+0x25e>
        break;
 8008308:	bf00      	nop
 800830a:	e000      	b.n	800830e <USB_HC_StartXfer+0x25e>
        break;
 800830c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	68d9      	ldr	r1, [r3, #12]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	785a      	ldrb	r2, [r3, #1]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	b29b      	uxth	r3, r3
 800831c:	2000      	movs	r0, #0
 800831e:	9000      	str	r0, [sp, #0]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff fb5b 	bl	80079dc <USB_WritePacket>
  }

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3728      	adds	r7, #40	; 0x28
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	1ff80000 	.word	0x1ff80000

08008334 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	b29b      	uxth	r3, r3
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008356:	b480      	push	{r7}
 8008358:	b089      	sub	sp, #36	; 0x24
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	0c9b      	lsrs	r3, r3, #18
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	4413      	add	r3, r2
 800838c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	0fdb      	lsrs	r3, r3, #31
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	d104      	bne.n	80083b0 <USB_HC_Halt+0x5a>
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e0c8      	b.n	8008542 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <USB_HC_Halt+0x66>
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d163      	bne.n	8008484 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	0151      	lsls	r1, r2, #5
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	440a      	add	r2, r1
 80083d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f040 80ab 	bne.w	8008540 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d133      	bne.n	800845e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	440a      	add	r2, r1
 800840c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008414:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4413      	add	r3, r2
 800841e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	440a      	add	r2, r1
 800842c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008434:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008442:	d81d      	bhi.n	8008480 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	4413      	add	r3, r2
 800844c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800845a:	d0ec      	beq.n	8008436 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800845c:	e070      	b.n	8008540 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	440a      	add	r2, r1
 8008474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800847c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800847e:	e05f      	b.n	8008540 <USB_HC_Halt+0x1ea>
            break;
 8008480:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008482:	e05d      	b.n	8008540 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	440a      	add	r2, r1
 800849a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800849e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d133      	bne.n	800851c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3301      	adds	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008500:	d81d      	bhi.n	800853e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008518:	d0ec      	beq.n	80084f4 <USB_HC_Halt+0x19e>
 800851a:	e011      	b.n	8008540 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	440a      	add	r2, r1
 8008532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	e000      	b.n	8008540 <USB_HC_Halt+0x1ea>
          break;
 800853e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3724      	adds	r7, #36	; 0x24
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008564:	2301      	movs	r3, #1
 8008566:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	04da      	lsls	r2, r3, #19
 800856c:	4b15      	ldr	r3, [pc, #84]	; (80085c4 <USB_DoPing+0x74>)
 800856e:	4013      	ands	r3, r2
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	0151      	lsls	r1, r2, #5
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	440a      	add	r2, r1
 8008578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800857c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008580:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008598:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ae:	461a      	mov	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	1ff80000 	.word	0x1ff80000

080085c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff f93b 	bl	8007858 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085e2:	2110      	movs	r1, #16
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff f995 	bl	8007914 <USB_FlushTxFifo>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7ff f9c1 	bl	800797c <USB_FlushRxFifo>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008604:	2300      	movs	r3, #0
 8008606:	61bb      	str	r3, [r7, #24]
 8008608:	e01f      	b.n	800864a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	4413      	add	r3, r2
 8008612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008620:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008628:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008630:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	4413      	add	r3, r2
 800863a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863e:	461a      	mov	r2, r3
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	3301      	adds	r3, #1
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b0f      	cmp	r3, #15
 800864e:	d9dc      	bls.n	800860a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008650:	2300      	movs	r3, #0
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	e034      	b.n	80086c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	4413      	add	r3, r2
 800865e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800866c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008674:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800867c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	461a      	mov	r2, r3
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800869c:	d80c      	bhi.n	80086b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b4:	d0ec      	beq.n	8008690 <USB_StopHost+0xc8>
 80086b6:	e000      	b.n	80086ba <USB_StopHost+0xf2>
        break;
 80086b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	3301      	adds	r3, #1
 80086be:	61bb      	str	r3, [r7, #24]
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	2b0f      	cmp	r3, #15
 80086c4:	d9c7      	bls.n	8008656 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086cc:	461a      	mov	r2, r3
 80086ce:	f04f 33ff 	mov.w	r3, #4294967295
 80086d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
 80086da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff f8aa 	bl	8007836 <USB_EnableGlobalInt>

  return ret;
 80086e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80086ec:	b590      	push	{r4, r7, lr}
 80086ee:	b089      	sub	sp, #36	; 0x24
 80086f0:	af04      	add	r7, sp, #16
 80086f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80086f4:	2301      	movs	r3, #1
 80086f6:	2202      	movs	r2, #2
 80086f8:	2102      	movs	r1, #2
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fc66 	bl	8008fcc <USBH_FindInterface>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	2bff      	cmp	r3, #255	; 0xff
 8008708:	d002      	beq.n	8008710 <USBH_CDC_InterfaceInit+0x24>
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d901      	bls.n	8008714 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008710:	2302      	movs	r3, #2
 8008712:	e13d      	b.n	8008990 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fc3b 	bl	8008f94 <USBH_SelectInterface>
 800871e:	4603      	mov	r3, r0
 8008720:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008728:	2302      	movs	r3, #2
 800872a:	e131      	b.n	8008990 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008732:	2050      	movs	r0, #80	; 0x50
 8008734:	f001 faee 	bl	8009d14 <malloc>
 8008738:	4603      	mov	r3, r0
 800873a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800874c:	2302      	movs	r3, #2
 800874e:	e11f      	b.n	8008990 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008750:	2250      	movs	r2, #80	; 0x50
 8008752:	2100      	movs	r1, #0
 8008754:	68b8      	ldr	r0, [r7, #8]
 8008756:	f001 fbb9 	bl	8009ecc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	211a      	movs	r1, #26
 8008760:	fb01 f303 	mul.w	r3, r1, r3
 8008764:	4413      	add	r3, r2
 8008766:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b25b      	sxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	da15      	bge.n	800879e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	211a      	movs	r1, #26
 8008778:	fb01 f303 	mul.w	r3, r1, r3
 800877c:	4413      	add	r3, r2
 800877e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008782:	781a      	ldrb	r2, [r3, #0]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	211a      	movs	r1, #26
 800878e:	fb01 f303 	mul.w	r3, r1, r3
 8008792:	4413      	add	r3, r2
 8008794:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008798:	881a      	ldrh	r2, [r3, #0]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 ff9c 	bl	80096e2 <USBH_AllocPipe>
 80087aa:	4603      	mov	r3, r0
 80087ac:	461a      	mov	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	7819      	ldrb	r1, [r3, #0]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	7858      	ldrb	r0, [r3, #1]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	8952      	ldrh	r2, [r2, #10]
 80087ca:	9202      	str	r2, [sp, #8]
 80087cc:	2203      	movs	r2, #3
 80087ce:	9201      	str	r2, [sp, #4]
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	4623      	mov	r3, r4
 80087d4:	4602      	mov	r2, r0
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 ff54 	bl	8009684 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2200      	movs	r2, #0
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 fa1d 	bl	8009c24 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80087ea:	2300      	movs	r3, #0
 80087ec:	2200      	movs	r2, #0
 80087ee:	210a      	movs	r1, #10
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fbeb 	bl	8008fcc <USBH_FindInterface>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2bff      	cmp	r3, #255	; 0xff
 80087fe:	d002      	beq.n	8008806 <USBH_CDC_InterfaceInit+0x11a>
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d901      	bls.n	800880a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008806:	2302      	movs	r3, #2
 8008808:	e0c2      	b.n	8008990 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	211a      	movs	r1, #26
 8008810:	fb01 f303 	mul.w	r3, r1, r3
 8008814:	4413      	add	r3, r2
 8008816:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	b25b      	sxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	da16      	bge.n	8008850 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	211a      	movs	r1, #26
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	4413      	add	r3, r2
 800882e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008832:	781a      	ldrb	r2, [r3, #0]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	211a      	movs	r1, #26
 800883e:	fb01 f303 	mul.w	r3, r1, r3
 8008842:	4413      	add	r3, r2
 8008844:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008848:	881a      	ldrh	r2, [r3, #0]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	835a      	strh	r2, [r3, #26]
 800884e:	e015      	b.n	800887c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	211a      	movs	r1, #26
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	4413      	add	r3, r2
 800885c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008860:	781a      	ldrb	r2, [r3, #0]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	211a      	movs	r1, #26
 800886c:	fb01 f303 	mul.w	r3, r1, r3
 8008870:	4413      	add	r3, r2
 8008872:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008876:	881a      	ldrh	r2, [r3, #0]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	211a      	movs	r1, #26
 8008882:	fb01 f303 	mul.w	r3, r1, r3
 8008886:	4413      	add	r3, r2
 8008888:	f203 3356 	addw	r3, r3, #854	; 0x356
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b25b      	sxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	da16      	bge.n	80088c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	211a      	movs	r1, #26
 800889a:	fb01 f303 	mul.w	r3, r1, r3
 800889e:	4413      	add	r3, r2
 80088a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	211a      	movs	r1, #26
 80088b0:	fb01 f303 	mul.w	r3, r1, r3
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80088ba:	881a      	ldrh	r2, [r3, #0]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	835a      	strh	r2, [r3, #26]
 80088c0:	e015      	b.n	80088ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	211a      	movs	r1, #26
 80088c8:	fb01 f303 	mul.w	r3, r1, r3
 80088cc:	4413      	add	r3, r2
 80088ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	211a      	movs	r1, #26
 80088de:	fb01 f303 	mul.w	r3, r1, r3
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80088e8:	881a      	ldrh	r2, [r3, #0]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	7b9b      	ldrb	r3, [r3, #14]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fef4 	bl	80096e2 <USBH_AllocPipe>
 80088fa:	4603      	mov	r3, r0
 80088fc:	461a      	mov	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	7bdb      	ldrb	r3, [r3, #15]
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 feea 	bl	80096e2 <USBH_AllocPipe>
 800890e:	4603      	mov	r3, r0
 8008910:	461a      	mov	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	7b59      	ldrb	r1, [r3, #13]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	7b98      	ldrb	r0, [r3, #14]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	8b12      	ldrh	r2, [r2, #24]
 800892e:	9202      	str	r2, [sp, #8]
 8008930:	2202      	movs	r2, #2
 8008932:	9201      	str	r2, [sp, #4]
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	4623      	mov	r3, r4
 8008938:	4602      	mov	r2, r0
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fea2 	bl	8009684 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	7b19      	ldrb	r1, [r3, #12]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	7bd8      	ldrb	r0, [r3, #15]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	8b52      	ldrh	r2, [r2, #26]
 8008958:	9202      	str	r2, [sp, #8]
 800895a:	2202      	movs	r2, #2
 800895c:	9201      	str	r2, [sp, #4]
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	4623      	mov	r3, r4
 8008962:	4602      	mov	r2, r0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fe8d 	bl	8009684 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	7b5b      	ldrb	r3, [r3, #13]
 8008976:	2200      	movs	r2, #0
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 f952 	bl	8009c24 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	7b1b      	ldrb	r3, [r3, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 f94b 	bl	8009c24 <USBH_LL_SetToggle>

  return USBH_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	bd90      	pop	{r4, r7, pc}

08008998 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00e      	beq.n	80089d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fe82 	bl	80096c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fead 	bl	8009724 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	7b1b      	ldrb	r3, [r3, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00e      	beq.n	80089f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	7b1b      	ldrb	r3, [r3, #12]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fe6f 	bl	80096c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	7b1b      	ldrb	r3, [r3, #12]
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fe9a 	bl	8009724 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	7b5b      	ldrb	r3, [r3, #13]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00e      	beq.n	8008a1c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	7b5b      	ldrb	r3, [r3, #13]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fe5c 	bl	80096c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	7b5b      	ldrb	r3, [r3, #13]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fe87 	bl	8009724 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f001 f977 	bl	8009d24 <free>
    phost->pActiveClass->pData = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3340      	adds	r3, #64	; 0x40
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8b1 	bl	8008bca <GetLineCoding>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a78:	2102      	movs	r1, #2
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008a7e:	7afb      	ldrb	r3, [r7, #11]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a90:	2301      	movs	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d877      	bhi.n	8008b9c <USBH_CDC_Process+0x114>
 8008aac:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <USBH_CDC_Process+0x2c>)
 8008aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab2:	bf00      	nop
 8008ab4:	08008ac9 	.word	0x08008ac9
 8008ab8:	08008acf 	.word	0x08008acf
 8008abc:	08008aff 	.word	0x08008aff
 8008ac0:	08008b73 	.word	0x08008b73
 8008ac4:	08008b81 	.word	0x08008b81
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
      break;
 8008acc:	e06d      	b.n	8008baa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f897 	bl	8008c08 <SetLineCoding>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d104      	bne.n	8008aee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008aec:	e058      	b.n	8008ba0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d055      	beq.n	8008ba0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2204      	movs	r2, #4
 8008af8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008afc:	e050      	b.n	8008ba0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	3340      	adds	r3, #64	; 0x40
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f860 	bl	8008bca <GetLineCoding>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d126      	bne.n	8008b62 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b26:	791b      	ldrb	r3, [r3, #4]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d13b      	bne.n	8008ba4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b36:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d133      	bne.n	8008ba4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b46:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d12b      	bne.n	8008ba4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b54:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d124      	bne.n	8008ba4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f958 	bl	8008e10 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008b60:	e020      	b.n	8008ba4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d01d      	beq.n	8008ba4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2204      	movs	r2, #4
 8008b6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008b70:	e018      	b.n	8008ba4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f867 	bl	8008c46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f8da 	bl	8008d32 <CDC_ProcessReception>
      break;
 8008b7e:	e014      	b.n	8008baa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008b80:	2100      	movs	r1, #0
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb08 	bl	8009198 <USBH_ClrFeature>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10a      	bne.n	8008ba8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008b9a:	e005      	b.n	8008ba8 <USBH_CDC_Process+0x120>

    default:
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e004      	b.n	8008baa <USBH_CDC_Process+0x122>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e002      	b.n	8008baa <USBH_CDC_Process+0x122>
      break;
 8008ba4:	bf00      	nop
 8008ba6:	e000      	b.n	8008baa <USBH_CDC_Process+0x122>
      break;
 8008ba8:	bf00      	nop

  }

  return status;
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	22a1      	movs	r2, #161	; 0xa1
 8008bd8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2221      	movs	r2, #33	; 0x21
 8008bde:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2207      	movs	r2, #7
 8008bf0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2207      	movs	r2, #7
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 faf1 	bl	80091e0 <USBH_CtlReq>
 8008bfe:	4603      	mov	r3, r0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2221      	movs	r2, #33	; 0x21
 8008c16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2207      	movs	r2, #7
 8008c2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2207      	movs	r2, #7
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fad2 	bl	80091e0 <USBH_CtlReq>
 8008c3c:	4603      	mov	r3, r0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af02      	add	r7, sp, #8
 8008c4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d002      	beq.n	8008c6c <CDC_ProcessTransmission+0x26>
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d023      	beq.n	8008cb2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008c6a:	e05e      	b.n	8008d2a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	8b12      	ldrh	r2, [r2, #24]
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d90b      	bls.n	8008c90 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	69d9      	ldr	r1, [r3, #28]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	8b1a      	ldrh	r2, [r3, #24]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	7b5b      	ldrb	r3, [r3, #13]
 8008c84:	2001      	movs	r0, #1
 8008c86:	9000      	str	r0, [sp, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fcb8 	bl	80095fe <USBH_BulkSendData>
 8008c8e:	e00b      	b.n	8008ca8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	7b5b      	ldrb	r3, [r3, #13]
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	9000      	str	r0, [sp, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fcab 	bl	80095fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008cb0:	e03b      	b.n	8008d2a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	7b5b      	ldrb	r3, [r3, #13]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 ff89 	bl	8009bd0 <USBH_LL_GetURBState>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008cc2:	7afb      	ldrb	r3, [r7, #11]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d128      	bne.n	8008d1a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	8b12      	ldrh	r2, [r2, #24]
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d90e      	bls.n	8008cf2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	8b12      	ldrh	r2, [r2, #24]
 8008cdc:	1a9a      	subs	r2, r3, r2
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	8b12      	ldrh	r2, [r2, #24]
 8008cea:	441a      	add	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	61da      	str	r2, [r3, #28]
 8008cf0:	e002      	b.n	8008cf8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d004      	beq.n	8008d0a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d08:	e00e      	b.n	8008d28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f868 	bl	8008de8 <USBH_CDC_TransmitCallback>
      break;
 8008d18:	e006      	b.n	8008d28 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008d1a:	7afb      	ldrb	r3, [r7, #11]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d103      	bne.n	8008d28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d28:	bf00      	nop
  }
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b086      	sub	sp, #24
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d44:	2300      	movs	r3, #0
 8008d46:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d002      	beq.n	8008d58 <CDC_ProcessReception+0x26>
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d00e      	beq.n	8008d74 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008d56:	e043      	b.n	8008de0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	6a19      	ldr	r1, [r3, #32]
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	8b5a      	ldrh	r2, [r3, #26]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	7b1b      	ldrb	r3, [r3, #12]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc6f 	bl	8009648 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008d72:	e035      	b.n	8008de0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	7b1b      	ldrb	r3, [r3, #12]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 ff28 	bl	8009bd0 <USBH_LL_GetURBState>
 8008d80:	4603      	mov	r3, r0
 8008d82:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008d84:	7cfb      	ldrb	r3, [r7, #19]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d129      	bne.n	8008dde <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	7b1b      	ldrb	r3, [r3, #12]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fe8b 	bl	8009aac <USBH_LL_GetLastXferSize>
 8008d96:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d016      	beq.n	8008dd0 <CDC_ProcessReception+0x9e>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	8b5b      	ldrh	r3, [r3, #26]
 8008da6:	461a      	mov	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d910      	bls.n	8008dd0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1ad2      	subs	r2, r2, r3
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	6a1a      	ldr	r2, [r3, #32]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2203      	movs	r2, #3
 8008dca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008dce:	e006      	b.n	8008dde <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f80f 	bl	8008dfc <USBH_CDC_ReceiveCallback>
      break;
 8008dde:	bf00      	nop
  }
}
 8008de0:	bf00      	nop
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e029      	b.n	8008e90 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	79fa      	ldrb	r2, [r7, #7]
 8008e40:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 f81f 	bl	8008e98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 fd93 	bl	80099b4 <USBH_LL_Init>

  return USBH_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	e009      	b.n	8008ebe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	33e0      	adds	r3, #224	; 0xe0
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b0f      	cmp	r3, #15
 8008ec2:	d9f2      	bls.n	8008eaa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e009      	b.n	8008ede <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3301      	adds	r3, #1
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee4:	d3f1      	bcc.n	8008eca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2240      	movs	r2, #64	; 0x40
 8008f0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d016      	beq.n	8008f82 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10e      	bne.n	8008f7c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008f64:	1c59      	adds	r1, r3, #1
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	33de      	adds	r3, #222	; 0xde
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
 8008f7a:	e004      	b.n	8008f86 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	73fb      	strb	r3, [r7, #15]
 8008f80:	e001      	b.n	8008f86 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008f82:	2302      	movs	r3, #2
 8008f84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d204      	bcs.n	8008fba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008fb8:	e001      	b.n	8008fbe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008fba:	2302      	movs	r3, #2
 8008fbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4603      	mov	r3, r0
 8008fdc:	70fb      	strb	r3, [r7, #3]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70bb      	strb	r3, [r7, #2]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ff4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ff6:	e025      	b.n	8009044 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	221a      	movs	r2, #26
 8008ffc:	fb02 f303 	mul.w	r3, r2, r3
 8009000:	3308      	adds	r3, #8
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4413      	add	r3, r2
 8009006:	3302      	adds	r3, #2
 8009008:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	795b      	ldrb	r3, [r3, #5]
 800900e:	78fa      	ldrb	r2, [r7, #3]
 8009010:	429a      	cmp	r2, r3
 8009012:	d002      	beq.n	800901a <USBH_FindInterface+0x4e>
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	2bff      	cmp	r3, #255	; 0xff
 8009018:	d111      	bne.n	800903e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800901e:	78ba      	ldrb	r2, [r7, #2]
 8009020:	429a      	cmp	r2, r3
 8009022:	d002      	beq.n	800902a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009024:	78bb      	ldrb	r3, [r7, #2]
 8009026:	2bff      	cmp	r3, #255	; 0xff
 8009028:	d109      	bne.n	800903e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800902e:	787a      	ldrb	r2, [r7, #1]
 8009030:	429a      	cmp	r2, r3
 8009032:	d002      	beq.n	800903a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009034:	787b      	ldrb	r3, [r7, #1]
 8009036:	2bff      	cmp	r3, #255	; 0xff
 8009038:	d101      	bne.n	800903e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	e006      	b.n	800904c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	3301      	adds	r3, #1
 8009042:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009044:	7dfb      	ldrb	r3, [r7, #23]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d9d6      	bls.n	8008ff8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800904a:	23ff      	movs	r3, #255	; 0xff
}
 800904c:	4618      	mov	r0, r3
 800904e:	371c      	adds	r7, #28
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fced 	bl	8009a40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009066:	2101      	movs	r1, #1
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fdc4 	bl	8009bf6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f804 	bl	80090ba <USBH_HandleSof>
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b0b      	cmp	r3, #11
 80090ca:	d10a      	bne.n	80090e2 <USBH_HandleSof+0x28>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	4798      	blx	r3
  }
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80090fa:	bf00      	nop
}
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009116:	bf00      	nop
}
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fc80 	bl	8009a76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	791b      	ldrb	r3, [r3, #4]
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fad1 	bl	8009724 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	795b      	ldrb	r3, [r3, #5]
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 facb 	bl	8009724 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	789b      	ldrb	r3, [r3, #2]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d10f      	bne.n	80091cc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80091cc:	2200      	movs	r2, #0
 80091ce:	2100      	movs	r1, #0
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f805 	bl	80091e0 <USBH_CtlReq>
 80091d6:	4603      	mov	r3, r0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	4613      	mov	r3, r2
 80091ec:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80091ee:	2301      	movs	r3, #1
 80091f0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	789b      	ldrb	r3, [r3, #2]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d002      	beq.n	8009200 <USBH_CtlReq+0x20>
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d00f      	beq.n	800921e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80091fe:	e027      	b.n	8009250 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2202      	movs	r2, #2
 8009216:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009218:	2301      	movs	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
      break;
 800921c:	e018      	b.n	8009250 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 f81c 	bl	800925c <USBH_HandleControl>
 8009224:	4603      	mov	r3, r0
 8009226:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <USBH_CtlReq+0x54>
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d106      	bne.n	8009242 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	761a      	strb	r2, [r3, #24]
      break;
 8009240:	e005      	b.n	800924e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	2b02      	cmp	r3, #2
 8009246:	d102      	bne.n	800924e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	709a      	strb	r2, [r3, #2]
      break;
 800924e:	bf00      	nop
  }
  return status;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af02      	add	r7, sp, #8
 8009262:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009264:	2301      	movs	r3, #1
 8009266:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009268:	2300      	movs	r3, #0
 800926a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	7e1b      	ldrb	r3, [r3, #24]
 8009270:	3b01      	subs	r3, #1
 8009272:	2b0a      	cmp	r3, #10
 8009274:	f200 8156 	bhi.w	8009524 <USBH_HandleControl+0x2c8>
 8009278:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <USBH_HandleControl+0x24>)
 800927a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927e:	bf00      	nop
 8009280:	080092ad 	.word	0x080092ad
 8009284:	080092c7 	.word	0x080092c7
 8009288:	08009331 	.word	0x08009331
 800928c:	08009357 	.word	0x08009357
 8009290:	0800938f 	.word	0x0800938f
 8009294:	080093b9 	.word	0x080093b9
 8009298:	0800940b 	.word	0x0800940b
 800929c:	0800942d 	.word	0x0800942d
 80092a0:	08009469 	.word	0x08009469
 80092a4:	0800948f 	.word	0x0800948f
 80092a8:	080094cd 	.word	0x080094cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f103 0110 	add.w	r1, r3, #16
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	795b      	ldrb	r3, [r3, #5]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f943 	bl	8009544 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2202      	movs	r2, #2
 80092c2:	761a      	strb	r2, [r3, #24]
      break;
 80092c4:	e139      	b.n	800953a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	795b      	ldrb	r3, [r3, #5]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc7f 	bl	8009bd0 <USBH_LL_GetURBState>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d11e      	bne.n	800931a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7c1b      	ldrb	r3, [r3, #16]
 80092e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	8adb      	ldrh	r3, [r3, #22]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00a      	beq.n	8009304 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80092ee:	7b7b      	ldrb	r3, [r7, #13]
 80092f0:	2b80      	cmp	r3, #128	; 0x80
 80092f2:	d103      	bne.n	80092fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2203      	movs	r2, #3
 80092f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092fa:	e115      	b.n	8009528 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2205      	movs	r2, #5
 8009300:	761a      	strb	r2, [r3, #24]
      break;
 8009302:	e111      	b.n	8009528 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009304:	7b7b      	ldrb	r3, [r7, #13]
 8009306:	2b80      	cmp	r3, #128	; 0x80
 8009308:	d103      	bne.n	8009312 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2209      	movs	r2, #9
 800930e:	761a      	strb	r2, [r3, #24]
      break;
 8009310:	e10a      	b.n	8009528 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2207      	movs	r2, #7
 8009316:	761a      	strb	r2, [r3, #24]
      break;
 8009318:	e106      	b.n	8009528 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b04      	cmp	r3, #4
 800931e:	d003      	beq.n	8009328 <USBH_HandleControl+0xcc>
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b02      	cmp	r3, #2
 8009324:	f040 8100 	bne.w	8009528 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	220b      	movs	r2, #11
 800932c:	761a      	strb	r2, [r3, #24]
      break;
 800932e:	e0fb      	b.n	8009528 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009336:	b29a      	uxth	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6899      	ldr	r1, [r3, #8]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	899a      	ldrh	r2, [r3, #12]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	791b      	ldrb	r3, [r3, #4]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f93a 	bl	80095c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2204      	movs	r2, #4
 8009352:	761a      	strb	r2, [r3, #24]
      break;
 8009354:	e0f1      	b.n	800953a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	791b      	ldrb	r3, [r3, #4]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc37 	bl	8009bd0 <USBH_LL_GetURBState>
 8009362:	4603      	mov	r3, r0
 8009364:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d102      	bne.n	8009372 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2209      	movs	r2, #9
 8009370:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b05      	cmp	r3, #5
 8009376:	d102      	bne.n	800937e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009378:	2303      	movs	r3, #3
 800937a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800937c:	e0d6      	b.n	800952c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b04      	cmp	r3, #4
 8009382:	f040 80d3 	bne.w	800952c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	220b      	movs	r2, #11
 800938a:	761a      	strb	r2, [r3, #24]
      break;
 800938c:	e0ce      	b.n	800952c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6899      	ldr	r1, [r3, #8]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	899a      	ldrh	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	795b      	ldrb	r3, [r3, #5]
 800939a:	2001      	movs	r0, #1
 800939c:	9000      	str	r0, [sp, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f8ea 	bl	8009578 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2206      	movs	r2, #6
 80093b4:	761a      	strb	r2, [r3, #24]
      break;
 80093b6:	e0c0      	b.n	800953a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	795b      	ldrb	r3, [r3, #5]
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fc06 	bl	8009bd0 <USBH_LL_GetURBState>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d103      	bne.n	80093d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2207      	movs	r2, #7
 80093d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093d4:	e0ac      	b.n	8009530 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	2b05      	cmp	r3, #5
 80093da:	d105      	bne.n	80093e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	220c      	movs	r2, #12
 80093e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80093e2:	2303      	movs	r3, #3
 80093e4:	73fb      	strb	r3, [r7, #15]
      break;
 80093e6:	e0a3      	b.n	8009530 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d103      	bne.n	80093f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2205      	movs	r2, #5
 80093f2:	761a      	strb	r2, [r3, #24]
      break;
 80093f4:	e09c      	b.n	8009530 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	f040 8099 	bne.w	8009530 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	220b      	movs	r2, #11
 8009402:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009404:	2302      	movs	r3, #2
 8009406:	73fb      	strb	r3, [r7, #15]
      break;
 8009408:	e092      	b.n	8009530 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	791b      	ldrb	r3, [r3, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	2100      	movs	r1, #0
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f8d5 	bl	80095c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2208      	movs	r2, #8
 8009428:	761a      	strb	r2, [r3, #24]

      break;
 800942a:	e086      	b.n	800953a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	791b      	ldrb	r3, [r3, #4]
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fbcc 	bl	8009bd0 <USBH_LL_GetURBState>
 8009438:	4603      	mov	r3, r0
 800943a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d105      	bne.n	800944e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	220d      	movs	r2, #13
 8009446:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800944c:	e072      	b.n	8009534 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2b04      	cmp	r3, #4
 8009452:	d103      	bne.n	800945c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	220b      	movs	r2, #11
 8009458:	761a      	strb	r2, [r3, #24]
      break;
 800945a:	e06b      	b.n	8009534 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	2b05      	cmp	r3, #5
 8009460:	d168      	bne.n	8009534 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009462:	2303      	movs	r3, #3
 8009464:	73fb      	strb	r3, [r7, #15]
      break;
 8009466:	e065      	b.n	8009534 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	795b      	ldrb	r3, [r3, #5]
 800946c:	2201      	movs	r2, #1
 800946e:	9200      	str	r2, [sp, #0]
 8009470:	2200      	movs	r2, #0
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f87f 	bl	8009578 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	220a      	movs	r2, #10
 800948a:	761a      	strb	r2, [r3, #24]
      break;
 800948c:	e055      	b.n	800953a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	795b      	ldrb	r3, [r3, #5]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fb9b 	bl	8009bd0 <USBH_LL_GetURBState>
 800949a:	4603      	mov	r3, r0
 800949c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d105      	bne.n	80094b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	220d      	movs	r2, #13
 80094ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094ae:	e043      	b.n	8009538 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d103      	bne.n	80094be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2209      	movs	r2, #9
 80094ba:	761a      	strb	r2, [r3, #24]
      break;
 80094bc:	e03c      	b.n	8009538 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d139      	bne.n	8009538 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	220b      	movs	r2, #11
 80094c8:	761a      	strb	r2, [r3, #24]
      break;
 80094ca:	e035      	b.n	8009538 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	7e5b      	ldrb	r3, [r3, #25]
 80094d0:	3301      	adds	r3, #1
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	765a      	strb	r2, [r3, #25]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	7e5b      	ldrb	r3, [r3, #25]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d806      	bhi.n	80094ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80094ec:	e025      	b.n	800953a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094f4:	2106      	movs	r1, #6
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	795b      	ldrb	r3, [r3, #5]
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f90c 	bl	8009724 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	791b      	ldrb	r3, [r3, #4]
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f906 	bl	8009724 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800951e:	2302      	movs	r3, #2
 8009520:	73fb      	strb	r3, [r7, #15]
      break;
 8009522:	e00a      	b.n	800953a <USBH_HandleControl+0x2de>

    default:
      break;
 8009524:	bf00      	nop
 8009526:	e008      	b.n	800953a <USBH_HandleControl+0x2de>
      break;
 8009528:	bf00      	nop
 800952a:	e006      	b.n	800953a <USBH_HandleControl+0x2de>
      break;
 800952c:	bf00      	nop
 800952e:	e004      	b.n	800953a <USBH_HandleControl+0x2de>
      break;
 8009530:	bf00      	nop
 8009532:	e002      	b.n	800953a <USBH_HandleControl+0x2de>
      break;
 8009534:	bf00      	nop
 8009536:	e000      	b.n	800953a <USBH_HandleControl+0x2de>
      break;
 8009538:	bf00      	nop
  }

  return status;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af04      	add	r7, sp, #16
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009552:	79f9      	ldrb	r1, [r7, #7]
 8009554:	2300      	movs	r3, #0
 8009556:	9303      	str	r3, [sp, #12]
 8009558:	2308      	movs	r3, #8
 800955a:	9302      	str	r3, [sp, #8]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	9301      	str	r3, [sp, #4]
 8009560:	2300      	movs	r3, #0
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	2300      	movs	r3, #0
 8009566:	2200      	movs	r2, #0
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 fb00 	bl	8009b6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af04      	add	r7, sp, #16
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	4611      	mov	r1, r2
 8009584:	461a      	mov	r2, r3
 8009586:	460b      	mov	r3, r1
 8009588:	80fb      	strh	r3, [r7, #6]
 800958a:	4613      	mov	r3, r2
 800958c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800959c:	7979      	ldrb	r1, [r7, #5]
 800959e:	7e3b      	ldrb	r3, [r7, #24]
 80095a0:	9303      	str	r3, [sp, #12]
 80095a2:	88fb      	ldrh	r3, [r7, #6]
 80095a4:	9302      	str	r3, [sp, #8]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	2301      	movs	r3, #1
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	2300      	movs	r3, #0
 80095b0:	2200      	movs	r2, #0
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 fadb 	bl	8009b6e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b088      	sub	sp, #32
 80095c6:	af04      	add	r7, sp, #16
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	4611      	mov	r1, r2
 80095ce:	461a      	mov	r2, r3
 80095d0:	460b      	mov	r3, r1
 80095d2:	80fb      	strh	r3, [r7, #6]
 80095d4:	4613      	mov	r3, r2
 80095d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095d8:	7979      	ldrb	r1, [r7, #5]
 80095da:	2300      	movs	r3, #0
 80095dc:	9303      	str	r3, [sp, #12]
 80095de:	88fb      	ldrh	r3, [r7, #6]
 80095e0:	9302      	str	r3, [sp, #8]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	2301      	movs	r3, #1
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	2300      	movs	r3, #0
 80095ec:	2201      	movs	r2, #1
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 fabd 	bl	8009b6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80095f4:	2300      	movs	r3, #0

}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b088      	sub	sp, #32
 8009602:	af04      	add	r7, sp, #16
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	4611      	mov	r1, r2
 800960a:	461a      	mov	r2, r3
 800960c:	460b      	mov	r3, r1
 800960e:	80fb      	strh	r3, [r7, #6]
 8009610:	4613      	mov	r3, r2
 8009612:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009622:	7979      	ldrb	r1, [r7, #5]
 8009624:	7e3b      	ldrb	r3, [r7, #24]
 8009626:	9303      	str	r3, [sp, #12]
 8009628:	88fb      	ldrh	r3, [r7, #6]
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	2301      	movs	r3, #1
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2302      	movs	r3, #2
 8009636:	2200      	movs	r2, #0
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 fa98 	bl	8009b6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af04      	add	r7, sp, #16
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4611      	mov	r1, r2
 8009654:	461a      	mov	r2, r3
 8009656:	460b      	mov	r3, r1
 8009658:	80fb      	strh	r3, [r7, #6]
 800965a:	4613      	mov	r3, r2
 800965c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800965e:	7979      	ldrb	r1, [r7, #5]
 8009660:	2300      	movs	r3, #0
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	88fb      	ldrh	r3, [r7, #6]
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	2301      	movs	r3, #1
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	2302      	movs	r3, #2
 8009672:	2201      	movs	r2, #1
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fa7a 	bl	8009b6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af04      	add	r7, sp, #16
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	4608      	mov	r0, r1
 800968e:	4611      	mov	r1, r2
 8009690:	461a      	mov	r2, r3
 8009692:	4603      	mov	r3, r0
 8009694:	70fb      	strb	r3, [r7, #3]
 8009696:	460b      	mov	r3, r1
 8009698:	70bb      	strb	r3, [r7, #2]
 800969a:	4613      	mov	r3, r2
 800969c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800969e:	7878      	ldrb	r0, [r7, #1]
 80096a0:	78ba      	ldrb	r2, [r7, #2]
 80096a2:	78f9      	ldrb	r1, [r7, #3]
 80096a4:	8b3b      	ldrh	r3, [r7, #24]
 80096a6:	9302      	str	r3, [sp, #8]
 80096a8:	7d3b      	ldrb	r3, [r7, #20]
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	7c3b      	ldrb	r3, [r7, #16]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	4603      	mov	r3, r0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa0d 	bl	8009ad2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	460b      	mov	r3, r1
 80096cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fa2c 	bl	8009b30 <USBH_LL_ClosePipe>

  return USBH_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	460b      	mov	r3, r1
 80096ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f836 	bl	8009760 <USBH_GetFreePipe>
 80096f4:	4603      	mov	r3, r0
 80096f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80096f8:	89fb      	ldrh	r3, [r7, #14]
 80096fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00a      	beq.n	8009718 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	89fb      	ldrh	r3, [r7, #14]
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	33e0      	adds	r3, #224	; 0xe0
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009718:	89fb      	ldrh	r3, [r7, #14]
 800971a:	b2db      	uxtb	r3, r3
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	2b0f      	cmp	r3, #15
 8009734:	d80d      	bhi.n	8009752 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009736:	78fb      	ldrb	r3, [r7, #3]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	33e0      	adds	r3, #224	; 0xe0
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	33e0      	adds	r3, #224	; 0xe0
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
 8009770:	e00f      	b.n	8009792 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	33e0      	adds	r3, #224	; 0xe0
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d102      	bne.n	800978c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	b29b      	uxth	r3, r3
 800978a:	e007      	b.n	800979c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	3301      	adds	r3, #1
 8009790:	73fb      	strb	r3, [r7, #15]
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b0f      	cmp	r3, #15
 8009796:	d9ec      	bls.n	8009772 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009798:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80097ac:	2200      	movs	r2, #0
 80097ae:	490e      	ldr	r1, [pc, #56]	; (80097e8 <MX_USB_HOST_Init+0x40>)
 80097b0:	480e      	ldr	r0, [pc, #56]	; (80097ec <MX_USB_HOST_Init+0x44>)
 80097b2:	f7ff fb37 	bl	8008e24 <USBH_Init>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80097bc:	f7f7 fe6c 	bl	8001498 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80097c0:	490b      	ldr	r1, [pc, #44]	; (80097f0 <MX_USB_HOST_Init+0x48>)
 80097c2:	480a      	ldr	r0, [pc, #40]	; (80097ec <MX_USB_HOST_Init+0x44>)
 80097c4:	f7ff fbbc 	bl	8008f40 <USBH_RegisterClass>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80097ce:	f7f7 fe63 	bl	8001498 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80097d2:	4806      	ldr	r0, [pc, #24]	; (80097ec <MX_USB_HOST_Init+0x44>)
 80097d4:	f7ff fc40 	bl	8009058 <USBH_Start>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80097de:	f7f7 fe5b 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80097e2:	bf00      	nop
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	080097f5 	.word	0x080097f5
 80097ec:	20000348 	.word	0x20000348
 80097f0:	2000000c 	.word	0x2000000c

080097f4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	3b01      	subs	r3, #1
 8009804:	2b04      	cmp	r3, #4
 8009806:	d819      	bhi.n	800983c <USBH_UserProcess+0x48>
 8009808:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <USBH_UserProcess+0x1c>)
 800980a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980e:	bf00      	nop
 8009810:	0800983d 	.word	0x0800983d
 8009814:	0800982d 	.word	0x0800982d
 8009818:	0800983d 	.word	0x0800983d
 800981c:	08009835 	.word	0x08009835
 8009820:	08009825 	.word	0x08009825
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009824:	4b09      	ldr	r3, [pc, #36]	; (800984c <USBH_UserProcess+0x58>)
 8009826:	2203      	movs	r2, #3
 8009828:	701a      	strb	r2, [r3, #0]
  break;
 800982a:	e008      	b.n	800983e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800982c:	4b07      	ldr	r3, [pc, #28]	; (800984c <USBH_UserProcess+0x58>)
 800982e:	2202      	movs	r2, #2
 8009830:	701a      	strb	r2, [r3, #0]
  break;
 8009832:	e004      	b.n	800983e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <USBH_UserProcess+0x58>)
 8009836:	2201      	movs	r2, #1
 8009838:	701a      	strb	r2, [r3, #0]
  break;
 800983a:	e000      	b.n	800983e <USBH_UserProcess+0x4a>

  default:
  break;
 800983c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	20000720 	.word	0x20000720

08009850 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08a      	sub	sp, #40	; 0x28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009858:	f107 0314 	add.w	r3, r7, #20
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	605a      	str	r2, [r3, #4]
 8009862:	609a      	str	r2, [r3, #8]
 8009864:	60da      	str	r2, [r3, #12]
 8009866:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a24      	ldr	r2, [pc, #144]	; (8009900 <HAL_HCD_MspInit+0xb0>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d141      	bne.n	80098f6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	4b23      	ldr	r3, [pc, #140]	; (8009904 <HAL_HCD_MspInit+0xb4>)
 8009878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987a:	4a22      	ldr	r2, [pc, #136]	; (8009904 <HAL_HCD_MspInit+0xb4>)
 800987c:	f043 0302 	orr.w	r3, r3, #2
 8009880:	6313      	str	r3, [r2, #48]	; 0x30
 8009882:	4b20      	ldr	r3, [pc, #128]	; (8009904 <HAL_HCD_MspInit+0xb4>)
 8009884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009886:	f003 0302 	and.w	r3, r3, #2
 800988a:	613b      	str	r3, [r7, #16]
 800988c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800988e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8009892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009894:	2302      	movs	r3, #2
 8009896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009898:	2300      	movs	r3, #0
 800989a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800989c:	2300      	movs	r3, #0
 800989e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80098a0:	230c      	movs	r3, #12
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098a4:	f107 0314 	add.w	r3, r7, #20
 80098a8:	4619      	mov	r1, r3
 80098aa:	4817      	ldr	r0, [pc, #92]	; (8009908 <HAL_HCD_MspInit+0xb8>)
 80098ac:	f7f8 fde6 	bl	800247c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80098b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098b6:	2300      	movs	r3, #0
 80098b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80098be:	f107 0314 	add.w	r3, r7, #20
 80098c2:	4619      	mov	r1, r3
 80098c4:	4810      	ldr	r0, [pc, #64]	; (8009908 <HAL_HCD_MspInit+0xb8>)
 80098c6:	f7f8 fdd9 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	4b0d      	ldr	r3, [pc, #52]	; (8009904 <HAL_HCD_MspInit+0xb4>)
 80098d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d2:	4a0c      	ldr	r2, [pc, #48]	; (8009904 <HAL_HCD_MspInit+0xb4>)
 80098d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098d8:	6313      	str	r3, [r2, #48]	; 0x30
 80098da:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <HAL_HCD_MspInit+0xb4>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80098e6:	2200      	movs	r2, #0
 80098e8:	2100      	movs	r1, #0
 80098ea:	204d      	movs	r0, #77	; 0x4d
 80098ec:	f7f8 fb94 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80098f0:	204d      	movs	r0, #77	; 0x4d
 80098f2:	f7f8 fbad 	bl	8002050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80098f6:	bf00      	nop
 80098f8:	3728      	adds	r7, #40	; 0x28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	40040000 	.word	0x40040000
 8009904:	40023800 	.word	0x40023800
 8009908:	40020400 	.word	0x40020400

0800990c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff fbbb 	bl	8009096 <USBH_LL_IncTimer>
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff fbf3 	bl	8009122 <USBH_LL_Connect>
}
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fbfc 	bl	8009150 <USBH_LL_Disconnect>
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
 800996c:	4613      	mov	r3, r2
 800996e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fbad 	bl	80090ea <USBH_LL_PortEnabled>
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fbad 	bl	8009106 <USBH_LL_PortDisabled>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d132      	bne.n	8009a2c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80099c6:	4a1c      	ldr	r2, [pc, #112]	; (8009a38 <USBH_LL_Init+0x84>)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a19      	ldr	r2, [pc, #100]	; (8009a38 <USBH_LL_Init+0x84>)
 80099d2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80099d6:	4b18      	ldr	r3, [pc, #96]	; (8009a38 <USBH_LL_Init+0x84>)
 80099d8:	4a18      	ldr	r2, [pc, #96]	; (8009a3c <USBH_LL_Init+0x88>)
 80099da:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80099dc:	4b16      	ldr	r3, [pc, #88]	; (8009a38 <USBH_LL_Init+0x84>)
 80099de:	220c      	movs	r2, #12
 80099e0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80099e2:	4b15      	ldr	r3, [pc, #84]	; (8009a38 <USBH_LL_Init+0x84>)
 80099e4:	2201      	movs	r2, #1
 80099e6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80099e8:	4b13      	ldr	r3, [pc, #76]	; (8009a38 <USBH_LL_Init+0x84>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80099ee:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <USBH_LL_Init+0x84>)
 80099f0:	2202      	movs	r2, #2
 80099f2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80099f4:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <USBH_LL_Init+0x84>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80099fa:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <USBH_LL_Init+0x84>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <USBH_LL_Init+0x84>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <USBH_LL_Init+0x84>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8009a0c:	480a      	ldr	r0, [pc, #40]	; (8009a38 <USBH_LL_Init+0x84>)
 8009a0e:	f7f8 fefa 	bl	8002806 <HAL_HCD_Init>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8009a18:	f7f7 fd3e 	bl	8001498 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8009a1c:	4806      	ldr	r0, [pc, #24]	; (8009a38 <USBH_LL_Init+0x84>)
 8009a1e:	f7f9 fad0 	bl	8002fc2 <HAL_HCD_GetCurrentFrame>
 8009a22:	4603      	mov	r3, r0
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff fb26 	bl	8009078 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20000724 	.word	0x20000724
 8009a3c:	40040000 	.word	0x40040000

08009a40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f9 fa4b 	bl	8002ef2 <HAL_HCD_Start>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f90e 	bl	8009c84 <USBH_Get_USB_Status>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7f9 fa53 	bl	8002f38 <HAL_HCD_Stop>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 f8f3 	bl	8009c84 <USBH_Get_USB_Status>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009abe:	78fa      	ldrb	r2, [r7, #3]
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f9 fa69 	bl	8002f9a <HAL_HCD_HC_GetXferCount>
 8009ac8:	4603      	mov	r3, r0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ad2:	b590      	push	{r4, r7, lr}
 8009ad4:	b089      	sub	sp, #36	; 0x24
 8009ad6:	af04      	add	r7, sp, #16
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	461a      	mov	r2, r3
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	70fb      	strb	r3, [r7, #3]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70bb      	strb	r3, [r7, #2]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009afa:	787c      	ldrb	r4, [r7, #1]
 8009afc:	78ba      	ldrb	r2, [r7, #2]
 8009afe:	78f9      	ldrb	r1, [r7, #3]
 8009b00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b02:	9302      	str	r3, [sp, #8]
 8009b04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	4623      	mov	r3, r4
 8009b12:	f7f8 feda 	bl	80028ca <HAL_HCD_HC_Init>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 f8b1 	bl	8009c84 <USBH_Get_USB_Status>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd90      	pop	{r4, r7, pc}

08009b30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7f8 ff4a 	bl	80029e8 <HAL_HCD_HC_Halt>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f892 	bl	8009c84 <USBH_Get_USB_Status>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009b6e:	b590      	push	{r4, r7, lr}
 8009b70:	b089      	sub	sp, #36	; 0x24
 8009b72:	af04      	add	r7, sp, #16
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	4608      	mov	r0, r1
 8009b78:	4611      	mov	r1, r2
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	70fb      	strb	r3, [r7, #3]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70bb      	strb	r3, [r7, #2]
 8009b84:	4613      	mov	r3, r2
 8009b86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b96:	787c      	ldrb	r4, [r7, #1]
 8009b98:	78ba      	ldrb	r2, [r7, #2]
 8009b9a:	78f9      	ldrb	r1, [r7, #3]
 8009b9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ba0:	9303      	str	r3, [sp, #12]
 8009ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	f7f8 ff3d 	bl	8002a30 <HAL_HCD_HC_SubmitRequest>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 f861 	bl	8009c84 <USBH_Get_USB_Status>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd90      	pop	{r4, r7, pc}

08009bd0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7f9 f9c3 	bl	8002f72 <HAL_HCD_HC_GetURBState>
 8009bec:	4603      	mov	r3, r0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d103      	bne.n	8009c14 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 f864 	bl	8009cdc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009c14:	20c8      	movs	r0, #200	; 0xc8
 8009c16:	f7f8 f923 	bl	8001e60 <HAL_Delay>
  return USBH_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	70fb      	strb	r3, [r7, #3]
 8009c30:	4613      	mov	r3, r2
 8009c32:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c3a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	212c      	movs	r1, #44	; 0x2c
 8009c42:	fb01 f303 	mul.w	r3, r1, r3
 8009c46:	4413      	add	r3, r2
 8009c48:	333b      	adds	r3, #59	; 0x3b
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d009      	beq.n	8009c64 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	212c      	movs	r1, #44	; 0x2c
 8009c56:	fb01 f303 	mul.w	r3, r1, r3
 8009c5a:	4413      	add	r3, r2
 8009c5c:	3354      	adds	r3, #84	; 0x54
 8009c5e:	78ba      	ldrb	r2, [r7, #2]
 8009c60:	701a      	strb	r2, [r3, #0]
 8009c62:	e008      	b.n	8009c76 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	212c      	movs	r1, #44	; 0x2c
 8009c6a:	fb01 f303 	mul.w	r3, r1, r3
 8009c6e:	4413      	add	r3, r2
 8009c70:	3355      	adds	r3, #85	; 0x55
 8009c72:	78ba      	ldrb	r2, [r7, #2]
 8009c74:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d817      	bhi.n	8009cc8 <USBH_Get_USB_Status+0x44>
 8009c98:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <USBH_Get_USB_Status+0x1c>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009cb7 	.word	0x08009cb7
 8009ca8:	08009cbd 	.word	0x08009cbd
 8009cac:	08009cc3 	.word	0x08009cc3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb4:	e00b      	b.n	8009cce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cba:	e008      	b.n	8009cce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc0:	e005      	b.n	8009cce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009cc2:	2302      	movs	r3, #2
 8009cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc6:	e002      	b.n	8009cce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009cc8:	2302      	movs	r3, #2
 8009cca:	73fb      	strb	r3, [r7, #15]
    break;
 8009ccc:	bf00      	nop
  }
  return usb_status;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8009cea:	79fb      	ldrb	r3, [r7, #7]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d102      	bne.n	8009cf6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	73fb      	strb	r3, [r7, #15]
 8009cf4:	e001      	b.n	8009cfa <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	2110      	movs	r1, #16
 8009d00:	4803      	ldr	r0, [pc, #12]	; (8009d10 <MX_DriverVbusHS+0x34>)
 8009d02:	f7f8 fd67 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	40020800 	.word	0x40020800

08009d14 <malloc>:
 8009d14:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <malloc+0xc>)
 8009d16:	4601      	mov	r1, r0
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	f000 b82b 	b.w	8009d74 <_malloc_r>
 8009d1e:	bf00      	nop
 8009d20:	20000078 	.word	0x20000078

08009d24 <free>:
 8009d24:	4b02      	ldr	r3, [pc, #8]	; (8009d30 <free+0xc>)
 8009d26:	4601      	mov	r1, r0
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	f000 b913 	b.w	8009f54 <_free_r>
 8009d2e:	bf00      	nop
 8009d30:	20000078 	.word	0x20000078

08009d34 <sbrk_aligned>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	4e0e      	ldr	r6, [pc, #56]	; (8009d70 <sbrk_aligned+0x3c>)
 8009d38:	460c      	mov	r4, r1
 8009d3a:	6831      	ldr	r1, [r6, #0]
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	b911      	cbnz	r1, 8009d46 <sbrk_aligned+0x12>
 8009d40:	f000 f8cc 	bl	8009edc <_sbrk_r>
 8009d44:	6030      	str	r0, [r6, #0]
 8009d46:	4621      	mov	r1, r4
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f000 f8c7 	bl	8009edc <_sbrk_r>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d00a      	beq.n	8009d68 <sbrk_aligned+0x34>
 8009d52:	1cc4      	adds	r4, r0, #3
 8009d54:	f024 0403 	bic.w	r4, r4, #3
 8009d58:	42a0      	cmp	r0, r4
 8009d5a:	d007      	beq.n	8009d6c <sbrk_aligned+0x38>
 8009d5c:	1a21      	subs	r1, r4, r0
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f000 f8bc 	bl	8009edc <_sbrk_r>
 8009d64:	3001      	adds	r0, #1
 8009d66:	d101      	bne.n	8009d6c <sbrk_aligned+0x38>
 8009d68:	f04f 34ff 	mov.w	r4, #4294967295
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	20000a2c 	.word	0x20000a2c

08009d74 <_malloc_r>:
 8009d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d78:	1ccd      	adds	r5, r1, #3
 8009d7a:	f025 0503 	bic.w	r5, r5, #3
 8009d7e:	3508      	adds	r5, #8
 8009d80:	2d0c      	cmp	r5, #12
 8009d82:	bf38      	it	cc
 8009d84:	250c      	movcc	r5, #12
 8009d86:	2d00      	cmp	r5, #0
 8009d88:	4607      	mov	r7, r0
 8009d8a:	db01      	blt.n	8009d90 <_malloc_r+0x1c>
 8009d8c:	42a9      	cmp	r1, r5
 8009d8e:	d905      	bls.n	8009d9c <_malloc_r+0x28>
 8009d90:	230c      	movs	r3, #12
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	2600      	movs	r6, #0
 8009d96:	4630      	mov	r0, r6
 8009d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e70 <_malloc_r+0xfc>
 8009da0:	f000 f868 	bl	8009e74 <__malloc_lock>
 8009da4:	f8d8 3000 	ldr.w	r3, [r8]
 8009da8:	461c      	mov	r4, r3
 8009daa:	bb5c      	cbnz	r4, 8009e04 <_malloc_r+0x90>
 8009dac:	4629      	mov	r1, r5
 8009dae:	4638      	mov	r0, r7
 8009db0:	f7ff ffc0 	bl	8009d34 <sbrk_aligned>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	4604      	mov	r4, r0
 8009db8:	d155      	bne.n	8009e66 <_malloc_r+0xf2>
 8009dba:	f8d8 4000 	ldr.w	r4, [r8]
 8009dbe:	4626      	mov	r6, r4
 8009dc0:	2e00      	cmp	r6, #0
 8009dc2:	d145      	bne.n	8009e50 <_malloc_r+0xdc>
 8009dc4:	2c00      	cmp	r4, #0
 8009dc6:	d048      	beq.n	8009e5a <_malloc_r+0xe6>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4638      	mov	r0, r7
 8009dce:	eb04 0903 	add.w	r9, r4, r3
 8009dd2:	f000 f883 	bl	8009edc <_sbrk_r>
 8009dd6:	4581      	cmp	r9, r0
 8009dd8:	d13f      	bne.n	8009e5a <_malloc_r+0xe6>
 8009dda:	6821      	ldr	r1, [r4, #0]
 8009ddc:	1a6d      	subs	r5, r5, r1
 8009dde:	4629      	mov	r1, r5
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7ff ffa7 	bl	8009d34 <sbrk_aligned>
 8009de6:	3001      	adds	r0, #1
 8009de8:	d037      	beq.n	8009e5a <_malloc_r+0xe6>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	442b      	add	r3, r5
 8009dee:	6023      	str	r3, [r4, #0]
 8009df0:	f8d8 3000 	ldr.w	r3, [r8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d038      	beq.n	8009e6a <_malloc_r+0xf6>
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	42a2      	cmp	r2, r4
 8009dfc:	d12b      	bne.n	8009e56 <_malloc_r+0xe2>
 8009dfe:	2200      	movs	r2, #0
 8009e00:	605a      	str	r2, [r3, #4]
 8009e02:	e00f      	b.n	8009e24 <_malloc_r+0xb0>
 8009e04:	6822      	ldr	r2, [r4, #0]
 8009e06:	1b52      	subs	r2, r2, r5
 8009e08:	d41f      	bmi.n	8009e4a <_malloc_r+0xd6>
 8009e0a:	2a0b      	cmp	r2, #11
 8009e0c:	d917      	bls.n	8009e3e <_malloc_r+0xca>
 8009e0e:	1961      	adds	r1, r4, r5
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	6025      	str	r5, [r4, #0]
 8009e14:	bf18      	it	ne
 8009e16:	6059      	strne	r1, [r3, #4]
 8009e18:	6863      	ldr	r3, [r4, #4]
 8009e1a:	bf08      	it	eq
 8009e1c:	f8c8 1000 	streq.w	r1, [r8]
 8009e20:	5162      	str	r2, [r4, r5]
 8009e22:	604b      	str	r3, [r1, #4]
 8009e24:	4638      	mov	r0, r7
 8009e26:	f104 060b 	add.w	r6, r4, #11
 8009e2a:	f000 f829 	bl	8009e80 <__malloc_unlock>
 8009e2e:	f026 0607 	bic.w	r6, r6, #7
 8009e32:	1d23      	adds	r3, r4, #4
 8009e34:	1af2      	subs	r2, r6, r3
 8009e36:	d0ae      	beq.n	8009d96 <_malloc_r+0x22>
 8009e38:	1b9b      	subs	r3, r3, r6
 8009e3a:	50a3      	str	r3, [r4, r2]
 8009e3c:	e7ab      	b.n	8009d96 <_malloc_r+0x22>
 8009e3e:	42a3      	cmp	r3, r4
 8009e40:	6862      	ldr	r2, [r4, #4]
 8009e42:	d1dd      	bne.n	8009e00 <_malloc_r+0x8c>
 8009e44:	f8c8 2000 	str.w	r2, [r8]
 8009e48:	e7ec      	b.n	8009e24 <_malloc_r+0xb0>
 8009e4a:	4623      	mov	r3, r4
 8009e4c:	6864      	ldr	r4, [r4, #4]
 8009e4e:	e7ac      	b.n	8009daa <_malloc_r+0x36>
 8009e50:	4634      	mov	r4, r6
 8009e52:	6876      	ldr	r6, [r6, #4]
 8009e54:	e7b4      	b.n	8009dc0 <_malloc_r+0x4c>
 8009e56:	4613      	mov	r3, r2
 8009e58:	e7cc      	b.n	8009df4 <_malloc_r+0x80>
 8009e5a:	230c      	movs	r3, #12
 8009e5c:	603b      	str	r3, [r7, #0]
 8009e5e:	4638      	mov	r0, r7
 8009e60:	f000 f80e 	bl	8009e80 <__malloc_unlock>
 8009e64:	e797      	b.n	8009d96 <_malloc_r+0x22>
 8009e66:	6025      	str	r5, [r4, #0]
 8009e68:	e7dc      	b.n	8009e24 <_malloc_r+0xb0>
 8009e6a:	605b      	str	r3, [r3, #4]
 8009e6c:	deff      	udf	#255	; 0xff
 8009e6e:	bf00      	nop
 8009e70:	20000a28 	.word	0x20000a28

08009e74 <__malloc_lock>:
 8009e74:	4801      	ldr	r0, [pc, #4]	; (8009e7c <__malloc_lock+0x8>)
 8009e76:	f000 b86b 	b.w	8009f50 <__retarget_lock_acquire_recursive>
 8009e7a:	bf00      	nop
 8009e7c:	20000b6c 	.word	0x20000b6c

08009e80 <__malloc_unlock>:
 8009e80:	4801      	ldr	r0, [pc, #4]	; (8009e88 <__malloc_unlock+0x8>)
 8009e82:	f000 b866 	b.w	8009f52 <__retarget_lock_release_recursive>
 8009e86:	bf00      	nop
 8009e88:	20000b6c 	.word	0x20000b6c

08009e8c <siprintf>:
 8009e8c:	b40e      	push	{r1, r2, r3}
 8009e8e:	b500      	push	{lr}
 8009e90:	b09c      	sub	sp, #112	; 0x70
 8009e92:	ab1d      	add	r3, sp, #116	; 0x74
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	9006      	str	r0, [sp, #24]
 8009e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e9c:	4809      	ldr	r0, [pc, #36]	; (8009ec4 <siprintf+0x38>)
 8009e9e:	9107      	str	r1, [sp, #28]
 8009ea0:	9104      	str	r1, [sp, #16]
 8009ea2:	4909      	ldr	r1, [pc, #36]	; (8009ec8 <siprintf+0x3c>)
 8009ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea8:	9105      	str	r1, [sp, #20]
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	a902      	add	r1, sp, #8
 8009eb0:	f000 f8f6 	bl	800a0a0 <_svfiprintf_r>
 8009eb4:	9b02      	ldr	r3, [sp, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	b01c      	add	sp, #112	; 0x70
 8009ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec0:	b003      	add	sp, #12
 8009ec2:	4770      	bx	lr
 8009ec4:	20000078 	.word	0x20000078
 8009ec8:	ffff0208 	.word	0xffff0208

08009ecc <memset>:
 8009ecc:	4402      	add	r2, r0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d100      	bne.n	8009ed6 <memset+0xa>
 8009ed4:	4770      	bx	lr
 8009ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eda:	e7f9      	b.n	8009ed0 <memset+0x4>

08009edc <_sbrk_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d06      	ldr	r5, [pc, #24]	; (8009ef8 <_sbrk_r+0x1c>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	602b      	str	r3, [r5, #0]
 8009ee8:	f7f7 ff06 	bl	8001cf8 <_sbrk>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_sbrk_r+0x1a>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_sbrk_r+0x1a>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	20000b68 	.word	0x20000b68

08009efc <__errno>:
 8009efc:	4b01      	ldr	r3, [pc, #4]	; (8009f04 <__errno+0x8>)
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	20000078 	.word	0x20000078

08009f08 <__libc_init_array>:
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	4d0d      	ldr	r5, [pc, #52]	; (8009f40 <__libc_init_array+0x38>)
 8009f0c:	4c0d      	ldr	r4, [pc, #52]	; (8009f44 <__libc_init_array+0x3c>)
 8009f0e:	1b64      	subs	r4, r4, r5
 8009f10:	10a4      	asrs	r4, r4, #2
 8009f12:	2600      	movs	r6, #0
 8009f14:	42a6      	cmp	r6, r4
 8009f16:	d109      	bne.n	8009f2c <__libc_init_array+0x24>
 8009f18:	4d0b      	ldr	r5, [pc, #44]	; (8009f48 <__libc_init_array+0x40>)
 8009f1a:	4c0c      	ldr	r4, [pc, #48]	; (8009f4c <__libc_init_array+0x44>)
 8009f1c:	f000 fbae 	bl	800a67c <_init>
 8009f20:	1b64      	subs	r4, r4, r5
 8009f22:	10a4      	asrs	r4, r4, #2
 8009f24:	2600      	movs	r6, #0
 8009f26:	42a6      	cmp	r6, r4
 8009f28:	d105      	bne.n	8009f36 <__libc_init_array+0x2e>
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f30:	4798      	blx	r3
 8009f32:	3601      	adds	r6, #1
 8009f34:	e7ee      	b.n	8009f14 <__libc_init_array+0xc>
 8009f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f3a:	4798      	blx	r3
 8009f3c:	3601      	adds	r6, #1
 8009f3e:	e7f2      	b.n	8009f26 <__libc_init_array+0x1e>
 8009f40:	0800a704 	.word	0x0800a704
 8009f44:	0800a704 	.word	0x0800a704
 8009f48:	0800a704 	.word	0x0800a704
 8009f4c:	0800a708 	.word	0x0800a708

08009f50 <__retarget_lock_acquire_recursive>:
 8009f50:	4770      	bx	lr

08009f52 <__retarget_lock_release_recursive>:
 8009f52:	4770      	bx	lr

08009f54 <_free_r>:
 8009f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f56:	2900      	cmp	r1, #0
 8009f58:	d044      	beq.n	8009fe4 <_free_r+0x90>
 8009f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5e:	9001      	str	r0, [sp, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f1a1 0404 	sub.w	r4, r1, #4
 8009f66:	bfb8      	it	lt
 8009f68:	18e4      	addlt	r4, r4, r3
 8009f6a:	f7ff ff83 	bl	8009e74 <__malloc_lock>
 8009f6e:	4a1e      	ldr	r2, [pc, #120]	; (8009fe8 <_free_r+0x94>)
 8009f70:	9801      	ldr	r0, [sp, #4]
 8009f72:	6813      	ldr	r3, [r2, #0]
 8009f74:	b933      	cbnz	r3, 8009f84 <_free_r+0x30>
 8009f76:	6063      	str	r3, [r4, #4]
 8009f78:	6014      	str	r4, [r2, #0]
 8009f7a:	b003      	add	sp, #12
 8009f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f80:	f7ff bf7e 	b.w	8009e80 <__malloc_unlock>
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	d908      	bls.n	8009f9a <_free_r+0x46>
 8009f88:	6825      	ldr	r5, [r4, #0]
 8009f8a:	1961      	adds	r1, r4, r5
 8009f8c:	428b      	cmp	r3, r1
 8009f8e:	bf01      	itttt	eq
 8009f90:	6819      	ldreq	r1, [r3, #0]
 8009f92:	685b      	ldreq	r3, [r3, #4]
 8009f94:	1949      	addeq	r1, r1, r5
 8009f96:	6021      	streq	r1, [r4, #0]
 8009f98:	e7ed      	b.n	8009f76 <_free_r+0x22>
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	b10b      	cbz	r3, 8009fa4 <_free_r+0x50>
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	d9fa      	bls.n	8009f9a <_free_r+0x46>
 8009fa4:	6811      	ldr	r1, [r2, #0]
 8009fa6:	1855      	adds	r5, r2, r1
 8009fa8:	42a5      	cmp	r5, r4
 8009faa:	d10b      	bne.n	8009fc4 <_free_r+0x70>
 8009fac:	6824      	ldr	r4, [r4, #0]
 8009fae:	4421      	add	r1, r4
 8009fb0:	1854      	adds	r4, r2, r1
 8009fb2:	42a3      	cmp	r3, r4
 8009fb4:	6011      	str	r1, [r2, #0]
 8009fb6:	d1e0      	bne.n	8009f7a <_free_r+0x26>
 8009fb8:	681c      	ldr	r4, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	6053      	str	r3, [r2, #4]
 8009fbe:	440c      	add	r4, r1
 8009fc0:	6014      	str	r4, [r2, #0]
 8009fc2:	e7da      	b.n	8009f7a <_free_r+0x26>
 8009fc4:	d902      	bls.n	8009fcc <_free_r+0x78>
 8009fc6:	230c      	movs	r3, #12
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	e7d6      	b.n	8009f7a <_free_r+0x26>
 8009fcc:	6825      	ldr	r5, [r4, #0]
 8009fce:	1961      	adds	r1, r4, r5
 8009fd0:	428b      	cmp	r3, r1
 8009fd2:	bf04      	itt	eq
 8009fd4:	6819      	ldreq	r1, [r3, #0]
 8009fd6:	685b      	ldreq	r3, [r3, #4]
 8009fd8:	6063      	str	r3, [r4, #4]
 8009fda:	bf04      	itt	eq
 8009fdc:	1949      	addeq	r1, r1, r5
 8009fde:	6021      	streq	r1, [r4, #0]
 8009fe0:	6054      	str	r4, [r2, #4]
 8009fe2:	e7ca      	b.n	8009f7a <_free_r+0x26>
 8009fe4:	b003      	add	sp, #12
 8009fe6:	bd30      	pop	{r4, r5, pc}
 8009fe8:	20000a28 	.word	0x20000a28

08009fec <__ssputs_r>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	688e      	ldr	r6, [r1, #8]
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	42be      	cmp	r6, r7
 8009ff6:	680b      	ldr	r3, [r1, #0]
 8009ff8:	4682      	mov	sl, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	4690      	mov	r8, r2
 8009ffe:	d82c      	bhi.n	800a05a <__ssputs_r+0x6e>
 800a000:	898a      	ldrh	r2, [r1, #12]
 800a002:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a006:	d026      	beq.n	800a056 <__ssputs_r+0x6a>
 800a008:	6965      	ldr	r5, [r4, #20]
 800a00a:	6909      	ldr	r1, [r1, #16]
 800a00c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a010:	eba3 0901 	sub.w	r9, r3, r1
 800a014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a018:	1c7b      	adds	r3, r7, #1
 800a01a:	444b      	add	r3, r9
 800a01c:	106d      	asrs	r5, r5, #1
 800a01e:	429d      	cmp	r5, r3
 800a020:	bf38      	it	cc
 800a022:	461d      	movcc	r5, r3
 800a024:	0553      	lsls	r3, r2, #21
 800a026:	d527      	bpl.n	800a078 <__ssputs_r+0x8c>
 800a028:	4629      	mov	r1, r5
 800a02a:	f7ff fea3 	bl	8009d74 <_malloc_r>
 800a02e:	4606      	mov	r6, r0
 800a030:	b360      	cbz	r0, 800a08c <__ssputs_r+0xa0>
 800a032:	6921      	ldr	r1, [r4, #16]
 800a034:	464a      	mov	r2, r9
 800a036:	f000 fadb 	bl	800a5f0 <memcpy>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a044:	81a3      	strh	r3, [r4, #12]
 800a046:	6126      	str	r6, [r4, #16]
 800a048:	6165      	str	r5, [r4, #20]
 800a04a:	444e      	add	r6, r9
 800a04c:	eba5 0509 	sub.w	r5, r5, r9
 800a050:	6026      	str	r6, [r4, #0]
 800a052:	60a5      	str	r5, [r4, #8]
 800a054:	463e      	mov	r6, r7
 800a056:	42be      	cmp	r6, r7
 800a058:	d900      	bls.n	800a05c <__ssputs_r+0x70>
 800a05a:	463e      	mov	r6, r7
 800a05c:	6820      	ldr	r0, [r4, #0]
 800a05e:	4632      	mov	r2, r6
 800a060:	4641      	mov	r1, r8
 800a062:	f000 faab 	bl	800a5bc <memmove>
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	1b9b      	subs	r3, r3, r6
 800a06a:	60a3      	str	r3, [r4, #8]
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	4433      	add	r3, r6
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	2000      	movs	r0, #0
 800a074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a078:	462a      	mov	r2, r5
 800a07a:	f000 fac7 	bl	800a60c <_realloc_r>
 800a07e:	4606      	mov	r6, r0
 800a080:	2800      	cmp	r0, #0
 800a082:	d1e0      	bne.n	800a046 <__ssputs_r+0x5a>
 800a084:	6921      	ldr	r1, [r4, #16]
 800a086:	4650      	mov	r0, sl
 800a088:	f7ff ff64 	bl	8009f54 <_free_r>
 800a08c:	230c      	movs	r3, #12
 800a08e:	f8ca 3000 	str.w	r3, [sl]
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	f04f 30ff 	mov.w	r0, #4294967295
 800a09e:	e7e9      	b.n	800a074 <__ssputs_r+0x88>

0800a0a0 <_svfiprintf_r>:
 800a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	4698      	mov	r8, r3
 800a0a6:	898b      	ldrh	r3, [r1, #12]
 800a0a8:	061b      	lsls	r3, r3, #24
 800a0aa:	b09d      	sub	sp, #116	; 0x74
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	460d      	mov	r5, r1
 800a0b0:	4614      	mov	r4, r2
 800a0b2:	d50e      	bpl.n	800a0d2 <_svfiprintf_r+0x32>
 800a0b4:	690b      	ldr	r3, [r1, #16]
 800a0b6:	b963      	cbnz	r3, 800a0d2 <_svfiprintf_r+0x32>
 800a0b8:	2140      	movs	r1, #64	; 0x40
 800a0ba:	f7ff fe5b 	bl	8009d74 <_malloc_r>
 800a0be:	6028      	str	r0, [r5, #0]
 800a0c0:	6128      	str	r0, [r5, #16]
 800a0c2:	b920      	cbnz	r0, 800a0ce <_svfiprintf_r+0x2e>
 800a0c4:	230c      	movs	r3, #12
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	e0d0      	b.n	800a270 <_svfiprintf_r+0x1d0>
 800a0ce:	2340      	movs	r3, #64	; 0x40
 800a0d0:	616b      	str	r3, [r5, #20]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d6:	2320      	movs	r3, #32
 800a0d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0e0:	2330      	movs	r3, #48	; 0x30
 800a0e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a288 <_svfiprintf_r+0x1e8>
 800a0e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ea:	f04f 0901 	mov.w	r9, #1
 800a0ee:	4623      	mov	r3, r4
 800a0f0:	469a      	mov	sl, r3
 800a0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0f6:	b10a      	cbz	r2, 800a0fc <_svfiprintf_r+0x5c>
 800a0f8:	2a25      	cmp	r2, #37	; 0x25
 800a0fa:	d1f9      	bne.n	800a0f0 <_svfiprintf_r+0x50>
 800a0fc:	ebba 0b04 	subs.w	fp, sl, r4
 800a100:	d00b      	beq.n	800a11a <_svfiprintf_r+0x7a>
 800a102:	465b      	mov	r3, fp
 800a104:	4622      	mov	r2, r4
 800a106:	4629      	mov	r1, r5
 800a108:	4638      	mov	r0, r7
 800a10a:	f7ff ff6f 	bl	8009fec <__ssputs_r>
 800a10e:	3001      	adds	r0, #1
 800a110:	f000 80a9 	beq.w	800a266 <_svfiprintf_r+0x1c6>
 800a114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a116:	445a      	add	r2, fp
 800a118:	9209      	str	r2, [sp, #36]	; 0x24
 800a11a:	f89a 3000 	ldrb.w	r3, [sl]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 80a1 	beq.w	800a266 <_svfiprintf_r+0x1c6>
 800a124:	2300      	movs	r3, #0
 800a126:	f04f 32ff 	mov.w	r2, #4294967295
 800a12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a12e:	f10a 0a01 	add.w	sl, sl, #1
 800a132:	9304      	str	r3, [sp, #16]
 800a134:	9307      	str	r3, [sp, #28]
 800a136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a13a:	931a      	str	r3, [sp, #104]	; 0x68
 800a13c:	4654      	mov	r4, sl
 800a13e:	2205      	movs	r2, #5
 800a140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a144:	4850      	ldr	r0, [pc, #320]	; (800a288 <_svfiprintf_r+0x1e8>)
 800a146:	f7f6 f85b 	bl	8000200 <memchr>
 800a14a:	9a04      	ldr	r2, [sp, #16]
 800a14c:	b9d8      	cbnz	r0, 800a186 <_svfiprintf_r+0xe6>
 800a14e:	06d0      	lsls	r0, r2, #27
 800a150:	bf44      	itt	mi
 800a152:	2320      	movmi	r3, #32
 800a154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a158:	0711      	lsls	r1, r2, #28
 800a15a:	bf44      	itt	mi
 800a15c:	232b      	movmi	r3, #43	; 0x2b
 800a15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a162:	f89a 3000 	ldrb.w	r3, [sl]
 800a166:	2b2a      	cmp	r3, #42	; 0x2a
 800a168:	d015      	beq.n	800a196 <_svfiprintf_r+0xf6>
 800a16a:	9a07      	ldr	r2, [sp, #28]
 800a16c:	4654      	mov	r4, sl
 800a16e:	2000      	movs	r0, #0
 800a170:	f04f 0c0a 	mov.w	ip, #10
 800a174:	4621      	mov	r1, r4
 800a176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a17a:	3b30      	subs	r3, #48	; 0x30
 800a17c:	2b09      	cmp	r3, #9
 800a17e:	d94d      	bls.n	800a21c <_svfiprintf_r+0x17c>
 800a180:	b1b0      	cbz	r0, 800a1b0 <_svfiprintf_r+0x110>
 800a182:	9207      	str	r2, [sp, #28]
 800a184:	e014      	b.n	800a1b0 <_svfiprintf_r+0x110>
 800a186:	eba0 0308 	sub.w	r3, r0, r8
 800a18a:	fa09 f303 	lsl.w	r3, r9, r3
 800a18e:	4313      	orrs	r3, r2
 800a190:	9304      	str	r3, [sp, #16]
 800a192:	46a2      	mov	sl, r4
 800a194:	e7d2      	b.n	800a13c <_svfiprintf_r+0x9c>
 800a196:	9b03      	ldr	r3, [sp, #12]
 800a198:	1d19      	adds	r1, r3, #4
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	9103      	str	r1, [sp, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	bfbb      	ittet	lt
 800a1a2:	425b      	neglt	r3, r3
 800a1a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a1a8:	9307      	strge	r3, [sp, #28]
 800a1aa:	9307      	strlt	r3, [sp, #28]
 800a1ac:	bfb8      	it	lt
 800a1ae:	9204      	strlt	r2, [sp, #16]
 800a1b0:	7823      	ldrb	r3, [r4, #0]
 800a1b2:	2b2e      	cmp	r3, #46	; 0x2e
 800a1b4:	d10c      	bne.n	800a1d0 <_svfiprintf_r+0x130>
 800a1b6:	7863      	ldrb	r3, [r4, #1]
 800a1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ba:	d134      	bne.n	800a226 <_svfiprintf_r+0x186>
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	1d1a      	adds	r2, r3, #4
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	9203      	str	r2, [sp, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	bfb8      	it	lt
 800a1c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1cc:	3402      	adds	r4, #2
 800a1ce:	9305      	str	r3, [sp, #20]
 800a1d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a298 <_svfiprintf_r+0x1f8>
 800a1d4:	7821      	ldrb	r1, [r4, #0]
 800a1d6:	2203      	movs	r2, #3
 800a1d8:	4650      	mov	r0, sl
 800a1da:	f7f6 f811 	bl	8000200 <memchr>
 800a1de:	b138      	cbz	r0, 800a1f0 <_svfiprintf_r+0x150>
 800a1e0:	9b04      	ldr	r3, [sp, #16]
 800a1e2:	eba0 000a 	sub.w	r0, r0, sl
 800a1e6:	2240      	movs	r2, #64	; 0x40
 800a1e8:	4082      	lsls	r2, r0
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	3401      	adds	r4, #1
 800a1ee:	9304      	str	r3, [sp, #16]
 800a1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f4:	4825      	ldr	r0, [pc, #148]	; (800a28c <_svfiprintf_r+0x1ec>)
 800a1f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1fa:	2206      	movs	r2, #6
 800a1fc:	f7f6 f800 	bl	8000200 <memchr>
 800a200:	2800      	cmp	r0, #0
 800a202:	d038      	beq.n	800a276 <_svfiprintf_r+0x1d6>
 800a204:	4b22      	ldr	r3, [pc, #136]	; (800a290 <_svfiprintf_r+0x1f0>)
 800a206:	bb1b      	cbnz	r3, 800a250 <_svfiprintf_r+0x1b0>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	3307      	adds	r3, #7
 800a20c:	f023 0307 	bic.w	r3, r3, #7
 800a210:	3308      	adds	r3, #8
 800a212:	9303      	str	r3, [sp, #12]
 800a214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a216:	4433      	add	r3, r6
 800a218:	9309      	str	r3, [sp, #36]	; 0x24
 800a21a:	e768      	b.n	800a0ee <_svfiprintf_r+0x4e>
 800a21c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a220:	460c      	mov	r4, r1
 800a222:	2001      	movs	r0, #1
 800a224:	e7a6      	b.n	800a174 <_svfiprintf_r+0xd4>
 800a226:	2300      	movs	r3, #0
 800a228:	3401      	adds	r4, #1
 800a22a:	9305      	str	r3, [sp, #20]
 800a22c:	4619      	mov	r1, r3
 800a22e:	f04f 0c0a 	mov.w	ip, #10
 800a232:	4620      	mov	r0, r4
 800a234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a238:	3a30      	subs	r2, #48	; 0x30
 800a23a:	2a09      	cmp	r2, #9
 800a23c:	d903      	bls.n	800a246 <_svfiprintf_r+0x1a6>
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0c6      	beq.n	800a1d0 <_svfiprintf_r+0x130>
 800a242:	9105      	str	r1, [sp, #20]
 800a244:	e7c4      	b.n	800a1d0 <_svfiprintf_r+0x130>
 800a246:	fb0c 2101 	mla	r1, ip, r1, r2
 800a24a:	4604      	mov	r4, r0
 800a24c:	2301      	movs	r3, #1
 800a24e:	e7f0      	b.n	800a232 <_svfiprintf_r+0x192>
 800a250:	ab03      	add	r3, sp, #12
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	462a      	mov	r2, r5
 800a256:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <_svfiprintf_r+0x1f4>)
 800a258:	a904      	add	r1, sp, #16
 800a25a:	4638      	mov	r0, r7
 800a25c:	f3af 8000 	nop.w
 800a260:	1c42      	adds	r2, r0, #1
 800a262:	4606      	mov	r6, r0
 800a264:	d1d6      	bne.n	800a214 <_svfiprintf_r+0x174>
 800a266:	89ab      	ldrh	r3, [r5, #12]
 800a268:	065b      	lsls	r3, r3, #25
 800a26a:	f53f af2d 	bmi.w	800a0c8 <_svfiprintf_r+0x28>
 800a26e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a270:	b01d      	add	sp, #116	; 0x74
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	ab03      	add	r3, sp, #12
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	462a      	mov	r2, r5
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <_svfiprintf_r+0x1f4>)
 800a27e:	a904      	add	r1, sp, #16
 800a280:	4638      	mov	r0, r7
 800a282:	f000 f879 	bl	800a378 <_printf_i>
 800a286:	e7eb      	b.n	800a260 <_svfiprintf_r+0x1c0>
 800a288:	0800a6c8 	.word	0x0800a6c8
 800a28c:	0800a6d2 	.word	0x0800a6d2
 800a290:	00000000 	.word	0x00000000
 800a294:	08009fed 	.word	0x08009fed
 800a298:	0800a6ce 	.word	0x0800a6ce

0800a29c <_printf_common>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	4616      	mov	r6, r2
 800a2a2:	4699      	mov	r9, r3
 800a2a4:	688a      	ldr	r2, [r1, #8]
 800a2a6:	690b      	ldr	r3, [r1, #16]
 800a2a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	bfb8      	it	lt
 800a2b0:	4613      	movlt	r3, r2
 800a2b2:	6033      	str	r3, [r6, #0]
 800a2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	b10a      	cbz	r2, 800a2c2 <_printf_common+0x26>
 800a2be:	3301      	adds	r3, #1
 800a2c0:	6033      	str	r3, [r6, #0]
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	0699      	lsls	r1, r3, #26
 800a2c6:	bf42      	ittt	mi
 800a2c8:	6833      	ldrmi	r3, [r6, #0]
 800a2ca:	3302      	addmi	r3, #2
 800a2cc:	6033      	strmi	r3, [r6, #0]
 800a2ce:	6825      	ldr	r5, [r4, #0]
 800a2d0:	f015 0506 	ands.w	r5, r5, #6
 800a2d4:	d106      	bne.n	800a2e4 <_printf_common+0x48>
 800a2d6:	f104 0a19 	add.w	sl, r4, #25
 800a2da:	68e3      	ldr	r3, [r4, #12]
 800a2dc:	6832      	ldr	r2, [r6, #0]
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	42ab      	cmp	r3, r5
 800a2e2:	dc26      	bgt.n	800a332 <_printf_common+0x96>
 800a2e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2e8:	1e13      	subs	r3, r2, #0
 800a2ea:	6822      	ldr	r2, [r4, #0]
 800a2ec:	bf18      	it	ne
 800a2ee:	2301      	movne	r3, #1
 800a2f0:	0692      	lsls	r2, r2, #26
 800a2f2:	d42b      	bmi.n	800a34c <_printf_common+0xb0>
 800a2f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	47c0      	blx	r8
 800a2fe:	3001      	adds	r0, #1
 800a300:	d01e      	beq.n	800a340 <_printf_common+0xa4>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	6922      	ldr	r2, [r4, #16]
 800a306:	f003 0306 	and.w	r3, r3, #6
 800a30a:	2b04      	cmp	r3, #4
 800a30c:	bf02      	ittt	eq
 800a30e:	68e5      	ldreq	r5, [r4, #12]
 800a310:	6833      	ldreq	r3, [r6, #0]
 800a312:	1aed      	subeq	r5, r5, r3
 800a314:	68a3      	ldr	r3, [r4, #8]
 800a316:	bf0c      	ite	eq
 800a318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a31c:	2500      	movne	r5, #0
 800a31e:	4293      	cmp	r3, r2
 800a320:	bfc4      	itt	gt
 800a322:	1a9b      	subgt	r3, r3, r2
 800a324:	18ed      	addgt	r5, r5, r3
 800a326:	2600      	movs	r6, #0
 800a328:	341a      	adds	r4, #26
 800a32a:	42b5      	cmp	r5, r6
 800a32c:	d11a      	bne.n	800a364 <_printf_common+0xc8>
 800a32e:	2000      	movs	r0, #0
 800a330:	e008      	b.n	800a344 <_printf_common+0xa8>
 800a332:	2301      	movs	r3, #1
 800a334:	4652      	mov	r2, sl
 800a336:	4649      	mov	r1, r9
 800a338:	4638      	mov	r0, r7
 800a33a:	47c0      	blx	r8
 800a33c:	3001      	adds	r0, #1
 800a33e:	d103      	bne.n	800a348 <_printf_common+0xac>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	3501      	adds	r5, #1
 800a34a:	e7c6      	b.n	800a2da <_printf_common+0x3e>
 800a34c:	18e1      	adds	r1, r4, r3
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	2030      	movs	r0, #48	; 0x30
 800a352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a356:	4422      	add	r2, r4
 800a358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a35c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a360:	3302      	adds	r3, #2
 800a362:	e7c7      	b.n	800a2f4 <_printf_common+0x58>
 800a364:	2301      	movs	r3, #1
 800a366:	4622      	mov	r2, r4
 800a368:	4649      	mov	r1, r9
 800a36a:	4638      	mov	r0, r7
 800a36c:	47c0      	blx	r8
 800a36e:	3001      	adds	r0, #1
 800a370:	d0e6      	beq.n	800a340 <_printf_common+0xa4>
 800a372:	3601      	adds	r6, #1
 800a374:	e7d9      	b.n	800a32a <_printf_common+0x8e>
	...

0800a378 <_printf_i>:
 800a378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a37c:	7e0f      	ldrb	r7, [r1, #24]
 800a37e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a380:	2f78      	cmp	r7, #120	; 0x78
 800a382:	4691      	mov	r9, r2
 800a384:	4680      	mov	r8, r0
 800a386:	460c      	mov	r4, r1
 800a388:	469a      	mov	sl, r3
 800a38a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a38e:	d807      	bhi.n	800a3a0 <_printf_i+0x28>
 800a390:	2f62      	cmp	r7, #98	; 0x62
 800a392:	d80a      	bhi.n	800a3aa <_printf_i+0x32>
 800a394:	2f00      	cmp	r7, #0
 800a396:	f000 80d4 	beq.w	800a542 <_printf_i+0x1ca>
 800a39a:	2f58      	cmp	r7, #88	; 0x58
 800a39c:	f000 80c0 	beq.w	800a520 <_printf_i+0x1a8>
 800a3a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3a8:	e03a      	b.n	800a420 <_printf_i+0xa8>
 800a3aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3ae:	2b15      	cmp	r3, #21
 800a3b0:	d8f6      	bhi.n	800a3a0 <_printf_i+0x28>
 800a3b2:	a101      	add	r1, pc, #4	; (adr r1, 800a3b8 <_printf_i+0x40>)
 800a3b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	0800a425 	.word	0x0800a425
 800a3c0:	0800a3a1 	.word	0x0800a3a1
 800a3c4:	0800a3a1 	.word	0x0800a3a1
 800a3c8:	0800a3a1 	.word	0x0800a3a1
 800a3cc:	0800a3a1 	.word	0x0800a3a1
 800a3d0:	0800a425 	.word	0x0800a425
 800a3d4:	0800a3a1 	.word	0x0800a3a1
 800a3d8:	0800a3a1 	.word	0x0800a3a1
 800a3dc:	0800a3a1 	.word	0x0800a3a1
 800a3e0:	0800a3a1 	.word	0x0800a3a1
 800a3e4:	0800a529 	.word	0x0800a529
 800a3e8:	0800a451 	.word	0x0800a451
 800a3ec:	0800a4e3 	.word	0x0800a4e3
 800a3f0:	0800a3a1 	.word	0x0800a3a1
 800a3f4:	0800a3a1 	.word	0x0800a3a1
 800a3f8:	0800a54b 	.word	0x0800a54b
 800a3fc:	0800a3a1 	.word	0x0800a3a1
 800a400:	0800a451 	.word	0x0800a451
 800a404:	0800a3a1 	.word	0x0800a3a1
 800a408:	0800a3a1 	.word	0x0800a3a1
 800a40c:	0800a4eb 	.word	0x0800a4eb
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	1d1a      	adds	r2, r3, #4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	602a      	str	r2, [r5, #0]
 800a418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a41c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a420:	2301      	movs	r3, #1
 800a422:	e09f      	b.n	800a564 <_printf_i+0x1ec>
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	0607      	lsls	r7, r0, #24
 800a42a:	f103 0104 	add.w	r1, r3, #4
 800a42e:	6029      	str	r1, [r5, #0]
 800a430:	d501      	bpl.n	800a436 <_printf_i+0xbe>
 800a432:	681e      	ldr	r6, [r3, #0]
 800a434:	e003      	b.n	800a43e <_printf_i+0xc6>
 800a436:	0646      	lsls	r6, r0, #25
 800a438:	d5fb      	bpl.n	800a432 <_printf_i+0xba>
 800a43a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a43e:	2e00      	cmp	r6, #0
 800a440:	da03      	bge.n	800a44a <_printf_i+0xd2>
 800a442:	232d      	movs	r3, #45	; 0x2d
 800a444:	4276      	negs	r6, r6
 800a446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a44a:	485a      	ldr	r0, [pc, #360]	; (800a5b4 <_printf_i+0x23c>)
 800a44c:	230a      	movs	r3, #10
 800a44e:	e012      	b.n	800a476 <_printf_i+0xfe>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	6820      	ldr	r0, [r4, #0]
 800a454:	1d19      	adds	r1, r3, #4
 800a456:	6029      	str	r1, [r5, #0]
 800a458:	0605      	lsls	r5, r0, #24
 800a45a:	d501      	bpl.n	800a460 <_printf_i+0xe8>
 800a45c:	681e      	ldr	r6, [r3, #0]
 800a45e:	e002      	b.n	800a466 <_printf_i+0xee>
 800a460:	0641      	lsls	r1, r0, #25
 800a462:	d5fb      	bpl.n	800a45c <_printf_i+0xe4>
 800a464:	881e      	ldrh	r6, [r3, #0]
 800a466:	4853      	ldr	r0, [pc, #332]	; (800a5b4 <_printf_i+0x23c>)
 800a468:	2f6f      	cmp	r7, #111	; 0x6f
 800a46a:	bf0c      	ite	eq
 800a46c:	2308      	moveq	r3, #8
 800a46e:	230a      	movne	r3, #10
 800a470:	2100      	movs	r1, #0
 800a472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a476:	6865      	ldr	r5, [r4, #4]
 800a478:	60a5      	str	r5, [r4, #8]
 800a47a:	2d00      	cmp	r5, #0
 800a47c:	bfa2      	ittt	ge
 800a47e:	6821      	ldrge	r1, [r4, #0]
 800a480:	f021 0104 	bicge.w	r1, r1, #4
 800a484:	6021      	strge	r1, [r4, #0]
 800a486:	b90e      	cbnz	r6, 800a48c <_printf_i+0x114>
 800a488:	2d00      	cmp	r5, #0
 800a48a:	d04b      	beq.n	800a524 <_printf_i+0x1ac>
 800a48c:	4615      	mov	r5, r2
 800a48e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a492:	fb03 6711 	mls	r7, r3, r1, r6
 800a496:	5dc7      	ldrb	r7, [r0, r7]
 800a498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a49c:	4637      	mov	r7, r6
 800a49e:	42bb      	cmp	r3, r7
 800a4a0:	460e      	mov	r6, r1
 800a4a2:	d9f4      	bls.n	800a48e <_printf_i+0x116>
 800a4a4:	2b08      	cmp	r3, #8
 800a4a6:	d10b      	bne.n	800a4c0 <_printf_i+0x148>
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	07de      	lsls	r6, r3, #31
 800a4ac:	d508      	bpl.n	800a4c0 <_printf_i+0x148>
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	6861      	ldr	r1, [r4, #4]
 800a4b2:	4299      	cmp	r1, r3
 800a4b4:	bfde      	ittt	le
 800a4b6:	2330      	movle	r3, #48	; 0x30
 800a4b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4c0:	1b52      	subs	r2, r2, r5
 800a4c2:	6122      	str	r2, [r4, #16]
 800a4c4:	f8cd a000 	str.w	sl, [sp]
 800a4c8:	464b      	mov	r3, r9
 800a4ca:	aa03      	add	r2, sp, #12
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	f7ff fee4 	bl	800a29c <_printf_common>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d14a      	bne.n	800a56e <_printf_i+0x1f6>
 800a4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4dc:	b004      	add	sp, #16
 800a4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	f043 0320 	orr.w	r3, r3, #32
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	4833      	ldr	r0, [pc, #204]	; (800a5b8 <_printf_i+0x240>)
 800a4ec:	2778      	movs	r7, #120	; 0x78
 800a4ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	6829      	ldr	r1, [r5, #0]
 800a4f6:	061f      	lsls	r7, r3, #24
 800a4f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4fc:	d402      	bmi.n	800a504 <_printf_i+0x18c>
 800a4fe:	065f      	lsls	r7, r3, #25
 800a500:	bf48      	it	mi
 800a502:	b2b6      	uxthmi	r6, r6
 800a504:	07df      	lsls	r7, r3, #31
 800a506:	bf48      	it	mi
 800a508:	f043 0320 	orrmi.w	r3, r3, #32
 800a50c:	6029      	str	r1, [r5, #0]
 800a50e:	bf48      	it	mi
 800a510:	6023      	strmi	r3, [r4, #0]
 800a512:	b91e      	cbnz	r6, 800a51c <_printf_i+0x1a4>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	f023 0320 	bic.w	r3, r3, #32
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	2310      	movs	r3, #16
 800a51e:	e7a7      	b.n	800a470 <_printf_i+0xf8>
 800a520:	4824      	ldr	r0, [pc, #144]	; (800a5b4 <_printf_i+0x23c>)
 800a522:	e7e4      	b.n	800a4ee <_printf_i+0x176>
 800a524:	4615      	mov	r5, r2
 800a526:	e7bd      	b.n	800a4a4 <_printf_i+0x12c>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	6826      	ldr	r6, [r4, #0]
 800a52c:	6961      	ldr	r1, [r4, #20]
 800a52e:	1d18      	adds	r0, r3, #4
 800a530:	6028      	str	r0, [r5, #0]
 800a532:	0635      	lsls	r5, r6, #24
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	d501      	bpl.n	800a53c <_printf_i+0x1c4>
 800a538:	6019      	str	r1, [r3, #0]
 800a53a:	e002      	b.n	800a542 <_printf_i+0x1ca>
 800a53c:	0670      	lsls	r0, r6, #25
 800a53e:	d5fb      	bpl.n	800a538 <_printf_i+0x1c0>
 800a540:	8019      	strh	r1, [r3, #0]
 800a542:	2300      	movs	r3, #0
 800a544:	6123      	str	r3, [r4, #16]
 800a546:	4615      	mov	r5, r2
 800a548:	e7bc      	b.n	800a4c4 <_printf_i+0x14c>
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	1d1a      	adds	r2, r3, #4
 800a54e:	602a      	str	r2, [r5, #0]
 800a550:	681d      	ldr	r5, [r3, #0]
 800a552:	6862      	ldr	r2, [r4, #4]
 800a554:	2100      	movs	r1, #0
 800a556:	4628      	mov	r0, r5
 800a558:	f7f5 fe52 	bl	8000200 <memchr>
 800a55c:	b108      	cbz	r0, 800a562 <_printf_i+0x1ea>
 800a55e:	1b40      	subs	r0, r0, r5
 800a560:	6060      	str	r0, [r4, #4]
 800a562:	6863      	ldr	r3, [r4, #4]
 800a564:	6123      	str	r3, [r4, #16]
 800a566:	2300      	movs	r3, #0
 800a568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a56c:	e7aa      	b.n	800a4c4 <_printf_i+0x14c>
 800a56e:	6923      	ldr	r3, [r4, #16]
 800a570:	462a      	mov	r2, r5
 800a572:	4649      	mov	r1, r9
 800a574:	4640      	mov	r0, r8
 800a576:	47d0      	blx	sl
 800a578:	3001      	adds	r0, #1
 800a57a:	d0ad      	beq.n	800a4d8 <_printf_i+0x160>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	079b      	lsls	r3, r3, #30
 800a580:	d413      	bmi.n	800a5aa <_printf_i+0x232>
 800a582:	68e0      	ldr	r0, [r4, #12]
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	4298      	cmp	r0, r3
 800a588:	bfb8      	it	lt
 800a58a:	4618      	movlt	r0, r3
 800a58c:	e7a6      	b.n	800a4dc <_printf_i+0x164>
 800a58e:	2301      	movs	r3, #1
 800a590:	4632      	mov	r2, r6
 800a592:	4649      	mov	r1, r9
 800a594:	4640      	mov	r0, r8
 800a596:	47d0      	blx	sl
 800a598:	3001      	adds	r0, #1
 800a59a:	d09d      	beq.n	800a4d8 <_printf_i+0x160>
 800a59c:	3501      	adds	r5, #1
 800a59e:	68e3      	ldr	r3, [r4, #12]
 800a5a0:	9903      	ldr	r1, [sp, #12]
 800a5a2:	1a5b      	subs	r3, r3, r1
 800a5a4:	42ab      	cmp	r3, r5
 800a5a6:	dcf2      	bgt.n	800a58e <_printf_i+0x216>
 800a5a8:	e7eb      	b.n	800a582 <_printf_i+0x20a>
 800a5aa:	2500      	movs	r5, #0
 800a5ac:	f104 0619 	add.w	r6, r4, #25
 800a5b0:	e7f5      	b.n	800a59e <_printf_i+0x226>
 800a5b2:	bf00      	nop
 800a5b4:	0800a6d9 	.word	0x0800a6d9
 800a5b8:	0800a6ea 	.word	0x0800a6ea

0800a5bc <memmove>:
 800a5bc:	4288      	cmp	r0, r1
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	eb01 0402 	add.w	r4, r1, r2
 800a5c4:	d902      	bls.n	800a5cc <memmove+0x10>
 800a5c6:	4284      	cmp	r4, r0
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	d807      	bhi.n	800a5dc <memmove+0x20>
 800a5cc:	1e43      	subs	r3, r0, #1
 800a5ce:	42a1      	cmp	r1, r4
 800a5d0:	d008      	beq.n	800a5e4 <memmove+0x28>
 800a5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5da:	e7f8      	b.n	800a5ce <memmove+0x12>
 800a5dc:	4402      	add	r2, r0
 800a5de:	4601      	mov	r1, r0
 800a5e0:	428a      	cmp	r2, r1
 800a5e2:	d100      	bne.n	800a5e6 <memmove+0x2a>
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ee:	e7f7      	b.n	800a5e0 <memmove+0x24>

0800a5f0 <memcpy>:
 800a5f0:	440a      	add	r2, r1
 800a5f2:	4291      	cmp	r1, r2
 800a5f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5f8:	d100      	bne.n	800a5fc <memcpy+0xc>
 800a5fa:	4770      	bx	lr
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a602:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a606:	4291      	cmp	r1, r2
 800a608:	d1f9      	bne.n	800a5fe <memcpy+0xe>
 800a60a:	bd10      	pop	{r4, pc}

0800a60c <_realloc_r>:
 800a60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a610:	4680      	mov	r8, r0
 800a612:	4614      	mov	r4, r2
 800a614:	460e      	mov	r6, r1
 800a616:	b921      	cbnz	r1, 800a622 <_realloc_r+0x16>
 800a618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a61c:	4611      	mov	r1, r2
 800a61e:	f7ff bba9 	b.w	8009d74 <_malloc_r>
 800a622:	b92a      	cbnz	r2, 800a630 <_realloc_r+0x24>
 800a624:	f7ff fc96 	bl	8009f54 <_free_r>
 800a628:	4625      	mov	r5, r4
 800a62a:	4628      	mov	r0, r5
 800a62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a630:	f000 f81b 	bl	800a66a <_malloc_usable_size_r>
 800a634:	4284      	cmp	r4, r0
 800a636:	4607      	mov	r7, r0
 800a638:	d802      	bhi.n	800a640 <_realloc_r+0x34>
 800a63a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a63e:	d812      	bhi.n	800a666 <_realloc_r+0x5a>
 800a640:	4621      	mov	r1, r4
 800a642:	4640      	mov	r0, r8
 800a644:	f7ff fb96 	bl	8009d74 <_malloc_r>
 800a648:	4605      	mov	r5, r0
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d0ed      	beq.n	800a62a <_realloc_r+0x1e>
 800a64e:	42bc      	cmp	r4, r7
 800a650:	4622      	mov	r2, r4
 800a652:	4631      	mov	r1, r6
 800a654:	bf28      	it	cs
 800a656:	463a      	movcs	r2, r7
 800a658:	f7ff ffca 	bl	800a5f0 <memcpy>
 800a65c:	4631      	mov	r1, r6
 800a65e:	4640      	mov	r0, r8
 800a660:	f7ff fc78 	bl	8009f54 <_free_r>
 800a664:	e7e1      	b.n	800a62a <_realloc_r+0x1e>
 800a666:	4635      	mov	r5, r6
 800a668:	e7df      	b.n	800a62a <_realloc_r+0x1e>

0800a66a <_malloc_usable_size_r>:
 800a66a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a66e:	1f18      	subs	r0, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	bfbc      	itt	lt
 800a674:	580b      	ldrlt	r3, [r1, r0]
 800a676:	18c0      	addlt	r0, r0, r3
 800a678:	4770      	bx	lr
	...

0800a67c <_init>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	bf00      	nop
 800a680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a682:	bc08      	pop	{r3}
 800a684:	469e      	mov	lr, r3
 800a686:	4770      	bx	lr

0800a688 <_fini>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	bf00      	nop
 800a68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68e:	bc08      	pop	{r3}
 800a690:	469e      	mov	lr, r3
 800a692:	4770      	bx	lr
